package com.publisherdata.Daos;

import com.github.wnameless.json.unflattener.JsonUnflattener;
import com.publisherdata.model.Article;
import com.publisherdata.model.PublisherReport;
import com.publisherdata.model.Site;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.sql.ResultSet;
import java.sql.SQLFeatureNotSupportedException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import javolution.util.FastMap;

import org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequestBuilder;
import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.AdminClient;
import org.elasticsearch.client.ClusterAdminClient;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.plugin.nlpcn.QueryActionElasticExecutor;
import org.elasticsearch.plugin.nlpcn.executors.CSVResult;
import org.elasticsearch.plugin.nlpcn.executors.CSVResultsExtractor;
import org.elasticsearch.plugin.nlpcn.executors.CsvExtractorException;
import org.elasticsearch.search.aggregations.Aggregations;
import org.json.JSONArray;
import org.nlpcn.es4sql.SearchDao;
import org.nlpcn.es4sql.exception.SqlParseException;
import org.nlpcn.es4sql.query.QueryAction;
import org.nlpcn.es4sql.query.SqlElasticSearchRequestBuilder;

import util.Convertor;
import util.EhCacheKeyCodeRepository;
import util.GetMiddlewareData;
import util.ListtoResultSet;
import util.NestedJSON;
import util.NestedJSON5;
import util.NestedJSON7;
import util.NestedJSON8;

public class AggregationModule
{
  private static TransportClient client;
  private static SearchDao searchDao;
  private static AggregationModule INSTANCE;
  public static NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.US);
  public static Map<String,String> citycodeMap;
  public static Map<String,String> citycodeMap2;
  public static Map<String,String> countrymap;
  public static Map<String,List<String>> countrystatemap;
  public static Map<String,List<String>> countrystatecitymap;
  public static Map<String,String> citylatlongMap1;
  
  static {
      
      String csvFilev1 = "/media/raptor/Data/publisherinsights/citylatlong.csv";
      BufferedReader brv1 = null;
      String linev1 = "";
      String cvsSplitByv1 = ",";
      String citykeyv1 = "";
      Map<String, String> citylatlongMap2  = new HashMap<String,String>();
      try {

          brv1 = new BufferedReader(new FileReader(csvFilev1));
         
          while ((linev1 = brv1.readLine()) != null) {

             try{
          	// use comma as separator
              linev1 = linev1.replace(",,",", , ");
          	//   System.out.println(line);
          	String[] cityDetailsv1 = linev1.split(cvsSplitByv1);
              citykeyv1 = cityDetailsv1[1];
              citylatlongMap2.put(citykeyv1,cityDetailsv1[5]+","+cityDetailsv1[6]);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
            
             }
             catch(Exception e)
             {
          	     
            	 e.printStackTrace(); 
                 continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      citylatlongMap1 = Collections.unmodifiableMap(citylatlongMap2);  
  
      //    System.out.println(citycodeMap);
  }
  
  
  
  static {
      Map<String, String> countryMap1 = new HashMap<String,String>();
      String csvFile = "/media/raptor/Data/publisherinsights/countrycodes.csv";
      BufferedReader br = null;
      String line = "";
      String cvsSplitBy = ",";
      String countrykey = "";
      Map<String, String> countryMap2  = new HashMap<String,String>();
      try {

          br = new BufferedReader(new FileReader(csvFile));
         
          while ((line = br.readLine()) != null) {

             try{
          	// use comma as separator
              line = line.replace(",,",", , ");
          	//   System.out.println(line);
          	String[] countryDetails = line.split(cvsSplitBy);
              countrykey = countryDetails[0];
              countryMap1.put(countrykey,countryDetails[1]);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
            
             }
             catch(Exception e)
             {
          	     
            	 e.printStackTrace(); 
                 continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      countrymap = Collections.unmodifiableMap(countryMap1);  
  
      //    System.out.println(citycodeMap);
  }
  
  
  
  static {
      Map<String, List<String>> countrystateMap1 = new HashMap<String,List<String>>();
      String csvFile1 = "/media/raptor/Data/publisherinsights/statecodes.csv";
      BufferedReader br1 = null;
      String line1 = "";
      String cvsSplitBy1 = ",";
      String countrykey1 = "";
      Map<String, String> countrystateMap2  = new HashMap<String,String>();
      List<String> list1 = new ArrayList<String>();
      try {

          br1 = new BufferedReader(new FileReader(csvFile1));
         
          while ((line1 = br1.readLine()) != null) {

             try{
          	// use comma as separator
              line1 = line1.replace(",,",", , ");
          	//   System.out.println(line);
           	String[] countrystateDetails = line1.split(cvsSplitBy1);
              countrykey1 = countrystateDetails[0];
              if(countrystateMap1.containsKey(countrykey1)==false){
            	  List<String> list = new ArrayList<String>();
            	  list.add(countrystateDetails[1]+":"+countrystateDetails[2]);
            	  countrystateMap1.put(countrykey1,list);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
              }
              else{
            	  list1 = countrystateMap1.get(countrykey1);
            	  list1.add(countrystateDetails[1]+":"+countrystateDetails[2]);
            	  countrystateMap1.put(countrykey1, list1);
            	  
              }
             }
             catch(Exception e)
             {
          	   e.printStackTrace(); 
               continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      countrystatemap = Collections.unmodifiableMap(countrystateMap1);  
  
      //    System.out.println(citycodeMap);
  }
  
  
  
   
  static {
      Map<String, String> cityMap = new HashMap<String,String>();
      String csvFile2 = "/media/raptor/Data/publisherinsights/citycode1.csv";
      BufferedReader br2 = null;
      String line2 = "";
      String cvsSplitBy2 = ",";
      String key = "";
      Map<String, String> cityMap1  = new HashMap<String,String>();
      Map<String, List<String>> cityMap2  = new HashMap<String,List<String>>();
      List<String> list2 = new ArrayList<String>();
      
      try {

          br2 = new BufferedReader(new FileReader(csvFile2));
         
          while ((line2 = br2.readLine()) != null) {

             try{
          	// use comma as separator
              line2 = line2.replace(",,",", , ");
          	//   System.out.println(line);
          	String[] geoDetails = line2.split(cvsSplitBy2);
              key = geoDetails[6];
              cityMap1.put(key,geoDetails[5]);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
              cityMap.put(geoDetails[5],key);
              if(cityMap2.containsKey(geoDetails[0]+":"+geoDetails[1])==false){
            	  List<String> list = new ArrayList<String>();
            	  list.add(geoDetails[2]);
            	  cityMap2.put(geoDetails[0]+":"+geoDetails[1],list);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
              }
              else{
            	  list2 = cityMap2.get(geoDetails[0]+":"+geoDetails[1]);
            	  list2.add(geoDetails[2]);
            	  cityMap2.put(geoDetails[0]+":"+geoDetails[1], list2);
            	  
              }             }
             catch(Exception e)
             {
          	   e.printStackTrace(); 
               continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      citycodeMap = Collections.unmodifiableMap(cityMap1);  
      citycodeMap2 = Collections.unmodifiableMap(cityMap);  
      countrystatecitymap = Collections.unmodifiableMap(cityMap2);
      //    System.out.println(citycodeMap);
  }
  
    
  
  
  
  public static Map<String,String> oscodeMap;
  static {
      Map<String, String> osMap = new HashMap<String,String>();
      String csvFile = "/media/raptor/Data/publisherinsights/oscode2.csv";
      BufferedReader br = null;
      String line = "";
      String cvsSplitBy = ",";
      String key = "";
      Map<String, String> osMap1  = new HashMap<String,String>();
      try {

          br = new BufferedReader(new FileReader(csvFile));
         
          while ((line = br.readLine()) != null) {

             try{
          	// use comma as separator
              line = line.replace(",,",", , ");
          	//   System.out.println(line);
          	String[] osDetails = line.split(cvsSplitBy);
              key = osDetails[0];
              osMap1.put(key,osDetails[1]);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
             }
             catch(Exception e)
             {
          	   e.printStackTrace(); 
               continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      oscodeMap = Collections.unmodifiableMap(osMap1);  
      System.out.println(oscodeMap);
  }
   
 
  public static Map<String,String> oscodeMap1;
  static {
      Map<String, String> osMap2 = new HashMap<String,String>();
      String csvFile = "/media/raptor/Data/publisherinsights/system_os.csv";
      BufferedReader br = null;
      String line = "";
      String cvsSplitBy = ",";
      String key = "";
      Map<String, String> osMap3  = new HashMap<String,String>();
      try {

          br = new BufferedReader(new FileReader(csvFile));
         
          while ((line = br.readLine()) != null) {

             try{
          	// use comma as separator
              line = line.replace(",,",", , ");
          	//   System.out.println(line);
          	String[] osDetails = line.split(cvsSplitBy);
              key = osDetails[2];
              osMap3.put(key,osDetails[0]+","+osDetails[1]);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
             }
             catch(Exception e)
             {
          	   e.printStackTrace(); 
               continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      oscodeMap1 = Collections.unmodifiableMap(osMap3);  
      System.out.println(oscodeMap1);
  }
  
  
  
  
  
  public static Map<String,String> devicecodeMap;
  static {
      Map<String, String> deviceMap = new HashMap<String,String>();
      String csvFile = "/media/raptor/Data/publisherinsights/devicecode2.csv";
      BufferedReader br = null;
      String line = "";
      String cvsSplitBy = ",";
      String key = "";
      Map<String, String> deviceMap1  = new HashMap<String,String>();
      try {

          br = new BufferedReader(new FileReader(csvFile));
         
          while ((line = br.readLine()) != null) {

             try{
          	// use comma as separator
              line = line.replace(",,",", , ");
          	 //  System.out.println(line);
          	String[] deviceDetails = line.split(cvsSplitBy);
              key = deviceDetails[0];
              deviceMap1.put(key,deviceDetails[1]+","+deviceDetails[4]+","+deviceDetails[8]);
            //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
             }
             catch(Exception e)
             {
          	   e.printStackTrace(); 
               continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      devicecodeMap = Collections.unmodifiableMap(deviceMap1);  
   //   System.out.println(deviceMap);
  }
  
  
  
  public static Map<String,String> audienceSegmentMap;
  public static Map<String,String> audienceSegmentMap1;
  public static Map<String,String> audienceSegmentMap2;
  
  static {
      Map<String, String> audienceMap = new HashMap<String,String>();
      String csvFile = "/media/raptor/Data/publisherinsights/subcategorymap1.csv";
      BufferedReader br = null;
      String line = "";
      String cvsSplitBy = ",";
      String key = "";
      Map<String, String> audienceMap1  = new HashMap<String,String>();
      Map<String, String> audienceMap2  = new HashMap<String,String>();
      
      try {

          br = new BufferedReader(new FileReader(csvFile));
         
          while ((line = br.readLine()) != null) {

             try{
          	// use comma as separator
              line = line.replace(",,",", , ");
          	 //  System.out.println(line);
          	String[] segmentDetails = line.split(cvsSplitBy);
              key = segmentDetails[0];
              audienceMap1.put(key,segmentDetails[1]);
              audienceMap.put(segmentDetails[4],key);
              //  hotspotMap1.put(key,hotspotDetails[0]+"@"+hotspotDetails[1]+"@"+hotspotDetails[3]);
              audienceMap2.put(key, segmentDetails[4]);
             }
             catch(Exception e)
             {
          	   e.printStackTrace(); 
               continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      audienceSegmentMap = Collections.unmodifiableMap(audienceMap1);  
      audienceSegmentMap1 = Collections.unmodifiableMap(audienceMap);
      audienceSegmentMap2 = Collections.unmodifiableMap(audienceMap2);
//   System.out.println(deviceMap);
  }
  
public static Map<String,String> AuthorMap;
public static Map<String,String> AuthorMap1;
  
  static {
      Map<String, String> authorMap = new HashMap<String,String>();
      String csvFile5 = "/media/raptor/Data/publisherinsights/authorMap.csv";
      BufferedReader br5 = null;
      String line5 = "";
      String cvsSplitBy5 = ",";
      String key2 = "";
      Map<String, String> authorMap1  = new HashMap<String,String>();
      Map<String, String> authorMap2  = new HashMap<String,String>();
      
      try {

          br5 = new BufferedReader(new FileReader(csvFile5));
         
          while ((line5 = br5.readLine()) != null) {

             try{
          	// use comma as separator
              line5 = line5.replace(",,",", , ");
          	 //  System.out.println(line);
          	String[] authorDetails = line5.split(cvsSplitBy5);
              key2 = authorDetails[0];
              authorMap1.put(key2,authorDetails[1]);
              authorMap2.put(authorDetails[1],key2);
             }
             catch(Exception e)
             {
          	   e.printStackTrace(); 
               continue;
             }

          }


        
      
      }

      
      
      
catch(Exception e){
	
	e.printStackTrace();
} 

      
      AuthorMap = Collections.unmodifiableMap(authorMap1);  
      AuthorMap1 = Collections.unmodifiableMap(authorMap2);
//   System.out.println(deviceMap);
  }
   
  public static Map<String,String> UrlMap;
  public static Map<String,String> UrlMap1;
    
    static {
        Map<String, String> authorMap = new HashMap<String,String>();
        String csvFile5 = "/media/raptor/Data/publisherinsights/urlMap.csv";
        BufferedReader br5 = null;
        String line5 = "";
        String cvsSplitBy5 = ",";
        String key2 = "";
        Map<String, String> urlMap1  = new HashMap<String,String>();
        Map<String, String> urlMap2  = new HashMap<String,String>();
        
        try {

            br5 = new BufferedReader(new FileReader(csvFile5));
           
            while ((line5 = br5.readLine()) != null) {

               try{
            	// use comma as separator
                line5 = line5.replace(",,",", , ");
            	 //  System.out.println(line);
            	String[] urlDetails = line5.split(cvsSplitBy5);
                key2 = urlDetails[0];
                urlMap1.put(key2,urlDetails[1]);
                urlMap2.put(urlDetails[1],key2);
               }
               catch(Exception e)
               {
            	   e.printStackTrace(); 
                 continue;
               }

            }


          
        
        }

        
        
        
  catch(Exception e){
  	
  	e.printStackTrace();
  } 

        
        UrlMap = Collections.unmodifiableMap(urlMap1);  
        UrlMap1 = Collections.unmodifiableMap(urlMap2);
  //   System.out.println(deviceMap);
    }
      
  
  
  public static Map<String,String> CountryMap;
  public static Map<String,String> CountryMap1;
    
    static {
        Map<String, String> countryMap = new HashMap<String,String>();
        String csvFile5 = "/media/raptor/Data/publisherinsights/countryMap2.csv";
        BufferedReader br5 = null;
        String line5 = "";
        String cvsSplitBy5 = ",";
        String key2 = "";
        Map<String, String> countryMapv1  = new HashMap<String,String>();
        Map<String, String> countryMapv2  = new HashMap<String,String>();
        
        try {

            br5 = new BufferedReader(new FileReader(csvFile5));
           
            while ((line5 = br5.readLine()) != null) {

               try{
            	// use comma as separator
                line5 = line5.replace(",,",", , ");
            	 //  System.out.println(line);
            	String[] countryDetails = line5.split(cvsSplitBy5);
                key2 = countryDetails[0];
                countryMapv1.put(key2,countryDetails[1]);
                countryMapv2.put(countryDetails[1],key2);
               }
               catch(Exception e)
               {
            	   e.printStackTrace(); 
                 continue;
               }

            }


          
        
        }

        
        
        
  catch(Exception e){
  	
  	e.printStackTrace();
  } 

        
        CountryMap = Collections.unmodifiableMap(countryMapv1);  
        CountryMap1 = Collections.unmodifiableMap(countryMapv2);
  //   System.out.println(deviceMap);
    }
     
  
  

    public static Map<String,String> StateMap;
    public static Map<String,String> StateMap1;
      
      static {
          Map<String, String> stateMap = new HashMap<String,String>();
          String csvFile5 = "/media/raptor/Data/publisherinsights/statesMap5.csv";
          BufferedReader br5 = null;
          String line5 = "";
          String cvsSplitBy5 = ",";
          String key2 = "";
          Map<String, String> stateMap1  = new HashMap<String,String>();
          Map<String, String> stateMap2  = new HashMap<String,String>();
          
          try {

              br5 = new BufferedReader(new FileReader(csvFile5));
             
              while ((line5 = br5.readLine()) != null) {

                 try{
              	// use comma as separator
                  line5 = line5.replace(",,",", , ");
              	 //  System.out.println(line);
                  String[] stateDetails = line5.split(cvsSplitBy5);
                  key2 = stateDetails[1]+","+stateDetails[2];
                    // stateMap1.put(key2,stateDetails[1]);
                     stateMap2.put(stateDetails[0],key2);
                 }
                 catch(Exception e)
                 {
              	   e.printStackTrace(); 
                   continue;
                 }

              }


            
          
          }

          
          
          
    catch(Exception e){
    	
    	e.printStackTrace();
    } 

          
            //  StateMap = Collections.unmodifiableMap(stateMap1);  
          StateMap1 = Collections.unmodifiableMap(stateMap2);
    //   System.out.println(deviceMap);
      }
       
    
  
  
  
  
  
  
  
  
  
  public static Map<String,String> AgeMap;
  public static Map<String,String> AgeMap1;
    
    static {
        Map<String, String> ageMap = new HashMap<String,String>();
        String csvFile5 = "/media/raptor/Data/publisherinsights/ageMap.csv";
        BufferedReader br5 = null;
        String line5 = "";
        String cvsSplitBy5 = ",";
        String key2 = "";
        Map<String, String> ageMap1  = new HashMap<String,String>();
        Map<String, String> ageMap2  = new HashMap<String,String>();
        
        try {

            br5 = new BufferedReader(new FileReader(csvFile5));
           
            while ((line5 = br5.readLine()) != null) {

               try{
            	// use comma as separator
                line5 = line5.replace(",,",", , ");
            	 //  System.out.println(line);
            	String[] ageDetails = line5.split(cvsSplitBy5);
                key2 = ageDetails[0];
                ageMap1.put(key2,ageDetails[1]);
                ageMap2.put(ageDetails[1],key2);
               }
               catch(Exception e)
               {
            	   e.printStackTrace(); 
                 continue;
               }

            }


          
        
        }

        
        
        
  catch(Exception e){
  	
  	e.printStackTrace();
  } 

        
        AgeMap = Collections.unmodifiableMap(ageMap1);  
        AgeMap1 = Collections.unmodifiableMap(ageMap2);
  //   System.out.println(deviceMap);
    }
     
  
    public static Map<String,String> GenderMap;
    public static Map<String,String> GenderMap1;
      
      static {
          Map<String, String> genderMap = new HashMap<String,String>();
          String csvFile5 = "/media/raptor/Data/publisherinsights/genderMap.csv";
          BufferedReader br5 = null;
          String line5 = "";
          String cvsSplitBy5 = ",";
          String key2 = "";
          Map<String, String> genderMap1  = new HashMap<String,String>();
          Map<String, String> genderMap2  = new HashMap<String,String>();
          
          try {

              br5 = new BufferedReader(new FileReader(csvFile5));
             
              while ((line5 = br5.readLine()) != null) {

                 try{
              	// use comma as separator
                  line5 = line5.replace(",,",", , ");
              	 //  System.out.println(line);
              	String[] genderDetails = line5.split(cvsSplitBy5);
                  key2 = genderDetails[0];
                  genderMap1.put(key2,genderDetails[1]);
                  genderMap2.put(genderDetails[1],key2);
                 }
                 catch(Exception e)
                 {
              	   e.printStackTrace(); 
                   continue;
                 }

              }


            
          
          }

          
          
          
    catch(Exception e){
    	
    	e.printStackTrace();
    } 

          
          GenderMap = Collections.unmodifiableMap(genderMap1);  
          GenderMap1 = Collections.unmodifiableMap(genderMap2);
    //   System.out.println(deviceMap);
      }
       
      public static Map<String,String> IncomeMap;
      public static Map<String,String> IncomeMap1;
        
        static {
            Map<String, String> incomeMap = new HashMap<String,String>();
            String csvFile5 = "/media/raptor/Data/publisherinsights/incomeMap.csv";
            BufferedReader br5 = null;
            String line5 = "";
            String cvsSplitBy5 = ",";
            String key2 = "";
            Map<String, String> incomeMap1  = new HashMap<String,String>();
            Map<String, String> incomeMap2  = new HashMap<String,String>();
            
            try {

                br5 = new BufferedReader(new FileReader(csvFile5));
               
                while ((line5 = br5.readLine()) != null) {

                   try{
                	// use comma as separator
                    line5 = line5.replace(",,",", , ");
                	 //  System.out.println(line);
                	String[] incomeDetails = line5.split(cvsSplitBy5);
                    key2 = incomeDetails[0];
                    incomeMap1.put(key2,incomeDetails[1]);
                    incomeMap2.put(incomeDetails[1],key2);
                   }
                   catch(Exception e)
                   {
                	   e.printStackTrace(); 
                     continue;
                   }

                }


              
            
            }

            
            
            
      catch(Exception e){
      	
      	e.printStackTrace();
      } 

            
            IncomeMap = Collections.unmodifiableMap(incomeMap1);  
            IncomeMap1 = Collections.unmodifiableMap(incomeMap2);
      //   System.out.println(deviceMap);
        }
         
  
  public static Map<String,String> tagMap;
  public static Map<String,String> tagMap1;
    
    static {
        Map<String, String> TagMap = new HashMap<String,String>();
        String csvFile5 = "/media/raptor/Data/publisherinsights/TagMap.csv";
        BufferedReader br5 = null;
        String line5 = "";
        String cvsSplitBy5 = ",";
        String key2 = "";
        Map<String, String> TagMap1  = new HashMap<String,String>();
        Map<String, String> TagMap2  = new HashMap<String,String>();
        
        try {

            br5 = new BufferedReader(new FileReader(csvFile5));
           
            while ((line5 = br5.readLine()) != null) {

               try{
            	// use comma as separator
                line5 = line5.replace(",,",", , ");
            	 //  System.out.println(line);
            	String[] TagDetails = line5.split(cvsSplitBy5);
                key2 = TagDetails[0];
                TagMap1.put(key2,TagDetails[1]);
                TagMap2.put(TagDetails[1],key2);
               }
               catch(Exception e)
               {
            	   e.printStackTrace(); 
                 continue;
               }

            }


          
        
        }

        
        
        
  catch(Exception e){
  	
  	e.printStackTrace();
  } 

        
        tagMap = Collections.unmodifiableMap(TagMap1);  
        tagMap1 = Collections.unmodifiableMap(TagMap2);
  //   System.out.println(deviceMap);
    }
  
  
    
    
    public static Map<String,String> tagMap2;
    public static Map<String,String> tagMap3;
      
      static {
          Map<String, String> TagMap = new HashMap<String,String>();
          String csvFile5 = "/media/raptor/Data/publisherinsights/TagMap1.csv";
          BufferedReader br5 = null;
          String line5 = "";
          String cvsSplitBy5 = ",";
          String key2 = "";
          Map<String, String> TagMap3  = new HashMap<String,String>();
          Map<String, String> TagMap5  = new HashMap<String,String>();
          
          try {

              br5 = new BufferedReader(new FileReader(csvFile5));
             
              while ((line5 = br5.readLine()) != null) {

                 try{
              	// use comma as separator
                  line5 = line5.replace(",,",", , ");
              	 //  System.out.println(line);
              	String[] TagDetails = line5.split(cvsSplitBy5);
                  key2 = TagDetails[0];
                  TagMap3.put(key2,TagDetails[1]);
                  TagMap5.put(TagDetails[1],key2);
                 }
                 catch(Exception e)
                 {
              	   e.printStackTrace(); 
                   continue;
                 }

              }


            
          
          }

          
          
          
    catch(Exception e){
    	
    	e.printStackTrace();
    } 

          
          tagMap2 = Collections.unmodifiableMap(TagMap3);  
          tagMap3 = Collections.unmodifiableMap(TagMap5);
    //   System.out.println(deviceMap);
      }
     
    
      public static Map<String,String> referrerTypeMap;
      public static Map<String,String> referrerTypeMap1;
        
        static {
            Map<String, String> ReferrerTypeMap = new HashMap<String,String>();
            String csvFile5 = "/media/raptor/Data/publisherinsights/referrerTypeMap.csv";
            BufferedReader br5 = null;
            String line5 = "";
            String cvsSplitBy5 = ",";
            String key2 = "";
            Map<String, String> ReferrerTypeMap1  = new HashMap<String,String>();
            Map<String, String> ReferrerTypeMap2  = new HashMap<String,String>();
            
            try {

                br5 = new BufferedReader(new
                		FileReader(csvFile5));
               
                while ((line5 = br5.readLine()) != null) {

                   try{
                	// use comma as separator
                    line5 = line5.replace(",,",", , ");
                	 //  System.out.println(line);
                	String[] referrerTypeDetails = line5.split(cvsSplitBy5);
                    key2 = referrerTypeDetails[0];
                    ReferrerTypeMap1.put(key2,referrerTypeDetails[1]);
                    ReferrerTypeMap2.put(referrerTypeDetails[1],key2);
                   }
                   catch(Exception e)
                   {
                	   e.printStackTrace(); 
                     continue;
                   }

                }


              
            
            }

            
            
            
      catch(Exception e){
      	
      	e.printStackTrace();
      } 

            
            referrerTypeMap = Collections.unmodifiableMap(ReferrerTypeMap1);  
            referrerTypeMap1 = Collections.unmodifiableMap(ReferrerTypeMap2);
      //   System.out.println(deviceMap);
        }
         
        
        
        public static Map<String,String> sectionMap;
        public static Map<String,String> sectionMap1;
          
          static {
              Map<String, String> SectionMap = new HashMap<String,String>();
              String csvFile5 = "/media/raptor/Data/publisherinsights/sectionmap.csv";
              BufferedReader br5 = null;
              String line5 = "";
              String cvsSplitBy5 = ",";
              String key2 = "";
              Map<String, String> SectionMap1  = new HashMap<String,String>();
              Map<String, String> SectionMap2  = new HashMap<String,String>();
              
              try {

                  br5 = new BufferedReader(new
                  		FileReader(csvFile5));
                 
                  while ((line5 = br5.readLine()) != null) {

                     try{
                  	// use comma as separator
                      line5 = line5.replace(",,",", , ");
                  	 //  System.out.println(line);
                  	String[] sectionDetails = line5.split(cvsSplitBy5);
                      key2 = sectionDetails[0];
                      SectionMap1.put(key2,sectionDetails[1]);
                      SectionMap2.put(sectionDetails[1],key2);
                     }
                     catch(Exception e)
                     {
                  	   e.printStackTrace(); 
                       continue;
                     }

                  }


                
              
              }

              
              
              
        catch(Exception e){
        	
        	e.printStackTrace();
        } 

              
              sectionMap = Collections.unmodifiableMap(SectionMap1);  
              sectionMap1 = Collections.unmodifiableMap(SectionMap2);
        //   System.out.println(deviceMap);
          }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public static Map<String,String> deviceMap;
        public static Map<String,String> deviceMap1;
          
          static {
              Map<String, String> DeviceMap = new HashMap<String,String>();
              String csvFile5 = "/media/raptor/Data/publisherinsights/deviceMap.csv";
              BufferedReader br5 = null;
              String line5 = "";
              String cvsSplitBy5 = ",";
              String key2 = "";
              Map<String, String> DeviceMap1  = new HashMap<String,String>();
              Map<String, String> deviceMap2  = new HashMap<String,String>();
              
              try {

                  br5 = new BufferedReader(new FileReader(csvFile5));
                 
                  while ((line5 = br5.readLine()) != null) {

                     try{
                  	// use comma as separator
                      line5 = line5.replace(",,",", , ");
                  	 //  System.out.println(line);
                  	String[] deviceDetails = line5.split(cvsSplitBy5);
                      key2 = deviceDetails[0];
                      DeviceMap1.put(key2,deviceDetails[1]);
                      deviceMap2.put(deviceDetails[1],key2);
                     }
                     catch(Exception e)
                     {
                  	   e.printStackTrace(); 
                       continue;
                     }

                  }


                
              
              }

              
              
              
        catch(Exception e){
        	
        	e.printStackTrace();
        } 

              
              deviceMap = Collections.unmodifiableMap(DeviceMap1);  
              deviceMap1 = Collections.unmodifiableMap(deviceMap2);
        //   System.out.println(deviceMap);
          }
           
  
  
  public static String capitalizeString(String string) {
	  char[] chars = string.toLowerCase().toCharArray();
	  boolean found = false;
	  for (int i = 0; i < chars.length; i++) {
	    if (!found && Character.isLetter(chars[i])) {
	      chars[i] = Character.toUpperCase(chars[i]);
	      found = true;
	    } else if (Character.isWhitespace(chars[i]) || chars[i]=='.' || chars[i]=='\'') { // You can add other chars here
	      found = false;
	    }
	  }
	  return String.valueOf(chars);
	}
  
  
  
  
  
  public static String capitalizeFirstLetter(String original) {
	    if (original == null || original.length() == 0) {
	        return original;
	    }
	    return original.substring(0, 1).toUpperCase() + original.substring(1);
	}
  
  
  
  
  public static AggregationModule getInstance()
  {
    if (INSTANCE == null) {
      return new AggregationModule();
    }
    return INSTANCE;
  }
  
  public static void main(String[] args)
    throws Exception
  {
	  
	
	 //setUp();
     AggregationModule mod = new  AggregationModule();
  //   mod.setUp();
    // mod.countAudiencesegmentChannel("2017-01-01", "2017-01-31","Womanseraindia_indiagate");
     
     // mod.getGenderChannelLive("2017-01-19 00:00:01", "2017-06-20 23:59:59", "idp");
     
     //  mod.setUp();
  //   mod.countBrandNameChannel("2016-01-13","2017-01-31", "Patrika_multiple_June_16");
    // Map<String,String> filter1 = new HashMap<String,String>();
   //  filter1.put("cookie_id","bba865ee_b360_4a58_a95a_74e6ba44e7b4");
   //  mod.getUserdetailsChannel("2017-01-13","2017-01-31","Womanseraindia_indiagate",filter1);
   /* 
     mod.countbenchmarktotalvisitorsChannel("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.countbenchmarkfingerprintChannel("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.countbenchmarktotalvisitorsChannelDateHourlywise("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.countBenchmarktotalvisitorsChannelDatewise("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.countbenchmarkfingerprintChannelDateHourwise("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.countBenchmarkfingerprintChannelDatewise("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.benchmarkengagementTimeChannel("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.benchmarkengagementTimeChannelDateHourwise("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      mod.benchmarkengagementTimeChannelDatewise("2017-01-17","2017-01-18","Womanseraindia_indiagate");
      
     */ 
      
      
      
      
      /*
     mod.countOS("2017-01-01","2017-01-31"); */
 //   mod.counttotalvisitorsChannelSectionDateHourlywise("2017-01-19","2017-01-19","Womanseraindia_indiagate","http___womansera_com_entertainment");
  //   mod.counttotalvisitorsChannelSectionDateHourlyMinutewise("2017-01-16 13:00:01","2017-01-16 13:59:59","Womanseraindia_indiagate","http___womansera_com_entertainment");
  //   mod.countCityChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","shahid");
    /* 
     mod.countNewUsersChannelSectionDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.countReturningUsersChannelSectionDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.countLoyalUsersChannelSectionDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.countNewUsersChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_trending_moles_on_these_areas_signify_wealth_and_luck_read_to_know");
     mod.countReturningUsersChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_trending_moles_on_these_areas_signify_wealth_and_luck_read_to_know");
     mod.countLoyalUsersChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_trending_moles_on_these_areas_signify_wealth_and_luck_read_to_know");
     mod.getGenderChannelSection("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.gettimeofdayChannelSection("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     */
     
     /*
     mod.getChannelSectionArticleCount("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.getChannelSectionArticleList("2017-01-01","2017-01-31","Womanseraindia_indiagate","*");
     mod.getChannelArticleReferrerList("2017-01-01","2017-01-31","Womanseraindia_indiagate","amitabh");
     mod.getChannelArticleReferredPostsList("2017-01-01","2017-01-31","Womanseraindia_indiagate","adult");
     mod.countfingerprintChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","adult");
     mod.countfingerprintChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","adult");
     mod.counttotalvisitorsChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","adult");
     mod.counttotalvisitorsChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","adult");
     mod.countAudiencesegmentChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate", "http___womansera_com_trending_moles_on_these_areas_signify_wealth_and_luck_read_to_know");
  */   
     
  /*   
     mod.getChannelSectionArticleCount("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.getChannelSectionArticleList("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.getChannelSectionReferrerList("2017-01-01","2017-01-31","Womanseraindia_indiagate","entertainment");
     mod.getChannelSectionReferredPostsList("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.countfingerprintChannelSection("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.countfingerprintChannelSectionDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.counttotalvisitorsChannelSection("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
     mod.counttotalvisitorsChannelSectionDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http___womansera_com_entertainment");
 */
 
 //    mod.countAudiencesegmentChannelSection("2017-01-01","2017-01-31","Womanseraindia_indiagate", "http___womansera_com_trending_moles_on_these_areas_signify_wealth_and_luck_read_to_know");
     /*
    
     mod.countOSChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/trending/amitabh-bachchan-dead-pictures-going-viral");
     
     mod.countCityChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/trending/amitabh-bachchan-dead-pictures-going-viral");
     
     mod.countModelChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/trending/amitabh-bachchan-dead-pictures-going-viral");
    
 mod.countOSChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     
     mod.countCityChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     
     mod.countModelChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     
     mod.counttotalvisitorsChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     mod.counttotalvisitorsChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     
     mod.countfingerprintChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     mod.countfingerprintChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     
     mod.countLoyalUsersChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     mod.countReturningUsersChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     mod.countNewUsersChannelArticleDatewise("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
    
     mod.getAgegroupChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
     mod.getGenderChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
    */ 
//     mod.countAudiencesegmentChannelArticle("2017-01-01","2017-01-31","Womanseraindia_indiagate","http://womansera.com/wedding/video-shahid-miras-dance-sajh-dajh-ke-sangeet-ceremony");
    
 //    Map<String,String>filter = new HashMap<String,String>();
 //    filter.put("city","delhi,mumbai");
 //    filter.put("agegroup","35_44");
//     filter.put("incomelevel", "medium");
  //   filter.put("devicetype","tablet");
    // mod.getGenderChannelFilter("2017-01-01","2017-01-31","Womanseraindia_indiagate", filter);
    
     
  //   List<String> groupby = new ArrayList<String>();
 //    groupby.add("subcategory");
   
   //  groupby.add("incomelevel");
 //    mod.getQueryFieldChannelGroupBy("audience_segment","2017-01-01","2017-01-31","Womanseraindia_indiagate", groupby,"pageviews");
     /*	 
	 final long startTime1 = System.currentTimeMillis();
	 AggregationModule mod = new AggregationModule();
	 mod.countAudienceSegment("2016-08-20","2016-12-02");
	 mod.countAudienceSegment("2016-08-20","2016-12-02");  
	 mod.countAudienceSegment("2016-08-20","2016-12-02");
	 mod.countAudienceSegment("2016-08-20","2016-12-02");  
	 mod.countAudienceSegment("2016-08-20","2016-12-02");
	 mod.countAudienceSegment("2016-08-20","2016-12-02");  
	 mod.countAudienceSegment("2016-08-20","2016-12-02");
	 final long endTime1 = System.currentTimeMillis();
	 
	 
	 System.out.println("Total code execution time: " + (endTime1 - startTime1) );
		
	  */
	  //  countfingerprintChannel("2016-08-20","2016-12-02", "Mumbai_T1_airport");
	  
	//  countAudiencesegmentChannel("2016-08-20","2016-12-02", "Mumbai_T1_airport");
	
	  
	//  Integer countv1 = 500000;
	  
	  /*
	  
	  if(countv1 >= 500000)
	    {
	    double total_length = countv1 - 0;
	    double subrange_length = total_length/30;	
	    
	    double current_start = 0;
	    for (int i = 0; i < 20; ++i) {
	      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
	      current_start += subrange_length;
	    }
	   }
  */
	  
	  /*
	  
	    Double countv1 = Double.parseDouble("90000");
	    
	    Double n = 0.0;
	    if(countv1 >= 250000)
	       n=50.0;
	    
	    if(countv1 >= 100000 && countv1 <= 250000 )
	       n=20.0;
	    
	    if(countv1 < 100000)
           n=50.0;	    
	   
	    Double total_length = countv1 - 0;
	    Double subrange_length = total_length/n;	
	    String startdate= "Startdate";
	    String enddate= "endDate";
	    Double current_start = 0.0;
	    for (int i = 0; i < n; ++i) {
	      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
	      Double startlimit = current_start;
	      Double finallimit = current_start + subrange_length;
	      Double index = startlimit +1;
	      String query = "SELECT distinct(cookiehash) FROM enhanceduserdatabeta1 where date between " + "'" + startdate + "'" + " and " + "'" + enddate +"' limit "+index.intValue()+","+finallimit.intValue();  	
		  System.out.println(query);
	  //    Query.add(query);
	      current_start += subrange_length;
	    //  Query.add(query);
	     
	    }
	   */ 
	    
  
  }
  
  public void setUp()
    throws Exception
  {
    if (client == null)
    {
      client = new TransportClient();
      client.addTransportAddress(getTransportAddress());
      
      NodesInfoResponse nodeInfos = (NodesInfoResponse)client.admin().cluster().prepareNodesInfo(new String[0]).get();
      String clusterName = nodeInfos.getClusterName().value();
      //System.out.println(String.format("Found cluster... cluster name: %s", new Object[] { clusterName }));
      
      searchDao = new SearchDao(client);
    }
    //System.out.println("Finished the setup process...");
  }
  
  public static SearchDao getSearchDao()
  {
    return searchDao;
  }
  
  
  
  public List<String> getcountryNames()

	{

		List<String> CountryNames = new ArrayList<String>();
		for (Map.Entry<String, String> entry : countrymap.entrySet()) {
			CountryNames.add(entry.getKey() + "," + entry.getValue());
		}

		System.out.println(CountryNames);
		return CountryNames;

	}

	public List<String> getcountryStateNames(String countrycode)

	{

		List<String> stateNames = new ArrayList<String>();
		stateNames = countrystatemap.get(countrycode);
		System.out.println(stateNames);
		return stateNames;

	}

	public List<String> getcountryCityNames(String countrycode, String statecode) {

		List<String> cityNames = new ArrayList<String>();
		cityNames = countrystatecitymap.get(countrycode.toLowerCase() + ":" + statecode.toLowerCase());
		System.out.println(cityNames);

		return cityNames;

	}


  
	public static int getDifferenceDays(Date d1, Date d2) {
		int daysdiff=0;
		long diff = d2.getTime() - d1.getTime();
		long diffDays = diff / (24 * 60 * 60 * 1000)+1;
		 daysdiff = (int) diffDays;
		return daysdiff;
		 }
  
	
	public static List<Long> getDaysBetweenDates(Date startdate, Date enddate)
	{
	    List<Long> dates = new ArrayList<Long>();
	    Calendar calendar = new GregorianCalendar();
	    calendar.setTime(startdate);

	    while (calendar.getTime().before(enddate))
	    {
	        Date result = calendar.getTime();
	        Long date  = result.getTime() / 1000;
	        dates.add(date);
	        calendar.add(Calendar.DATE, 1);
	    }
	    return dates;
	}
  
  
  public List<PublisherReport> countBrandName(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,brandName FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by brandName", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if (lines.size() > 0) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if(data[0].trim().toLowerCase().contains("logitech")==false && data[0].trim().toLowerCase().contains("mozilla")==false && data[0].trim().toLowerCase().contains("web_browser")==false && data[0].trim().toLowerCase().contains("microsoft")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false){ 
        obj.setBrandname(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
       }
      }
    }
    //System.out.println(headers);
    //System.out.println(lines);
    
    return pubreport;
  }
  
  public List<PublisherReport> countBrowser(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,browser_name FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by browser_name", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
       
        obj.setBrowser(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
    }
    //System.out.println(headers);
    //System.out.println(lines);
    
    return pubreport;
  }
  
  public List<PublisherReport> countOS(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,system_os FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by system_os", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    System.out.println(headers);
    System.out.println(lines);
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setOs(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
    }
    return pubreport;
  }
  
  public List<PublisherReport> countModel(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,modelName FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by modelName", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if(data[0].trim().toLowerCase().contains("logitech_revue")==false && data[0].trim().toLowerCase().contains("mozilla_firefox")==false && data[0].trim().toLowerCase().contains("apple_safari")==false && data[0].trim().toLowerCase().contains("generic_web")==false && data[0].trim().toLowerCase().contains("google_compute")==false && data[0].trim().toLowerCase().contains("microsoft_xbox")==false && data[0].trim().toLowerCase().contains("google_chromecast")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false && data[0].trim().toLowerCase().contains("laptop")==false){    
        obj.setMobile_device_model_name(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
        }
        
        }
    }
    return pubreport;
  }
  
  public List<PublisherReport> countCity(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,city FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by city", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
    }
    return pubreport;
  }
  
  public List<PublisherReport> countPinCode(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,postalcode FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by postalcode", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    //System.out.println(headers);
    //System.out.println(lines);
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setPostalcode(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
    }
    return pubreport;
  }
  
  public List<PublisherReport> countLatLong(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,latitude_longitude FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by latitude_longitude", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    //System.out.println(headers);
    //System.out.println(lines);
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        String[] dashcount = data[0].split("_");
        if ((dashcount.length == 3) && (data[0].charAt(data[0].length() - 1) != '_') && 
          (!dashcount[2].isEmpty()))
        {
          obj.setLatitude_longitude(data[0]);
          obj.setCount(data[1]);
          pubreport.add(obj);
        }
      }
    }
    return pubreport;
  }
  
  
  public List<PublisherReport> getReportUserCookie(String startdate,
			String enddate, String channel_name, String queryfilterbuilder)
			throws CsvExtractorException, Exception {

		
		System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output1.txt"))));
		
		String query00 = "Select count(*),refcurrentoriginal,referrerType from enhanceduserdatabeta1 where clickurloriginal not like '%http%' and "
				+ queryfilterbuilder
				+ " and channel_name = '"
				+ channel_name
				+ "' and date between "
				+ "'"
				+ startdate
				+ "'"
				+ " and "
				+ "'"
				+ enddate
				+ "'"
				+ " GROUP BY refcurrentoriginal,referrerType,date_histogram(field='request_time','interval'='1s')";

		String query01 = "Select count(*),clickurloriginal,referrerType from enhanceduserdatabeta1 where clickurloriginal like '%http%' and "
				+ queryfilterbuilder
				+ " and channel_name = '"
				+ channel_name
				+ "' and date between "
				+ "'"
				+ startdate
				+ "'"
				+ " and "
				+ "'"
				+ enddate
				+ "'"
				+ " GROUP BY clickurloriginal,referrerType,date_histogram(field='request_time','interval'='1s')";

		CSVResult csvResult00 = getCsvResult(false, query00);
		List<String> headers00 = csvResult00.getHeaders();
		List<String> lines00 = csvResult00.getLines();
		List<PublisherReport> pubreport00 = new ArrayList();
	    System.out.println(lines00);
		CSVResult csvResult01 = getCsvResult(false, query01);
		List<String> headers01 = csvResult01.getHeaders();
		List<String> lines01 = csvResult01.getLines();
		List<PublisherReport> pubreport01 = new ArrayList();
		System.out.println(lines01);
		List<PublisherReport> userreports1 = new ArrayList<PublisherReport>();

		List<PublisherReport> userreports2 = new ArrayList<PublisherReport>();

		if ((lines00 != null) && (!lines00.isEmpty())
				&& (!((String) lines00.get(0)).isEmpty())) {
			for (int i = 0; i < lines00.size(); i++) {

				String[] data = ((String) lines00.get(i)).split(",");
				PublisherReport report = new PublisherReport();
				if (data.length > 3) {
					report.setReferrerType(data[1]);
					System.out.println(data[1]);
					report.setActivityType("Pageview");
					report.setActivityImage("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSzbSAzd4FhfPTbzMBmYOsA0LG0pSr6Oo1IILBTqjFw44xxDyKqiQ");
					report.setCount(data[3]);
					report.setDate(data[2]);
					report.setUrl(data[0]);
					String articleparts[] = data[0].split("/");
					String articleTitle = articleparts[articleparts.length - 1];
					articleTitle = articleTitle.replace("-", " ");
					articleTitle = capitalizeString(articleTitle);
					report.setArticleTitle(articleTitle);
					
					Article article = GetMiddlewareData
							.getArticleMetaData(data[0]);
					String articleImage = article.getMainimage();
					report.setArticleImage(articleImage);
					String id = article.getId();
					report.setArticleId(id);
				//	String authorName = article.getAuthor();
				//	report.setArticleAuthor(authorName);
				//	String authorId = article.getAuthorId();
				//	report.setAuthorId(authorId);
				//	List<String> tags1 = article.getTags();
				//	report.setArticleTag(tags1);
					if (article.getArticletitle() != null
							&& !article.getArticletitle().isEmpty()) {
						articleTitle = article.getArticletitle();
						report.setArticleTitle(data[0]);
					}
				
				
				} else {

					if(data.length > 2 ){
					report.setActivityType("Pageview");
					report.setActivityImage("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSzbSAzd4FhfPTbzMBmYOsA0LG0pSr6Oo1IILBTqjFw44xxDyKqiQ");
					report.setCount(data[2]);
					report.setDate(data[1]);
					report.setUrl(data[0]);
					String articleparts[] = data[0].split("/");
					String articleTitle = articleparts[articleparts.length - 1];
					articleTitle = articleTitle.replace("-", " ");
					articleTitle = capitalizeString(articleTitle);
					report.setArticleTitle(articleTitle);
					
					Article article = GetMiddlewareData
							.getArticleMetaData(data[0]);
					String articleImage = article.getMainimage();
					report.setArticleImage(articleImage);
					String id = article.getId();
					report.setArticleId(id);
					//String authorName = article.getAuthor();
				//	report.setArticleAuthor(authorName);
				//	String authorId = article.getAuthorId();
					//report.setAuthorId(authorId);
				//	List<String> tags1 = article.getTags();
				//	report.setArticleTag(tags1);
					if (article.getArticletitle() != null
							&& !article.getArticletitle().isEmpty()) {
						articleTitle = article.getArticletitle();
						report.setArticleTitle(data[0]);
					}
				}
				}
				userreports1.add(report);
			}

		}

		if ((lines01 != null) && (!lines01.isEmpty())
				&& (!((String) lines01.get(0)).isEmpty())) {
			for (int i = 0; i < lines01.size(); i++) {

				String[] data = ((String) lines01.get(i)).split(",");
				PublisherReport report = new PublisherReport();
				if (data.length > 3) {
					report.setActivityType("Click Event");
					report.setActivityImage("https://cdn1.iconfinder.com/data/icons/hawcons/32/699458-icon-27-one-finger-click-512.png");
					report.setCount(data[3]);
					report.setDate(data[2]);
					report.setUrl(data[0]);
					String articleparts[] = data[0].split("/");
					String articleTitle = articleparts[articleparts.length - 1];
					articleTitle = articleTitle.replace("-", " ");
					articleTitle = capitalizeString(articleTitle);
					report.setArticleTitle(data[0]);
					
					Article article = GetMiddlewareData
							.getArticleMetaData(data[0]);
					String articleImage = article.getMainimage();
					report.setArticleImage(articleImage);
					String id = article.getId();
					report.setArticleId(id);
					//String authorName = article.getAuthor();
					//report.setArticleAuthor(authorName);
				//	String authorId = article.getAuthorId();
			//		report.setAuthorId(authorId);
			//		List<String> tags1 = article.getTags();
			//		report.setArticleTag(tags1);
					if (article.getArticletitle() != null
							&& !article.getArticletitle().isEmpty()) {
						articleTitle = article.getArticletitle();
						report.setArticleTitle(data[0]);
					}
					
					
					System.out.println(data[1]);
					report.setReferrerType(data[1]);
				}

				else {

					if(data.length > 2 ){
					report.setActivityType("Click Event");
					report.setActivityImage("https://cdn1.iconfinder.com/data/icons/hawcons/32/699458-icon-27-one-finger-click-512.png");
					report.setCount(data[2]);
					report.setDate(data[1]);
					report.setUrl(data[0]);
					String articleparts[] = data[0].split("/");
					String articleTitle = articleparts[articleparts.length - 1];
					articleTitle = articleTitle.replace("-", " ");
					articleTitle = capitalizeString(articleTitle);
					report.setArticleTitle(articleTitle);
					
					Article article = GetMiddlewareData
							.getArticleMetaData(data[0]);
					String articleImage = article.getMainimage();
					report.setArticleImage(articleImage);
					String id = article.getId();
					report.setArticleId(id);
				//	String authorName = article.getAuthor();
				//	report.setArticleAuthor(authorName);
				//	String authorId = article.getAuthorId();
				//	report.setAuthorId(authorId);
			//		List<String> tags1 = article.getTags();
				//	report.setArticleTag(tags1);
					if (article.getArticletitle() != null
							&& !article.getArticletitle().isEmpty()) {
						articleTitle = article.getArticletitle();
						report.setArticleTitle(data[0]);
					}
					}
					
					}
				userreports2.add(report);
			}

		}

		if(!userreports2.isEmpty())
		userreports1.addAll(userreports2);

		for(int i=0;i<userreports1.size();i++){
		    
		     if(userreports1.get(i).getDate()==null){
		    	 
		    	 userreports1.remove(i);
		     }
		     else{
		    	 
		    	 System.out.println(userreports1.get(i).getDate()+userreports1.get(i).getUrl());
		     }
		
		} 
		
		Collections.sort(userreports1, new Comparator<PublisherReport>() {

			@Override
			public int compare(PublisherReport o1, PublisherReport o2) {
				if (o1.getDate() == null) {
			        return (o2.getDate() == null) ? 0 : -1;
			    }
			    if (o2.getDate() == null) {
			        return 1;
			    }
				
				return o1.getDate().compareTo(o2.getDate());
			}

		});

		String query10 = "Select count(*) from enhanceduserdatabeta1 where "
				+ queryfilterbuilder
				+ " and channel_name = '"
				+ channel_name
				+ "' and date between "
				+ "'"
				+ startdate
				+ "'"
				+ " and "
				+ "'"
				+ enddate
				+ "'"
				+ " GROUP BY date_histogram(field='request_time','interval'='1h')";

		CSVResult csvResult10 = getCsvResult(false, query10);
		List<String> headers10 = csvResult10.getHeaders();
		List<String> lines10 = csvResult10.getLines();
		List<PublisherReport> pubreport10 = new ArrayList();

		Map<String, List<PublisherReport>> sessionMap = new HashMap<String, List<PublisherReport>>();
		if ((lines10 != null) && (!lines10.isEmpty())
				&& (!((String) lines10.get(0)).isEmpty())) {
			for (int i = 0; i < lines10.size(); i++) {

				String[] data = ((String) lines10.get(i)).split(",");

				for (int j = 0; j < userreports1.size(); j++) {

					String[] hourprefix = data[0].split(":");
					
					if(userreports1.get(j).getDate()!=null){
					if (userreports1.get(j).getDate().contains(hourprefix[0])) {
						if (sessionMap.containsKey(data[0]) == false) {
							List<PublisherReport> ureport1 = new ArrayList<PublisherReport>();
							ureport1.add(userreports1.get(j));
							sessionMap.put(data[0], ureport1);

						} else {

							List<PublisherReport> ureport = sessionMap
									.get(data[0]);
							ureport.add(userreports1.get(j));
							sessionMap.put(data[0], ureport);

						}

					  }
					}
				}

			}

		}

		List<PublisherReport> userreports = new ArrayList<PublisherReport>();

		for (Map.Entry<String, List<PublisherReport>> entry : sessionMap
				.entrySet()) {
			String key = entry.getKey();
			List<PublisherReport> value = entry.getValue();
			String date = value.get(0).getDate();
			String date2 = value.get(value.size() - 1).getDate();

			DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String duration = getTimeDiff(df.parse(date2), df.parse(date));
			Integer pageviewsCount = 0;
			Integer clickCount = 0;
			for (int k = 0; k < value.size(); k++) {
				if (value.get(k).getActivityType().equals("Pageview")) {
					Integer count1 = (int) Double.parseDouble(value.get(k)
							.getCount());

					pageviewsCount = pageviewsCount + count1;

				}
				if (value.get(k).getActivityType().equals("Click Event")) {

					Integer count2 = (int) Double.parseDouble(value.get(k)
							.getCount());

					clickCount = clickCount + count2;
				}
			}

			String Activity = "";

			if (pageviewsCount != 0)
				Activity = Activity + pageviewsCount.toString() + " PageViews ";

			if (clickCount != 0)
				Activity = Activity + clickCount.toString() + " Clicks";

			PublisherReport object1 = new PublisherReport();
			object1.setDuration(duration);
			object1.setActivityStats(Activity);
			// object1.setDate(date.split("\\s+")[0]);
			object1.setDate(date);
			String datev1 = "";
			for (int i = 0; i < value.size(); i++) {

				String datev2 = value.get(i).getDate();
				if (i == 0) {
					datev1 = datev2;
				}

				if (datev1.compareTo(datev2) > 0)
					datev1 = datev2;

			}
			for (int i = 0; i < value.size(); i++) {

				String referrerType = value.get(i).getReferrerType();
				if (referrerType != null && !referrerType.isEmpty()) {

					if(object1.getReferrerType()==null || object1.getReferrerType().isEmpty())
					object1.setReferrerType(referrerType);
					value.get(i).setReferrerType("");
				    
				}
			}

			int p = datev1.lastIndexOf(":");
			String e = datev1.substring(0, p);
			object1.setDate(e);
			object1.setUserReport(value);

			userreports.add(object1);

		}

		Collections.sort(userreports, new Comparator<PublisherReport>() {

			@Override
			public int compare(PublisherReport o1, PublisherReport o2) {
				return o1.getDate().compareTo(o2.getDate());
			}
		});

		for (int i = 0; i < userreports.size(); i++) {

			Collections.sort(userreports.get(i).getUserReport(),
					new Comparator<PublisherReport>() {

			
				
				
				        @Override
						public int compare(PublisherReport o1,
								PublisherReport o2) {
						
				        	if (o1.getDate() == null) {
						        return (o2.getDate() == null) ? 0 : -1;
						    }
						    if (o2.getDate() == null) {
						        return 1;
						    }
				        	
				        	
				        	return o1.getDate().compareTo(o2.getDate());
						}
					});

			// userreports.get(i).setDate(userreports.get(i).getDate().split("\\s+")[0]);

		}

		Map<String, List<PublisherReport>> sessionreports = new HashMap<String, List<PublisherReport>>();

		for (int i = 0; i < userreports.size(); i++) {

			String date = userreports.get(i).getDate();

			if(date!=null){
			date = date.split("\\s+")[0];

			if (sessionreports.containsKey(date)) {
				List<PublisherReport> pubreportv5 = sessionreports.get(date);
				pubreportv5.add(userreports.get(i));
				sessionreports.put(date, pubreportv5);

			} else {

				List<PublisherReport> pubreportv3 = new ArrayList<PublisherReport>();

				pubreportv3.add(userreports.get(i));

				sessionreports.put(date, pubreportv3);
			 }
			}
		}

		List<PublisherReport> userreportsv1 = new ArrayList<PublisherReport>();

		for (Map.Entry<String, List<PublisherReport>> entry : sessionreports
				.entrySet()) {

			PublisherReport object = new PublisherReport();
			object.setDate(entry.getKey());
			object.setUserReport(entry.getValue());
			object.setSessionCount(new Integer(entry.getValue().size())
					.toString() + " Sessions");

			userreportsv1.add(object);

		}

		Collections.sort(userreportsv1, new Comparator<PublisherReport>() {

			@Override
			public int compare(PublisherReport o1, PublisherReport o2) {
			
				if (o1.getDate() == null) {
			        return (o2.getDate() == null) ? 0 : -1;
			    }
			    if (o2.getDate() == null) {
			        return 1;
			    }
				
				
				return o1.getDate().compareTo(o2.getDate());
			}
		});
		
		
		
		return userreportsv1;
	}
  
  
  
  public List<PublisherReport> countfingerprint(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where date between '" + 
      startdate + "'" + " and " + "'" + enddate + "'" + " group by date", new Object[] {"enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setDate(data[0]);
        obj.setReach(data[1]);
        pubreport.add(obj);
      }
    }
    return pubreport;
  }
  
  public List<PublisherReport> countAudienceSegment(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
	
	  PrintStream out = new PrintStream(new FileOutputStream(
				"audiencesegmentcount.txt"));
		System.setOut(out);
	  
	  List<PublisherReport> pubreport = new ArrayList(); 
	  
	  String querya1 = "Select Count(distinct(cookiehash)) FROM enhanceduserdata where date between " + "'" + startdate + "'" + " and " + "'" + enddate +"' limit 20000000";  
	  
	    //Divide count in different limits 
	
	  
	  List<String> Query = new ArrayList();
	  


	    System.out.println(querya1);
	    
	    final long startTime2 = System.currentTimeMillis();
		
	    
	    CSVResult csvResult1 = null;
		try {
			csvResult1 = AggregationModule.getCsvResult(false, querya1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    final long endTime2 = System.currentTimeMillis();
		
	    List<String> headers = csvResult1.getHeaders();
	    List<String> lines = csvResult1.getLines();
	    
	    
	    String count = lines.get(0);
	    Double countv1 = Double.parseDouble(count);
	    Double n = 0.0;
	    if(countv1 >= 250000)
	       n=10.0;
	    
	    if(countv1 >= 100000 && countv1 <= 250000 )
	       n=10.0;
	    
	    if(countv1 < 100000)
           n=10.0;	    
	   
	    
	    if(countv1 <= 100)
	    	n=1.0;
	    
	    if(countv1 == 0)
	    {
	    	
	    	return pubreport;
	    	
	    }
	    
	    Double total_length = countv1 - 0;
	    Double subrange_length = total_length/n;	
	    
	    Double current_start = 0.0;
	    for (int i = 0; i < n; ++i) {
	      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
	      Double startlimit = current_start;
	      Double finallimit = current_start + subrange_length;
	      Double index = startlimit +1;
	      if(countv1 == 1)
	    	  index=0.0;
	      String query = "SELECT distinct(cookiehash) FROM enhanceduserdata where date between " + "'" + startdate + "'" + " and " + "'" + enddate +"' Order by cookie_id limit "+index.intValue()+","+finallimit.intValue();  	
		  System.out.println(query);
	  //    Query.add(query);
	      current_start += subrange_length;
	      Query.add(query);
	     
	    }
	    
	    
	    	
	    
	  
	  ExecutorService executorService = Executors.newFixedThreadPool(2000);
        
       List<Callable<FastMap<String,Double>>> lst = new ArrayList<Callable<FastMap<String,Double>>>();
    
       for(int i=0 ; i < Query.size(); i++ ){
       lst.add(new AudienceSegmentQueryExecutionThreads(Query.get(i),client,searchDao));
    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
        
       // returns a list of Futures holding their status and results when all complete
       lst.add(new SubcategoryQueryExecutionThreads(Query.get(i),client,searchDao));
   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
       }
       
       
       List<Future<FastMap<String,Double>>> maps = executorService.invokeAll(lst);
        
       System.out.println(maps.size() +" Responses recieved.\n");
        
       for(Future<FastMap<String,Double>> task : maps)
       {
    	   try{
           if(task!=null)
    	   System.out.println(task.get().toString());
    	   }
    	   catch(Exception e)
    	   {
    		   e.printStackTrace();
    		   continue;
    	   }
    	    
    	   
    	   }
        
       /* shutdown your thread pool, else your application will keep running */
       executorService.shutdown();
	  
	
	  //  //System.out.println(headers1);
	 //   //System.out.println(lines1);
	    
	    
       
       FastMap<String,Double> audiencemap = new FastMap<String,Double>();
       
       FastMap<String,Double> subcatmap = new FastMap<String,Double>();
       
       Double count1 = 0.0;
       
       Double count2 = 0.0;
       
       String key ="";
       String key1 = "";
       Double value = 0.0;
       Double vlaue1 = 0.0;
       
	    for (int i = 0; i < maps.size(); i++)
	    {
	    
	    	if(maps!=null && maps.get(i)!=null){
	        FastMap<String,Double> map = (FastMap<String, Double>) maps.get(i).get();
	    	
	       if(map.size() > 0){
	       
	       if(map.containsKey("audience_segment")==true){
	       for (Map.Entry<String, Double> entry : map.entrySet())
	    	 {
	    	  key = entry.getKey();
	    	  key = key.trim();
	    	  value=  entry.getValue();
	    	if(key.equals("audience_segment")==false) { 
	    	if(audiencemap.containsKey(key)==false)
	    	audiencemap.put(key,value);
	    	else
	    	{
	         count1 = audiencemap.get(key);
	         if(count1!=null)
	         audiencemap.put(key,count1+value);	
	    	}
	      }
	    }
	  }   

	       if(map.containsKey("subcategory")==true){
	       for (Map.Entry<String, Double> entry : map.entrySet())
	    	 {
	    	   key = entry.getKey();
	    	   key = key.trim();
	    	   value=  entry.getValue();
	    	if(key.equals("subcategory")==false) {    
	    	if(subcatmap.containsKey(key)==false)
	    	subcatmap.put(key,value);
	    	else
	    	{
	         count1 = subcatmap.get(key);
	         if(count1!=null)
	         subcatmap.put(key,count1+value);	
	    	}
	    }  
	    	
	   }
	      
	     	       }
	           
	       } 
	    
	    	} 	
	   }    
	    
	    String subcategory = null;
	   
	    if(audiencemap.size()>0){
	   
	    	for (Map.Entry<String, Double> entry : audiencemap.entrySet()) {
	    	//System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
	    

	        PublisherReport obj = new PublisherReport();
	        
	   //     String[] data = ((String)lines.get(i)).split(",");
	        
	     //   if(data[0].trim().toLowerCase().contains("festivals"))
	      //  obj.setAudience_segment("");
	      //  else
	        obj.setAudience_segment( entry.getKey());	
	        obj.setCount(String.valueOf(entry.getValue()));
	      
	        if ((!entry.getKey().equals("tech")) && (!entry.getKey().equals("india")) && (!entry.getKey().trim().toLowerCase().equals("foodbeverage")) )
	        {
	         for (Map.Entry<String, Double> entry1 : subcatmap.entrySet()) {
	        	 
	        	    
	        	 
	        	 PublisherReport obj1 = new PublisherReport();
	            
	           
	            if (entry1.getKey().contains(entry.getKey()))
	            {
	              String substring = "_" + entry.getKey() + "_";
	              subcategory = entry1.getKey().replace(substring, "");
	           //   if(data[0].trim().toLowerCase().contains("festivals"))
	           //   obj1.setAudience_segment("");
	           //   else
	        
	              //System.out.println(" \n\n\n Key : " + subcategory + " Value : " + entry1.getValue());  
	              obj1.setAudience_segment(subcategory);
	              obj1.setCount(String.valueOf(entry1.getValue()));
	              obj.getAudience_segment_data().add(obj1);
	            }
	          }
	          pubreport.add(obj);
	        }
	      
	    }
	    }
	    return pubreport;
 
   
  }
  
  
  public List<PublisherReport> getCombinedDataChannel(String queryfield, String startdate, String enddate, String channel_name,String filter ) throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception{
		 
      List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();

     Double maxTotal = 0.0; 
  	 Double scaledshare = 0.0;
  	 Double share = 0.0;
      
    if(queryfield.equals("articlecombined"))
    {

		    pubreport1.clear();
		    ExecutorService executorService = Executors.newFixedThreadPool(2000);
	        
	        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
	    
	        List<String> Query = new ArrayList();
	     
	        queryfield = "refcurrentoriginal";
	       
			String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
			    
				
		    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
				
				
		    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+" LIMIT 60";  
	       
		    
		    Query.add(query1);
	        Query.add(query2);
		    Query.add(query3);
	       
	       for(int j=0 ; j < Query.size(); j++ ){
	       lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
	    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
	       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
	       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
	       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
	        
	       // returns a list of Futures holding their status and results when all complete
	    
	   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
	       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
	       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
	       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
	       }
	       
	       
	       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		

		    for (int k = 0; k < maps.size(); k++)
		    {
		    
		    	if(maps!=null && maps.get(k)!=null){
		        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        pubreport1.addAll(map);
		    	}
		
    }
	
		 
		    
		    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		    
		    List<PublisherReport> object = new ArrayList<PublisherReport>();
		    
		    
		    for(int k=0; k< pubreport1.size(); k++)
		    {
	         try{ 
		    	String page = pubreport1.get(k).getPublisher_pages();
		    	
		    	  String count =  pubreport1.get(k).getCount();
	        		
			        String engagementTime =  pubreport1.get(k).getEngagementTime();		
			        
			        String visitorCount = pubreport1.get(k).getVisitorCount();
		    	
		    	if(aggregatedmap.containsKey(page))
	        {
	       
	        PublisherReport obj = aggregatedmap.get(page);
	        obj.setPublisher_pages(page);
	        
	      
	        
	        if(count!=null)
	        obj.setCount(count);
	        	
	        if(engagementTime!=null) 	
	        	obj.setEngagementTime(engagementTime);
	        	
	       if(visitorCount!=null) 	
	        	obj.setVisitorCount(visitorCount);
	        
		   
	       if(page !=null) 	
	    	   obj.setPublisher_pages(page);
	  	
	       
	       
		    aggregatedmap.put(page, obj);
		    
	        }
	        else{
	        	       
	        	        PublisherReport obj = new PublisherReport();
	        	     
	        	        if(count !=null)
	        	        obj.setCount(count);
	        	        	
	        	        if(engagementTime !=null) 	
	        	        obj.setEngagementTime(engagementTime);
	        	        	
	        	       if(visitorCount !=null) 	
	        	        obj.setVisitorCount(visitorCount);
	        	
	        	       if(page!=null) {	
	        	    	obj.setPublisher_pages(page);
	        	    	String url = page;
	        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
	        	      
	        	    	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
	 		        	
	        	       
	        	       
	        	       }
	        	       aggregatedmap.put(page, obj);
	        
	        
	        }
	         }
	         catch(Exception e){
	        	 continue;
	         }
	      
		    }
		    
		    int l = 0;
		    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		    
		    //	l++;
		    	//if(l==30)
		    	//	break;
		    	try{
		    	String key = entry.getKey();
		        PublisherReport obj = entry.getValue();
		     
		        Double averageTime = 0.0;
		        
		        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        averageTime= NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getCount()),2);
		        
		        
		        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        averageTime= NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getVisitorCount()),2);
		        
		        
		        obj.setAverageTime(MinutestoSecond(averageTime.toString()));
		        
		        String url = obj.getPublisher_pages();
		        String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}if(article.getSectionid() != null && !article.getSectionid().isEmpty()){ String sectionId = article.getSectionid();obj.setSection(AggregationModule.sectionMap.get(sectionId));}
	        	
		        
		        
		        object.add(obj); 
		      }
		      catch(Exception e){
		    	  continue;
		      }
		    
		    }
		    
		    
		    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
 maxTotal = 0.0; 
 scaledshare = 0.0;
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }
		    
		    
		    return object;		
			
		    
		   
    }
	
	
    
    if(queryfield.equals("sectioncombined"))
    {
		  pubreport1.clear();
		 
		  ExecutorService executorService = Executors.newFixedThreadPool(2000);
	      
	      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
	  
	      List<String> Query = new ArrayList();
	   
	      queryfield = "section";
	     
			String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			    
				
		   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				
				
		    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
	     
		    
		    String query5= "Select "+queryfield+",COUNT(DISTINCT(refcurrentoriginal))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		    
		    
		    Query.add(query1);
		    Query.add(query2);
		    Query.add(query3);
	        Query.add(query5);
		    
	     for(int j=0 ; j < Query.size(); j++ ){
	     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
	  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
	     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
	     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
	     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
	      
	     // returns a list of Futures holding their status and results when all complete
	  
	 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
	     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
	     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
	     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
	     }
	     
	     
	     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		

		    for (int k = 0; k < maps.size(); k++)
		    {
		    
		    	if(maps!=null && maps.get(k)!=null){
		        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        pubreport1.addAll(map);
		    	}
		
	}

	        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		    
		    List<PublisherReport> object = new ArrayList<PublisherReport>();
		    
		    
		    for(int k=0; k< pubreport1.size(); k++)
		    {
	        if(aggregatedmap.containsKey(pubreport1.get(k).getSection()))
	        {
	       
	        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getSection());
	        obj.setSection(pubreport1.get(k).getSection());
	        
	        
	        
	        if(pubreport1.get(k).getCount()!=null)
	        obj.setCount(pubreport1.get(k).getCount());
	        	
	        if(pubreport1.get(k).getEngagementTime()!=null) 	
	        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
	        	
	       if(pubreport1.get(k).getVisitorCount()!=null) 	
	        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
	        
	       if(pubreport1.get(k).getPosts()!=null) 	
	       	obj.setPosts(pubreport1.get(k).getPosts());
	       
	       
	       
	       if(pubreport1.get(k).getSection()!=null) 	
	  	        obj.setSection(pubreport1.get(k).getSection());
	  	
	       
	       
		    aggregatedmap.put(pubreport1.get(k).getSection(), obj);
		    
	        }
	        else{
	        	       
	        	        PublisherReport obj = new PublisherReport();
	        	     
	        	        if(pubreport1.get(k).getCount()!=null)
	        	        obj.setCount(pubreport1.get(k).getCount());
	        	        	
	        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
	        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
	        	        	
	        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
	        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
	        	
	        	       if(pubreport1.get(k).getPosts()!=null) 	
	        	          	obj.setPosts(pubreport1.get(k).getPosts());
	        	       
	        	       
	        	       
	        	       if(pubreport1.get(k).getSection()!=null) 	
	           	        obj.setSection(pubreport1.get(k).getSection());
	           	
	        	       aggregatedmap.put(pubreport1.get(k).getSection(), obj);
	        
	        
	        }
	   
	      
		    }
		    
		    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        String key = entry.getKey();
		        PublisherReport value = entry.getValue();
		       // String authorId = AuthorMap1.get(value.getArticleAuthor());
	    		//value.setAuthorId(authorId);
		        
		        Double averageTime = 0.0;
		        
		        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        
		        
		        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        
		        
		        
		        Integer pageViewsperPost = 0;
		        
		        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
		        
		        
		        value.setPageViewsPost(pageViewsperPost.toString());
		        
		       
		        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        
		        if(value.getSection().equals("enterainment"))	
	        		 value.setSection("Entertainment");
	        	 
		        if(capitalizeFirstLetter(value.getSection())!=null)
		        value.setSection(capitalizeFirstLetter(value.getSection())); 
		        
		        if(AggregationModule.sectionMap1.get(capitalizeFirstLetter(value.getSection()))!=null)
		        value.setSectionid(AggregationModule.sectionMap1.get(capitalizeFirstLetter(value.getSection())));
		        
		        if(!value.getSection().isEmpty())
		        object.add(value); 
		    
		    
		        
		        
		        
		        
		    }
		    
		    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
			    
	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
	 		        }
	 		    });	
			    
			    }
			    
			    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
			    	

		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		 		        }
		 		    });	
			    	
			    	
			    }
			    
			    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
			    	
	                    Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		 		        }
		 		    });	
			    	
			    	
			    }
			    
			    
			    
			    
			    
			    executorService.shutdown();
			 
			    
			    
                Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

  for(int i=0;i<object.size();i++){
	  
	      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		  { 
	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
	 	    	    }
		  
		  
		  
		  }
	      
	      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
	    	 
	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
 	    	    {
 	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
	    }
	      
	      
	      }
	      
	      
	      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
	    
	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
 	    	    {
 	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
	    }
	      
	      
	      }  	  
	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
       

	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
        totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
        
        
        if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
	    	    {
      	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
   }
        
        
        if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
	    	    {
      	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
  }
        
        
        
        if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
	    	    {
      	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
  }
        
        //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
       // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	  
	  
  }
           
   for(int i=0;i<object.size();i++){
	             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
	             
	             }
	             
	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
	                 
	             }
	            	 
	            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
	            }
	            	 
	            	 
	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      
	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
	           
	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
	           
	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
	       //  object.get(i).setScaledShare(scaledshare.toString());	             
	             
	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
	  object.get(i).setScaledshareeT(scaledshareeT.toString());
	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
	  object.get(i).setShare(share.toString());
	  object.get(i).setSharetotalvisits(sharevisits.toString());
	  object.get(i).setShareeT(shareeT.toString());
	  object.get(i).setSharevisitorCount(sharevisitor.toString());
    object.get(i).setScaledShare(scaledshare.toString());
   }
		  
		  

			    		  
			    		  
			      
			    
		  
			         for(int i=0;i<object.size();i++){    
			        	   
			        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
					         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
					       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
					          object.get(i).setCount(numberFormat.format(count)); 
					       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
					          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
			               Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
			                  object.get(i).setPosts(numberFormat.format(posts));
			         } 
			         
			         
			         
			         return object;		
			
		
		
    }

	
	
	if(queryfield.equals("authorcombined"))
    {

		pubreport1.clear();
		
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "authorName";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    String query5= "Select "+queryfield+",COUNT(DISTINCT(refcurrentoriginal))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
	    
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
        Query.add(query5);
	    
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getArticleAuthor()))
        {
       
         PublisherReport obj = new PublisherReport();	
        	
        obj = aggregatedmap.get(pubreport1.get(k).getArticleAuthor());
        obj.setArticleAuthor(pubreport1.get(k).getArticleAuthor());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
       if(pubreport1.get(k).getPosts()!=null) 	
       	obj.setPosts(pubreport1.get(k).getPosts());
       
       
       
       if(pubreport1.get(k).getArticleAuthor()!=null) 	
  	        obj.setArticleAuthor(pubreport1.get(k).getArticleAuthor());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getArticleAuthor(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getPosts()!=null) 	
        	          	obj.setPosts(pubreport1.get(k).getPosts());
        	       
        	       
        	       
        	       if(pubreport1.get(k).getArticleAuthor()!=null) 	
           	        obj.setArticleAuthor(pubreport1.get(k).getArticleAuthor());
           	
        	       aggregatedmap.put(pubreport1.get(k).getArticleAuthor(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	       

            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        Integer pageViewsperPost = 0;
	        
	        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
	        
	        
	        value.setPageViewsPost(pageViewsperPost.toString());
	        
	        
	        String authorId = AuthorMap1.get(value.getArticleAuthor());
    		value.setAuthorId(authorId);
	        object.add(value); 
	    
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		    		  
		      
	   
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				          Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
		                  object.get(i).setPosts(numberFormat.format(posts));
		         
		         
		         }
		         
		         
		         
		         return object;		
		
		
		
		
    }

	
	if(queryfield.equals("modelcombined"))
    {
		 pubreport1.clear();

	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "modelName";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
	    
		
	    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}
	    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getMobile_device_model_name()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getMobile_device_model_name());
        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
  	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
           	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
           	
        	       aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        
	    	String key = entry.getKey();
	        PublisherReport value = entry.getValue();
           

            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        try{
	        String modelName = devicecodeMap.get(value.getMobile_device_model_name());
	        String[] mobiledeviceproperties = modelName.split(",");
        	
	        value.setMobile_device_model_name(mobiledeviceproperties[2]);
	        System.out.println(mobiledeviceproperties[2]);
	        value.setDevicecode(mobiledeviceproperties[0]);
	        System.out.println(mobiledeviceproperties[0]);
	        if(modelName.toLowerCase().contains("tablet")==false)
	        object.add(value); 
            }
            catch(Exception e){
            	continue;
            }
	     
	    }
	    
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		    		  
		      
		      
		 
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }        
		         
		         
	    return object;		
		
		
    }
  /*  
	if(queryfield.equals("reforiginalcombined"))
    {
		 pubreport1.clear();

	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "reforiginal";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
	    
		
	    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
   /*  }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}
	    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getMobile_device_model_name()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getMobile_device_model_name());
        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
  	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
           	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
           	
        	       aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        
	    	String key = entry.getKey();
	        PublisherReport value = entry.getValue();
           

            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        try{
	        String modelName = devicecodeMap.get(value.getMobile_device_model_name());
	        String[] mobiledeviceproperties = modelName.split(",");
        	
	        value.setMobile_device_model_name(mobiledeviceproperties[2]);
	        System.out.println(mobiledeviceproperties[2]);
	        value.setDevicecode(mobiledeviceproperties[0]);
	        System.out.println(mobiledeviceproperties[0]);
	        if(modelName.toLowerCase().contains("tablet")==false)
	        object.add(value); 
            }
            catch(Exception e){
            	continue;
            }
	     
	    }
	   
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
		    
		      Double total2 = 0.0;
		      Double totalvisits = 0.0;
		      Double totaleT = 0.0;
		      Double totalvisitor = 0.0;
		      Double share1 = 0.0;
		      Double sharevisits = 0.0;
		      Double shareeT = 0.0;
		      Double sharevisitor = 0.0;
		    		 
		    		  
		    		  
		      
		        for(int i=0;i<object.size();i++){
		      	  
		      	      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total2=total2+Double.parseDouble(object.get(i).getCount());
		              
		      	      
		      	      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		              

		      	      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") )
		      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		      	    	  
		      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		             

		      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		              
		              
		              
		              
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      	  
		      	  
		        }
		                 
		         for(int i=0;i<object.size();i++){
		      	             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		      	          
		      	             
		      	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		      	            
		      	            	 
		      	            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		      	            	 
		      	            	 
		      	            	 
		      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	
		      	  object.get(i).setShare(share.toString());
		      	  object.get(i).setSharetotalvisits(sharevisits.toString());
		      	  object.get(i).setShareeT(shareeT.toString());
		      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
		        
		         }
		 
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }        
		         
		         
	    return object;		
		
		
    }
    
	*/
	
	
	
	if(queryfield.equals("oscombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "system_os";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getOs()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOs());
        obj.setOs(pubreport1.get(k).getOs());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getOs()!=null) 	
  	        obj.setOs(pubreport1.get(k).getOs());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getOs(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getOs()!=null) 	
           	        obj.setOs(pubreport1.get(k).getOs());
           	
        	       aggregatedmap.put(pubreport1.get(k).getOs(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	     

Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        try{
	        String os = value.getOs();
	        String osproperties = oscodeMap.get(os);
	        os=os.replace("_"," ").replace("-", " ");
	        os = AggregationModule.capitalizeFirstLetter(os);
	        String [] osParts = oscodeMap1.get(osproperties).split(",");
	        value.setOs(osParts[0]);
	        value.setOSversion(osParts[1]);
	        value.setOscode(osproperties);
	        
	        object.add(value); 
	      }
	      catch(Exception e){
	    	  continue;
	      }
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		    		  
		      
		       
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }        
		         
		         
	    return object;		
		
		
		
		
    }


	if(queryfield.equals("brandcombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "brandName";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getBrandname()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getBrandname());
        obj.setBrandname(pubreport1.get(k).getBrandname());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getBrandname()!=null) 	
  	        obj.setBrandname(pubreport1.get(k).getBrandname());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getBrandname()!=null) 	
           	        obj.setBrandname(pubreport1.get(k).getBrandname());
           	
        	       aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        

Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        String brand = value.getBrandname();
	        brand = AggregationModule.capitalizeFirstLetter(brand);
    		value.setBrandname(brand);
	        object.add(value); 
	    
	    
	    }
	    
	    
	    
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		    		  
		      
		      
		    
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }         
		         
		         
	    return object;		
		
		
		
		
    }

	
	
	
	if(queryfield.equals("screenresolutioncombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "resolution_properties";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getScreen_properties()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getScreen_properties());
        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getScreen_properties()!=null) 	
  	        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getScreen_properties(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getScreen_properties()!=null) 	
           	        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
           	
        	       aggregatedmap.put(pubreport1.get(k).getScreen_properties(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        

            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        String resolution = value.getScreen_properties();
	        resolution= resolution.replace("_","-");
    		value.setScreen_properties(resolution);
	        object.add(value); 
	    
	    
	    }
	    
	    
	    
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		    		  
		      
		      
		    
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }         
		         
		         
	    return object;		
		
		
		
		
    }

	
	

	if(queryfield.equals("postalcodecombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "postalcode";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getPostalcode()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getPostalcode());
        obj.setPostalcode(pubreport1.get(k).getPostalcode());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getPostalcode()!=null) 	
  	        obj.setPostalcode(pubreport1.get(k).getPostalcode());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getPostalcode(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getPostalcode()!=null) 	
           	        obj.setPostalcode(pubreport1.get(k).getPostalcode());
           	
        	       aggregatedmap.put(pubreport1.get(k).getPostalcode(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        

            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        String postalcode = value.getPostalcode();
	        postalcode= postalcode.replace("_","-");
    		value.setPostalcode(postalcode);
	        object.add(value); 
	    
	    
	    }
	    
	    
	    
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		    		  
		      
		      
		    
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }         
		         
		         
	    return object;		
		
		
		
		
    }

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	if(queryfield.equals("ISPcombined"))
    {

		pubreport1.clear();
	   
		ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "ISP";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getISP()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getISP());
        obj.setISP(pubreport1.get(k).getISP());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getISP()!=null) 	
  	        obj.setISP(pubreport1.get(k).getISP());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getISP(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getISP()!=null) 	
           	        obj.setISP(pubreport1.get(k).getISP());
           	
        	       aggregatedmap.put(pubreport1.get(k).getISP(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	     
	        

Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        
	        String isp = value.getISP();
	        if(isp.trim().toLowerCase().equals("_ltd")==false && isp.trim().toLowerCase().equals("limited")==false ){
    	        isp = isp.replace("_", " ").replace("-", " ");
    			value.setISP(capitalizeString(isp));
	        
	        object.add(value); 
	        }
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    	 
		    		  
		    		  
		      
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }        
		         
		         
		         
	    return object;		
		
		
		
		
    }


	if(queryfield.equals("organisationcombined"))
    {
		 pubreport1.clear();

	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "organisation";
     
      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	    
      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
       
	    
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getOrganisation()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOrganisation());
        obj.setOrganisation(pubreport1.get(k).getOrganisation());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getOrganisation()!=null) 	
  	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getOrganisation()!=null) 	
           	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
           	
        	       aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        
Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        
	        
	        String organisation = value.getOrganisation();
	        if((!organisation.trim().toLowerCase().equals("limited")) && (!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("communication")) && (!organisation.trim().toLowerCase().contains("cable")) && (!organisation.trim().toLowerCase().contains("telecom")) && (!organisation.trim().toLowerCase().contains("network")) && (!organisation.trim().toLowerCase().contains("isp")) && (!organisation.trim().toLowerCase().contains("hathway")) && (!organisation.trim().toLowerCase().contains("internet")) && (!organisation.trim().toLowerCase().equals("_ltd")) && (!organisation.trim().toLowerCase().contains("googlebot")) && (!organisation.trim().toLowerCase().contains("sify")) && (!organisation.trim().toLowerCase().contains("bsnl")) && (!organisation.trim().toLowerCase().contains("reliance")) && (!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("tata")) && (!organisation.trim().toLowerCase().contains("nextra"))){
	        	organisation = organisation.replace("_", " ").replace("-", " ");
        	    value.setOrganisation(capitalizeString(organisation));
        	
	        object.add(value); 
	        }
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		         String queryv1 = "Select ISP from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' group by ISP";
		         CSVResult csvResultv1 = getCsvResult(false, queryv1);
		         List<String> headersv1 = csvResultv1.getHeaders();
		         List<String> linesv1 = csvResultv1.getLines();  
		      

		         String queryv2 = "Select organisation from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' group by organisation";
		         CSVResult csvResultv2 = getCsvResult(false, queryv2);
		         List<String> headersv2 = csvResultv2.getHeaders();
		         List<String> linesv2 = csvResultv2.getLines();
		         
		         linesv2.removeAll(linesv1);
		         
		         Set<String> set = new HashSet<String>();
		         set.addAll(linesv2);
		          
		         
		         
		        for(int i=0; i<object.size();i++){ 
		         if(!set.contains(object.get(i).getOrganisation().toLowerCase().replace(" ","_")))
		          {
		        	  
		        	  object.remove(i);
		          }
		        }
		         
		         
		         
		         
		         for(int i=0;i<object.size();i++){    
		        	   
		        	  
		        	 
		        	 
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           
		             
				         
		         
		         
		         }         
		         
		         
		         
	    return object;		
		
		
		
		
    }

	
		
	
	
	
	
	if(queryfield.equals("gendercombined"))
    {
		 pubreport1.clear();

	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "gender";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getGender()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getGender());
        obj.setGender(pubreport1.get(k).getGender());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getGender()!=null) 	
  	        obj.setGender(pubreport1.get(k).getGender());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getGender(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getGender()!=null) 	
           	        obj.setGender(pubreport1.get(k).getGender());
           	
        	       aggregatedmap.put(pubreport1.get(k).getGender(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	       

Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        String gender = value.getGender();
	        
	        String genderId = GenderMap1.get(gender);
    		value.setGenderId(genderId);
	        
	        value.setGender(capitalizeString(gender));
	        object.add(value); 
	    
	    
	    }
	    
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    	 
		    		  
		    		  
		      
		    
	  
		         
		          
		        	   Collections.sort(object, new Comparator<PublisherReport>() {
							
							@Override
					        public int compare(PublisherReport o1, PublisherReport o2) {
								return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
					        }
					    });	
		          
		                
		         
		         
		        	   for(int i=0;i<object.size();i++){    
			        	   
			        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
					         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
					       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
					          object.get(i).setCount(numberFormat.format(count)); 
					       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
					          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
			           }
		         
		         
		         return object;		
		
		
		
		
    }

	
	

	if(queryfield.equals("agegroupcombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "agegroup";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getAge()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getAge());
        obj.setAge(pubreport1.get(k).getAge());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getArticleAuthor()!=null) 	
  	        obj.setAge(pubreport1.get(k).getAge());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getAge(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getAge()!=null) 	
           	        obj.setArticleAuthor(pubreport1.get(k).getAge());
           	
        	       aggregatedmap.put(pubreport1.get(k).getAge(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        
	        

Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        
	        
	        String age = value.getAge();
	        
	        String ageId = AgeMap1.get(age);
    		value.setAgeId(ageId);
	        
	        age=age.replace("_","-");
   		     age=age+ " Years";
   		     if(age.contains("medium")==false){
   		     value.setAge(age);
	         object.add(value); 
   		     }
	    
	    }
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		      
		     
		    
	    
		         Collections.sort(object, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getAge().compareTo(o2.getAge());
				        }
				    });	
		 
		         
		         
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }         
		         
		         
	    return object;		
		
		
		
		
    }


	if(queryfield.equals("incomelevelcombined"))
    {
		 pubreport1.clear();

	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "incomelevel";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getIncomelevel()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getIncomelevel());
        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getIncomelevel()!=null) 	
  	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getIncomelevel()!=null) 	
           	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
           	
        	       aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	       

Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        String incomelevel = value.getIncomelevel();
	        value.setIncomelevel(capitalizeString(incomelevel));
	        object.add(value); 
	    
	    
	    }
	    
	    
          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		      
		      

	        	   Collections.sort(object, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
				        }
				    });	
	          
                   for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }
	   
	    return object;		
		
		
		
		
    }

	
	
	
	if(queryfield.equals("citycombined"))
    {
		 pubreport1.clear();

	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "city";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getCity()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCity());
        obj.setCity(pubreport1.get(k).getCity());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getCity()!=null) 	
  	        obj.setCity(pubreport1.get(k).getCity());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getCity(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getCity()!=null) 	
           	        obj.setCity(pubreport1.get(k).getCity());
           	
        	       aggregatedmap.put(pubreport1.get(k).getCity(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        
            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        String city = value.getCity();
	        if(!city.equals("undetermined")){
	        try{
        		
	        	String locationproperties = citycodeMap.get(city);
		        city=city.replace("_"," ").replace("-"," ");
		        if(citylatlongMap1.get(city)!=null && !citylatlongMap1.get(city).isEmpty())
		        value.setCitylatlong(citylatlongMap1.get(city));
		        city=capitalizeString(city);
		        value.setCity(city);
		        System.out.println(city);
		        value.setLocationcode(locationproperties);
        		}
	        
        		catch(Exception e){
        			continue;
        		}
	        object.add(value); 
	        }
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		      
		  
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }        
		         
		         
		         
	    return object;		
		
		
		
		
    }

	

	if(queryfield.equals("statecombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "state";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getState()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getState());
        obj.setState(pubreport1.get(k).getState());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getState()!=null) 	
  	        obj.setState(pubreport1.get(k).getState());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getState(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getState()!=null) 	
           	        obj.setState(pubreport1.get(k).getState());
           	
        	       aggregatedmap.put(pubreport1.get(k).getState(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        

            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        String state  = value.getState();
	        
	        if(!state.equals("undetermined"))
	        {
	        state=state.replace("_", " ");
        	
        	String stateId = StateMap1.get(state);
        	if(stateId!=null && !stateId.isEmpty())
        	value.setStateId(stateId);
            state = capitalizeString(state);
            
            value.setState(state);
	        
	        object.add(value); 
	        }
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    	 
		    		  
		    		  
		      
		   
		         
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }       
		         
		         
	    return object;		
		
		
		
		
    }

	

	
	
	
	
	
	if(queryfield.equals("countrycombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "country";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getCountry()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCountry());
        obj.setCountry(pubreport1.get(k).getCountry());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getArticleAuthor()!=null) 	
  	        obj.setCountry(pubreport1.get(k).getCountry());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getCountry()!=null) 	
           	        obj.setCountry(pubreport1.get(k).getCountry());
           	
        	       aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	        

            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        
	        String country = value.getCountry();
	       
	        if(!country.equals("undetermined")){
	        country=country.replace("_", " ");
	        String countryId = CountryMap1.get(country);
            if(countryId !=null && !countryId.isEmpty())
	        value.setCountryId(countryId);
	        country = capitalizeString(country);
        	value.setCountry(country);
	        
	        object.add(value); 
	        } 
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    	 
		    		  
		    		  
		      
		      
		
		         
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }        
		         
		         
		         
	    return object;		
		
		
		
		
    }

	

	
	
	
	
	

	if(queryfield.equals("devicecombined"))
    {

		 pubreport1.clear();
	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
      
      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
  
      List<String> Query = new ArrayList();
   
      queryfield = "device";
     
		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
			
	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			
			
	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
	    
	    Query.add(query1);
	    Query.add(query2);
	    Query.add(query3);
     
     for(int j=0 ; j < Query.size(); j++ ){
     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
      
     // returns a list of Futures holding their status and results when all complete
  
 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
     }
     
     
     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
	

	    for (int k = 0; k < maps.size(); k++)
	    {
	    
	    	if(maps!=null && maps.get(k)!=null){
	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
	        pubreport1.addAll(map);
	    	}
	
}

        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
	    
	    List<PublisherReport> object = new ArrayList<PublisherReport>();
	    
	    
	    for(int k=0; k< pubreport1.size(); k++)
	    {
        if(aggregatedmap.containsKey(pubreport1.get(k).getDevice_type()))
        {
       
        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getDevice_type());
        obj.setDevice_type(pubreport1.get(k).getDevice_type());
        
        
        
        if(pubreport1.get(k).getCount()!=null)
        obj.setCount(pubreport1.get(k).getCount());
        	
        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	
       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        
	   
       if(pubreport1.get(k).getArticleAuthor()!=null) 	
  	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
  	
       
       
	    aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
	    
        }
        else{
        	       
        	        PublisherReport obj = new PublisherReport();
        	     
        	        if(pubreport1.get(k).getCount()!=null)
        	        obj.setCount(pubreport1.get(k).getCount());
        	        	
        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
        	        	
        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
        	
        	       if(pubreport1.get(k).getDevice_type()!=null) 	
           	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
           	
        	       aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
        
        
        }
   
      
	    }
	    
	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
	        String key = entry.getKey();
	        PublisherReport value = entry.getValue();
	       

Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	        
	        
	        
	        String deviceType = value.getDevice_type();
	        value.setDevice_type(capitalizeString(deviceType));
	        object.add(value); 
	    
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		    
		    executorService.shutdown();
		 
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		      
		       
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           }   
	    return object;		
		
		
		
		
    }

	
	
	
		
	
	if(queryfield.equals("topiccombined"))
    {

		 pubreport1.clear();
		    ExecutorService executorService = Executors.newFixedThreadPool(2000);
	      
	      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
	  
	      List<String> Query = new ArrayList();
	   
	      queryfield = "tag";
	     
			String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			    
				
		    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				
				
		    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		   
		    String query5= "Select "+queryfield+",COUNT(DISTINCT(refcurrentoriginal))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		    
		    
		    Query.add(query1);
		    Query.add(query2);
		    Query.add(query3);
		    Query.add(query5);
	     
	     for(int j=0 ; j < Query.size(); j++ ){
	     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
	  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
	     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
	     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
	     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
	      
	     // returns a list of Futures holding their status and results when all complete
	  
	 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
	     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
	     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
	     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
	     }
	     
	     
	     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		

		    for (int k = 0; k < maps.size(); k++)
		    {
		    
		    	if(maps!=null && maps.get(k)!=null){
		        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        pubreport1.addAll(map);
		    	}
		
	}
		    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		    
		    List<PublisherReport> object = new ArrayList<PublisherReport>();
		    
		    
		    for(int k=0; k< pubreport1.size(); k++)
		    {
	        if(aggregatedmap.containsKey(pubreport1.get(k).getArticleTags()))
	        {
	       
	        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getArticleTags());
	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
	        if(pubreport1.get(k).getCount()!=null)
	        obj.setCount(pubreport1.get(k).getCount());
	        	
	        if(pubreport1.get(k).getEngagementTime()!=null) 	
	        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
	        	
	       if(pubreport1.get(k).getVisitorCount()!=null) 	
	        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
	        
	       if(pubreport1.get(k).getPosts()!=null) 	
	          	obj.setPosts(pubreport1.get(k).getPosts());
	       
		   
	       if(pubreport1.get(k).getArticleTags()!=null) 	
	  	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
	  	
	       
	       
		    aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
		    
	        }
	        else{
	        	       
	        	        PublisherReport obj = new PublisherReport();
	        	     
	        	        if(pubreport1.get(k).getCount()!=null)
	        	        obj.setCount(pubreport1.get(k).getCount());
	        	        	
	        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
	        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
	        	        	
	        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
	        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
	        	
	        	       if(pubreport1.get(k).getPosts()!=null) 	
	        	          	obj.setPosts(pubreport1.get(k).getPosts());
	        	       
	        	       
	        	       if(pubreport1.get(k).getArticleTags()!=null) 	
	           	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
	           	
	        	       aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
	        
	        
	        }
	   
	      
		    }
		    
		    
		    List<PublisherReport> publisherReport = new ArrayList<PublisherReport>();
		    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) { 
		    
		    	List<PublisherReport> objv1 = new ArrayList<PublisherReport>();
		    	
		    	PublisherReport obj = new PublisherReport();
		    	String[] data =  entry.getValue().getArticleTags().split(",");
		  
                 if(data.length > 1){
	        	 	 
	        		 for(int q=0; q<data.length-1; q++){
	        		      PublisherReport obj2 = new PublisherReport();
	        			 obj2.setArticleTags(data[q]);
	        			 if(AggregationModule.tagMap3.get(data[q])!=null){
	                    	 String tagId = AggregationModule.tagMap3.get(data[q]);
	        	        	 obj2.setTagId(tagId);
	        			 
	        			 }
	        		 
	        		     objv1.add(obj2);
	        		 }
	        	 }
	        	 else{
	        	 obj.setArticleTags(data[0]);
	        	
            	 if(AggregationModule.tagMap3.get(data[0])!=null){
            	 String tagId = AggregationModule.tagMap3.get(data[0]);
	        	 obj.setTagId(tagId);
            	 }
              
             }
             
                 if(!data[0].isEmpty())
             	{

     	        	 if(data.length > 1){
             		
             		for(int q1=0; q1<objv1.size(); q1++){
             		 objv1.get(q1).setCount(entry.getValue().getCount());
             		 objv1.get(q1).setVisitorCount(entry.getValue().getVisitorCount());
             		 objv1.get(q1).setEngagementTime(entry.getValue().getEngagementTime());
             		  objv1.get(q1).setPosts(entry.getValue().getPosts());
             		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);objv1.get(q1).setChannelName(channel_name1);
             		}
                      
     	        	 
             		
                      publisherReport.addAll(objv1);
     	        	 }
     	        	 else{
     	        		 
     	        		 
     	        		 obj.setCount(entry.getValue().getCount());
                 		 obj.setVisitorCount(entry.getValue().getVisitorCount());
                 		 obj.setEngagementTime(entry.getValue().getEngagementTime());
     	        		 obj.setPosts(entry.getValue().getPosts());
                 		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
     	        	     publisherReport.add(obj);
     	        	 
     	        	 }
     	        	 
             	}
		    
		    
		    
		    
		    
		    }
		    Double valuev1 = 0.0;
		    Map<String,String> TagAggregation = new HashMap<String,String>();
		    Map<String,PublisherReport> aggregatedmap1 = new HashMap<String,PublisherReport>();
		    String [] metricParts = new String [3];
		    for(int i =0; i<publisherReport.size(); i++){
	    		
	    		if(TagAggregation.containsKey(publisherReport.get(i).getArticleTags())==false){
		        	
		        	
		        //	valuev1 = TagAggregation.get(pubreport.get(i).getArticleTags());
		        	TagAggregation.put(publisherReport.get(i).getArticleTags(),publisherReport.get(i).getCount()+":"+publisherReport.get(i).getVisitorCount()+":"+publisherReport.get(i).getEngagementTime()+":"+publisherReport.get(i).getPosts());
		        	
		        	}
		        	
		        
		        else{
		        	
		        	//valuev1 = Double.parseDouble(TagAggregation.get(publisherReport.get(i).getArticleTags()));
		        	String metricPart = TagAggregation.get(publisherReport.get(i).getArticleTags());
		        	metricParts= metricPart.split(":");
		        	Double countv1 = Double.parseDouble(metricParts[0]);
		        	Double visitorCountv1 =Double.parseDouble(metricParts[1]);
		            Double engagementTimev1 = Double.parseDouble(metricParts[2]); 			
		        	Double postsv1 = Double.parseDouble(metricParts[3]);
		            countv1 = countv1 + Double.parseDouble(publisherReport.get(i).getCount());
		            visitorCountv1 = visitorCountv1 + Double.parseDouble(publisherReport.get(i).getVisitorCount()); 
		            engagementTimev1 = engagementTimev1 +  Double.parseDouble(publisherReport.get(i).getEngagementTime()); 
		            postsv1 = postsv1+ Double.parseDouble(publisherReport.get(i).getPosts()); 
		            TagAggregation.put(publisherReport.get(i).getArticleTags(),countv1.toString()+":"+visitorCountv1.toString()+":"+engagementTimev1.toString()+":"+postsv1.toString());
		        //	pubreport.get(i).setCount(new Double(valuev1+(Double.parseDouble(pubreport.get(i).getCount()))).toString());
		        	
			        }	
		        }
	    		
		        aggregatedmap.clear();
		        
		        for (Map.Entry<String, String> entry : TagAggregation.entrySet()) {
		    
		          PublisherReport objectv1 = new PublisherReport(); 	
		          String tag = entry.getKey();
		          String [] metricData = entry.getValue().split(":");
		          objectv1.setArticleTags(tag);
		          objectv1.setVisitorCount(metricData[1]);
		          objectv1.setCount(metricData[0]);
		          objectv1.setEngagementTime(metricData[2]);
		          objectv1.setPosts(metricData[3]);
		          aggregatedmap.put(tag, objectv1);
		        
		        }
		    
		        
		        
		        for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        String key = entry.getKey();
		        PublisherReport value = entry.getValue();
		      
		        
	Double averageTime = 0.0;
		        
		        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        
		        
		        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        
		        
		        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        
		        
	            Integer pageViewsperPost = 0;
		        
		        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
		        
		        
		         value.setPageViewsPost(pageViewsperPost.toString());
		        
		        
		        if(value.getArticleTags().toLowerCase().equals("hindibollywood"))	
	       		   value.setArticleTags("Bollywood");
	       	 
	       	    if(value.getArticleTags().toLowerCase().equals("womenlifestyle"))	
	       		   value.setArticleTags("Women's Fashion");
	       	
	       	 if(value.getArticleTags().toLowerCase().equals("hindimusic"))	
	       		 value.setArticleTags("Hindi Music");
	       	 
	       	 if(value.getArticleTags().toLowerCase().equals("healthfitness"))	
	       		 value.setArticleTags("Health & Fitness");
	       	 
	       	 if(value.getArticleTags().toLowerCase().equals("englishhollywood"))	
	       		 value.setArticleTags("Hollywood");
	       	 
	       	 if(value.getArticleTags().toLowerCase().contains("technews"))	
	       		 value.setArticleTags("Technology News");
	       	 
	       	 if(value.getArticleTags().toLowerCase().contains("mcdonald"))	
	       		 value.setArticleTags("Fast Food");
	       	    
	       	    
	       	 if(value.getArticleTags().toLowerCase().contains("international"))	
	       		 value.setArticleTags("International News");
	       	    
	       	 
	       	 
	       	 
	       	 
	       	 if(AggregationModule.tagMap3.get(value.getArticleTags()) != null){
	       	 String tagId = AggregationModule.tagMap3.get(value.getArticleTags());
	    	 value.setTagId(tagId);
	       	
	       	 
	       	 
	       	 }   
	       	   
	       	if(capitalizeFirstLetter(value.getArticleTags())!=null)
	          	 value.setArticleTags(capitalizeFirstLetter(value.getArticleTags()));
	       	 
	       	 
	       	 
	       	 
	       	 if(!value.getArticleTags().isEmpty())
	       	       object.add(value); 
		    
		    
		    }
		    
	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
			    
	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
	 		        }
	 		    });	
			    
			    }
			    
			    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
			    	

		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		 		        }
		 		    });	
			    	
			    	
			    }
			    
			    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
			    	
	                    Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		 		        }
		 		    });	
			    	
			    	
			    }
			    
			    
			    
			    
			    
			    executorService.shutdown();
			 
			    
			    
	            Double total2 = 0.0;
	Double totalvisits = 0.0;
	Double totaleT = 0.0;
	Double totalvisitor = 0.0;
	Double share1 = 0.0;
	Double sharevisits = 0.0;
	Double shareeT = 0.0;
	Double sharevisitor = 0.0;
	maxTotal = 0.0; 
	scaledshare = 0.0;	 
	Double scaledsharevisits = 0.0;
	Double scaledshareeT = 0.0;
	Double scaledsharevisitor = 0.0;
	Double maxsharevisits = 0.0;
	Double maxshareeT = 0.0;
	Double maxsharevisitor = 0.0;

	for(int i=0;i<object.size();i++){
	  
	      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		  { 
	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
	 	    	    }
		  
		  
		  
		  }
	      
	      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
	    	 
	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		    	    {
		    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
	   }
	      
	      
	      }
	      
	      
	      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
	    
	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		    	    {
		    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
	   }
	      
	      
	      }  	  
	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
	   

	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
	    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
	    
	    
	    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
	 	    {
	  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	}
	    
	    
	    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
	 	    {
	  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	}
	    
	    
	    
	    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
	 	    {
	  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	}
	    
	    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	  
	   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	  
	  
	}
	       
	for(int i=0;i<object.size();i++){
	             
		try{
		if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
	        	 if(total2 != 0.0)
	             share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
	             if(maxTotal != 0.0)
	        	 scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
	             
	             }
	             
	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	            	 if(total2 != 0.0)
	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
	            	 if(maxTotal != 0.0)
	            	 scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
	                 
	             }
	            	 
	            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
	            	if(total2 != 0.0) 
	            	share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
	            	if(maxTotal != 0.0)
	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
	            }
	            	 
	            if(totalvisits != 0.0) 
	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
	            
	            if(totaleT != 0.0) 
	            shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
	           
	            if(totalvisitor!= 0.0) 
	            sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      
	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	           if(maxsharevisits != 0.0)
	            scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
	           if(maxsharevisitor!= 0.0)
	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
	           if(maxshareeT != 0.0)
	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
	       //  object.get(i).setScaledShare(scaledshare.toString());	             
	             
	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
	  object.get(i).setScaledshareeT(scaledshareeT.toString());
	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
	  object.get(i).setShare(share.toString());
	  object.get(i).setSharetotalvisits(sharevisits.toString());
	  object.get(i).setShareeT(shareeT.toString());
	  object.get(i).setSharevisitorCount(sharevisitor.toString());
	object.get(i).setScaledShare(scaledshare.toString());
		}
		catch(Exception e){
			continue;
		}
		
		}
		  
		  

			    		  
			    		  
			      
			       
			         for(int i=0;i<object.size();i++){    
			        	   try{
			        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
					         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
					       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
					          object.get(i).setCount(numberFormat.format(count)); 
					       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
					          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
			           
					        Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
			                object.get(i).setPosts(numberFormat.format(posts));
			        	   }
			        	   catch(Exception e){
			        		   
			        		   continue;
			        	   }
			        	   
			        	   
			        	   
			        	   
			        	   
			        	   }   
		    return object;		
			
			
		
		
    }
    
	if(queryfield.equals("visitorTypecombined"))
    {

		 pubreport1.clear();
	   
		 List<PublisherReport> object = new ArrayList();
		 pubreport1 = countCombinedUsersChannelDatewise(startdate, enddate, channel_name, filter);
	    
	    for (PublisherReport value : pubreport1) {
	        
	      
	      
	        
            Double averageTime = 0.0;
	        
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
	        
	        
	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
	        
	        
	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
	        
	     
       	       object.add(value); 
	    
	    
	    }
	    
 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		    
            Collections.sort(object, new Comparator<PublisherReport>() {
 				
 				@Override
 		        public int compare(PublisherReport o1, PublisherReport o2) {
 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 		        }
 		    });	
		    
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		    	

	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		    	
                    Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 		        }
	 		    });	
		    	
		    	
		    }
		    
		    
		    
		    
		   
		    
		    
            Double total2 = 0.0;
Double totalvisits = 0.0;
Double totaleT = 0.0;
Double totalvisitor = 0.0;
Double share1 = 0.0;
Double sharevisits = 0.0;
Double shareeT = 0.0;
Double sharevisitor = 0.0;
maxTotal = 0.0; 
scaledshare = 0.0;	 
Double scaledsharevisits = 0.0;
Double scaledshareeT = 0.0;
Double scaledsharevisitor = 0.0;
Double maxsharevisits = 0.0;
Double maxshareeT = 0.0;
Double maxsharevisitor = 0.0;

for(int i=0;i<object.size();i++){
  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	  { 
    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
 	    	    }
	  
	  
	  
	  }
      
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
    	 
    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
   }
      
      
      }
      
      
      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
    
    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
   }
      
      
      }  	  
      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
   

      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
    
    
    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
 	    {
  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
}
    
    
    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
 	    {
  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
}
    
    
    
    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
 	    {
  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
}
    
    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
  
   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  
  
}
       
for(int i=0;i<object.size();i++){
             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
             
             }
             
             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
                 
             }
            	 
            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
            }
            	 
            	 
             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      
       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
           
           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
           
           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
       //  object.get(i).setScaledShare(scaledshare.toString());	             
             
  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
  object.get(i).setScaledshareeT(scaledshareeT.toString());
  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
  object.get(i).setShare(share.toString());
  object.get(i).setSharetotalvisits(sharevisits.toString());
  object.get(i).setShareeT(shareeT.toString());
  object.get(i).setSharevisitorCount(sharevisitor.toString());
object.get(i).setScaledShare(scaledshare.toString());
}
	  
	  

		    		  
		    		  
		      
		       
		         for(int i=0;i<object.size();i++){    
		        	   
		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
				          object.get(i).setCount(numberFormat.format(count)); 
				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		           
				          
		         }   
	    return object;		
		
		
    }

    
 return pubreport1;
 
}
  
  
  
  
  public List<PublisherReport> countISP(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,ISP FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by ISP", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if(data[0].trim().toLowerCase().equals("_ltd")==false){ 
        obj.setISP(capitalizeString(data[0]));
        obj.setCount(data[1]);
        pubreport.add(obj);
       }
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> countOrg(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT organisation FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " and organisation NOT IN (Select DISTINCT(ISP) FROM enhanceduserdatabeta1)", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
       obj.setOrganisation(capitalizeString(data[0]));
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public Set<String> getChannelList(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    String query = String.format("SELECT channel_name FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " Group by channel_name", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<String> finallines = new ArrayList();
    Set<String> data = new HashSet();
    data.addAll(lines);
    
    //System.out.println(headers);
    //System.out.println(lines);
    
    return data;
  }
  
  public List<PublisherReport> gettimeofdayQuarter(String startdate, String enddate)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*) from enhanceduserdatabeta1 WHERE date between '" + startdate + "'" + " and " + "'" + enddate + "' GROUP BY HOUR(request_time)";
    
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> gettimeofdayDaily(String startdate, String enddate)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*) from enhanceduserdatabeta1 WHERE date between '" + startdate + "'" + " and " + "'" + enddate + "' GROUP BY date_histogram(field='request_time','interval'='1d')";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> gettimeofday(String startdate, String enddate)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*) from enhanceduserdatabeta1 WHERE date between '" + startdate + "'" + " and " + "'" + enddate + "' GROUP BY date_histogram(field='request_time','interval'='1h')";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> countGender(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,gender FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by gender", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    
    //System.out.println(headers);
    //System.out.println(lines);
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setGender(capitalizeString(data[0]));
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> countAgegroup(String startdate, String enddate)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,agegroup FROM enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " group by agegroup", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    
    //System.out.println(headers);
    //System.out.println(lines);
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setAge(data[0]);
        obj.setCount(data[1]);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> getOrg(String startdate, String enddate)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query1 = "Select count(*),organisation from enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY organisation";
    CSVResult csvResult1 = getCsvResult(false, query1);
    List<String> headers1 = csvResult1.getHeaders();
    List<String> lines1 = csvResult1.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines1.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data1 = ((String)lines1.get(i)).split(",");
        if ((data1[0].length() > 3) && (data1[0].charAt(0) != '_') && (!data1[0].contains("broadband")) && (!data1[0].contains("communication")) && (!data1[0].contains("cable")) && (!data1[0].contains("telecom")) && (!data1[0].contains("network")) && (!data1[0].contains("isp")) && (!data1[0].contains("hathway")) && (!data1[0].contains("internet")) && (!data1[0].contains("Sify")) && (!data1[0].toLowerCase().equals("_ltd")) && (!data1[0].equals("Googlebot")) && (!data1[0].equals("Bsnl")))
        {
          obj.setOrganisation(capitalizeString(data1[0]));
          obj.setCount(data1[1]);
          
          pubreport.add(obj);
        }
      }
      //System.out.println(headers1);
      //System.out.println(lines1);
    }
    return pubreport;
  }
  
  public List<PublisherReport> getdayQuarterdata(String startdate, String enddate)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*),QuarterValue from enhanceduserdatabeta1 where date between '" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY QuarterValue";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if (data[0].equals("quarter1")) {
          data[0] = "quarter1 (00 - 04 AM)";
        }
        if (data[0].equals("quarter2")) {
          data[0] = "quarter2 (04 - 08 AM)";
        }
        if (data[0].equals("quarter3")) {
          data[0] = "quarter3 (08 - 12 AM)";
        }
        if (data[0].equals("quarter4")) {
          data[0] = "quarter4 (12 - 16 PM)";
        }
        if (data[0].equals("quarter5")) {
          data[0] = "quarter5 (16 - 20 PM)";
        }
        if (data[0].equals("quarter6")) {
          data[0] = "quarter6 (20 - 24 PM)";
        }
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> countBrandNameChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
    String query = "SELECT COUNT(*)as count,brandName FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by brandName";
    //System.out.println(query);
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if(data[0].trim().toLowerCase().contains("logitech")==false && data[0].trim().toLowerCase().contains("mozilla")==false && data[0].trim().toLowerCase().contains("web_browser")==false && data[0].trim().toLowerCase().contains("microsoft")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false){ 
        obj.setBrandname(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
        } 
       }
  //    //System.out.println(headers);
  //    //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> countBrowserChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = "SELECT COUNT(*)as count,browser_name FROM enhanceduserdatabeta1 where channel_name ='" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by browser_name";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setBrowser(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> countOSChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,system_os FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by system_os", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
  //  //System.out.println(headers);
  //  //System.out.println(lines);
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setOs(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
    }
    return pubreport;
  }
  
  public List<PublisherReport> countModelChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,modelName FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by modelName", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");

        if(data[0].trim().toLowerCase().contains("logitech_revue")==false && data[0].trim().toLowerCase().contains("mozilla_firefox")==false && data[0].trim().toLowerCase().contains("apple_safari")==false && data[0].trim().toLowerCase().contains("generic_web")==false && data[0].trim().toLowerCase().contains("google_compute")==false && data[0].trim().toLowerCase().contains("microsoft_xbox")==false && data[0].trim().toLowerCase().contains("google_chromecast")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false && data[0].trim().toLowerCase().contains("laptop")==false){    
        obj.setMobile_device_model_name(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
        
        }
    }
    return pubreport;
  }
  
  public List<PublisherReport> countCityChannel(String startdate, String enddate, String channel_name, String filter)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));

	  String query  ="";
	  String queryfield= "city";
	  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	    
		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		query= "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		
		if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  

    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    Integer accumulatedCount = 0;
    
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if(i<10 && !data[0].equals("undetermined")){
        	String locationproperties = citycodeMap.get(data[0]);
	        data[0]=data[0].replace("_"," ").replace("-"," ");
	        if(citylatlongMap1.get(data[0])!=null && !citylatlongMap1.get(data[0]).isEmpty())
	        obj.setCitylatlong(citylatlongMap1.get(data[0]));
	        data[0]=capitalizeString(data[0]);
	        obj.setCity(capitalizeString(data[0]));
	        System.out.println(data[0]);
	        obj.setLocationcode(locationproperties);
     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			obj.setCount(data[1]);
		//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		//	obj.setEngagementTime(data[1]);
		//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	//		obj.setVisitorCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
        }
        else
        {	   
        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
        	 
	    	  if(i == (lines.size()-1)){
	    		 obj.setCity("Others"); 
	    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			  //   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
	    		//  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						obj.setCount(accumulatedCount.toString());
					//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					//	obj.setEngagementTime(accumulatedCount.toString());
					//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					//	obj.setVisitorCount(accumulatedCount.toString());
	    		 pubreport.add(obj);
	    	  }
	       }
      
      
      
      
      }
    }
    return pubreport;
  }
  
  
  public List<PublisherReport> countStateChannel(String startdate, String enddate, String channel_name, String filter)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  String query  ="";
	  String queryfield= "state";
	  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	    
		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		query= "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		
		if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  

		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    Integer accumulatedCount = 0;
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        if(i<10 && !data[0].equals("undetermined")){
		        	data[0]=data[0].replace("_", " ");
		        	String stateId = StateMap1.get(data[0]);
		            obj.setStateId(stateId);

		        	data[0] = capitalizeString(data[0]);
	            	obj.setState(data[0]);
		      //  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					obj.setCount(data[1]);
				//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				//	obj.setEngagementTime(data[1]);
				//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				//	obj.setVisitorCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        pubreport.add(obj);
		        }
		        else
		        {	   
		        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
		        	 
			    	  if(i == (lines.size()-1)){
			    		 obj.setState("Others"); 
			    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					  //   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			    		//  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(accumulatedCount.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(accumulatedCount.toString());
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(accumulatedCount.toString());
			    		 pubreport.add(obj);
			    	  }
			       }
		      
		      
		      
		      
		      }
		    }
		    return pubreport;
		  }
  
  
  
  
  public List<PublisherReport> countStateChannelFilter(String startdate, String enddate, String channel_name, Map<String,String>filter1, String filter)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    
	  int size = filter1.size();
      String queryfilterbuilder = "";
      String formattedString = "";
      String query = "";
      int j =0;
      for (Map.Entry<String, String> entry : filter1.entrySet())
      {
      	if (j==0){
              
      		if(entry.getKey().contains("tag"))
      	    queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";
      		else{
      		formattedString = addCommaString(entry.getValue());
      		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
      		}
      	}
          else{
          
          	if(entry.getKey().contains("tag"))
	        	    queryfilterbuilder = queryfilterbuilder+" and "+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";	
          else{	
          formattedString = addCommaString(entry.getValue());	
          queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
          }
          }
          j++;
       
      }
      
	  
	        query = "SELECT COUNT(*)as count,state FROM enhanceduserdatabeta1 where  "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by state order by count desc";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    Integer accumulatedCount = 0;
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        if(i<10 && !data[0].equals("undetermined")){
		        	data[0]=data[0].replace("_", " ");
		        	String stateId = StateMap1.get(data[0]);
		            obj.setStateId(stateId);

		        	data[0] = capitalizeString(data[0]);
	            	obj.setState(data[0]);
		    //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					obj.setCount(data[1]);
				//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				//	obj.setEngagementTime(data[1]);
				//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				//	obj.setVisitorCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        pubreport.add(obj);
		        }
		        else
		        {	   
		        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
		        	 
			    	  if(i == (lines.size()-1)){
			    		 obj.setState("Others"); 
			    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					  //   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			    	//	  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(accumulatedCount.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(accumulatedCount.toString());
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(accumulatedCount.toString());
			    		 pubreport.add(obj);
			    	  }
			       }
		      
		      
		      
		      
		      }
		    }
		    return pubreport;
		  }
  
  
  
  
  
  
  
  
  
  
  public List<PublisherReport> countCountryChannel(String startdate, String enddate, String channel_name, String filter)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  String query  ="";
	  String queryfield= "country";
	  
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	    
		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		query= "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		
		if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  

		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    Integer accumulatedCount = 0;
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        if(i<10 && !data[0].equals("undetermined")){
		        	data[0]=data[0].replace("_", " ");
		        	String countryId = CountryMap1.get(data[0]);
		            obj.setCountryId(countryId);
		        	data[0] = capitalizeString(data[0]);
	            	obj.setCountry(data[0]);
		    //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					obj.setCount(data[1]);
				//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				//	obj.setEngagementTime(data[1]);
				//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				//	obj.setVisitorCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        pubreport.add(obj);
		        }
		        else
		        {	   
		        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
		        	 
			    	  if(i == (lines.size()-1)){
			    		 obj.setCountry("Others"); 
			    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					  //   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			    	//	  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(accumulatedCount.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(accumulatedCount.toString());
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(accumulatedCount.toString());
			    		 pubreport.add(obj);
			    	  }
			       }
		      
		      
		      
		      
		      }
		    }
		    return pubreport;
		  }
  
  
  
  public List<PublisherReport> countCountryChannelFilter(String startdate, String enddate, String channel_name, Map<String,String>filter1, String filter)
		    throws CsvExtractorException, Exception
		  {
		    
	  
	  int size = filter1.size();
      String queryfilterbuilder = "";
      String formattedString = "";
      String query = "";
      int j =0;
      for (Map.Entry<String, String> entry : filter1.entrySet())
      {
      	if (j==0){
              
      		if(entry.getKey().contains("tag"))
      	    queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";
      		else{
      		formattedString = addCommaString(entry.getValue());
      		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
      		}
      	}
          else{
          
          	if(entry.getKey().contains("tag"))
	        	    queryfilterbuilder = queryfilterbuilder+" and "+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";	
          else{	
          formattedString = addCommaString(entry.getValue());	
          queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
          }
          }
          j++;
       
      }
      
	  
	        //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    query = "SELECT COUNT(*)as count,country FROM enhanceduserdatabeta1 where  "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by country order by count desc";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    Integer accumulatedCount = 0;
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        if(i<10 && !data[0].equals("undetermined")){
		        	data[0]=data[0].replace("_", " ");
		        	String countryId = CountryMap1.get(data[0]);
		            obj.setCountryId(countryId);
		        	data[0] = capitalizeString(data[0]);
	            	obj.setCountry(data[0]);
		     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					obj.setCount(data[1]);
				//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					//obj.setEngagementTime(data[1]);
					//if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				//	obj.setVisitorCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        pubreport.add(obj);
		        }
		        else
		        {	   
		        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
		        	 
			    	  if(i == (lines.size()-1)){
			    		 obj.setCountry("Others"); 
			    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					  //   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			    		//  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(accumulatedCount.toString());
						//		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(accumulatedCount.toString());
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(accumulatedCount.toString());
			    		 pubreport.add(obj);
			    	  }
			       }
		      
		      
		      
		      
		      }
		    }
		    return pubreport;
		  }


  
  
  
  
  
  
  
  
  
  
  public List<PublisherReport> countfingerprintChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
	  /*
	  
	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
	  
    
	  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
	  
		 CSVResult csvResult00 = getCsvResult(false, query00);
		 List<String> headers00 = csvResult00.getHeaders();
		 List<String> lines00 = csvResult00.getLines();
		 List<PublisherReport> pubreport00 = new ArrayList();  
			  
		//  //System.out.println(headers00);
		//  //System.out.println(lines00);  
		  
		  for (int i = 0; i < lines00.size(); i++)
	      {
	       
	        String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	      }
		  
		*/  
		  
		//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
	    CSVResult csvResult = getCsvResult(false, query);
	    List<String> headers = csvResult.getHeaders();
	    List<String> lines = csvResult.getLines();
	    List<PublisherReport> pubreport = new ArrayList();
	    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	        PublisherReport obj = new PublisherReport();
	        
	        String[] data = ((String)lines.get(i)).split(",");
	      //  obj.setDate(data[0]);
	        obj.setReach(data[0]);
	        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	        pubreport.add(obj);
	      }
	    }
	    
    return pubreport;
  }
  
  
  
  
  
  public List<PublisherReport> countbenchmarkfingerprintChannel(String startdate, String enddate, String channel_name)
		    throws CsvExtractorException, Exception
		  {
			  
			  
		//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
			  
		    /*
			  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
			  
				 CSVResult csvResult00 = getCsvResult(false, query00);
				 List<String> headers00 = csvResult00.getHeaders();
				 List<String> lines00 = csvResult00.getLines();
				 List<PublisherReport> pubreport00 = new ArrayList();  
					  
				//  //System.out.println(headers00);
				//  //System.out.println(lines00);  
				  
				  for (int i = 0; i < lines00.size(); i++)
			      {
			       
			        String[] data = ((String)lines00.get(i)).split(",");
			  //      //System.out.println(data[0]);
			      }
				  
				*/  
		
	  String time = startdate;
      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
      Date date1 = df.parse(time);
     
      String time1 = enddate;
      Date date2 = df.parse(time1);
            
     
     
      int days = getDifferenceDays(date2, date1)-2;
      Calendar cal = Calendar.getInstance();
      cal.setTime(date1);
      cal.add(Calendar.DAY_OF_YEAR, days);
      Date benchmarkStartDate1 = cal.getTime();
      cal.setTime(date1);
      cal.add(Calendar.DAY_OF_YEAR, -1);
      Date benchmarkEndDate1 = cal.getTime();


      String benchmarkStartDate = df.format(benchmarkStartDate1);	  
      String benchmarkEndDate  = df.format(benchmarkEndDate1);	
	  
	  
     //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		
				
				String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
			      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
			    CSVResult csvResult = getCsvResult(false, query);
			    List<String> headers = csvResult.getHeaders();
			    List<String> lines = csvResult.getLines();
			    List<PublisherReport> pubreport = new ArrayList();
			    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
			      for (int i = 0; i < lines.size(); i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			        String[] data = ((String)lines.get(i)).split(",");
			      //  obj.setDate(data[0]);
			        obj.setReach(data[0]);
			        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			        pubreport.add(obj);
			      }
			    }
			    
		    return pubreport;
		  }
  
  
  
  
 
  public List<PublisherReport> countAudiencesegmentChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
      List<PublisherReport> pubreport = new ArrayList(); 
	  
	  String querya1 = "SELECT COUNT(distinct(cookiehash)) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate +"' limit 20000000";   
	  
	    //Divide count in different limits 
	
	  
	  List<String> Query = new ArrayList();
	  


	    System.out.println(querya1);
	    
	    final long startTime2 = System.currentTimeMillis();
		
	    
	    CSVResult csvResult1 = null;
		try {
			csvResult1 = AggregationModule.getCsvResult(false, querya1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    final long endTime2 = System.currentTimeMillis();
		
	    List<String> headers = csvResult1.getHeaders();
	    List<String> lines = csvResult1.getLines();
	    
	    
	    String count = lines.get(0);
	    Double countv1 = Double.parseDouble(count);
	    Double n = 0.0;
	    
	    
	    if(countv1 >= 100000 && countv1 <= 120000)
	       n=10.0;
	    
	    if(countv1 <= 100000 && countv1 > 100)
           n=10.0;	    
	   
	    if(countv1 <= 100)
	    	n=1.0;
	    
	    if(countv1 == 0 || countv1 > 50000)
	    {
	    	
	    	return pubreport;
	    	
	    }
	    
	    Double total_length = countv1 - 0;
	    Double subrange_length = total_length/n;	
	    
	    Double current_start = 0.0;
	    for (int i = 0; i < n; ++i) {
	      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
	      Double startlimit = current_start;
	      Double finallimit = current_start + subrange_length;
	      Double index = startlimit +1;
	      if(countv1 == 1)
	    	  index=0.0;
	      String query = "SELECT distinct(cookie_id) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' Order by cookie_id limit "+index.intValue()+","+finallimit.intValue();  	
		  System.out.println(query);
	  //    Query.add(query);
	      current_start += subrange_length;
	      Query.add(query);
	     
	    }
	    
	    
	    	
	    
	  
	  ExecutorService executorService = Executors.newFixedThreadPool(2000);
        
       List<Callable<FastMap<String,Double>>> lst = new ArrayList<Callable<FastMap<String,Double>>>();
    
       for(int i=0 ; i < Query.size(); i++ ){
       lst.add(new AudienceSegmentQueryExecutionThreads(Query.get(i),client,searchDao));
    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
        
       // returns a list of Futures holding their status and results when all complete
       lst.add(new SubcategoryQueryExecutionThreads(Query.get(i),client,searchDao));
   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
       }
       
       
       List<Future<FastMap<String,Double>>> maps = executorService.invokeAll(lst);
        
       System.out.println(maps.size() +" Responses recieved.\n");
        
       for(Future<FastMap<String,Double>> task : maps)
       {
    	   try{
           if(task!=null)
    	   System.out.println(task.get().toString());
    	   }
    	   catch(Exception e)
    	   {
    		   e.printStackTrace();
    		   continue;
    	   }
    	    
    	   
    	   }
        
       /* shutdown your thread pool, else your application will keep running */
       executorService.shutdown();
	  
	
	  //  //System.out.println(headers1);
	 //   //System.out.println(lines1);
	    
	    
       
       FastMap<String,Double> audiencemap = new FastMap<String,Double>();
       
       FastMap<String,Double> subcatmap = new FastMap<String,Double>();
       
       Double count1 = 0.0;
       
       Double count2 = 0.0;
       
       String key ="";
       String key1 = "";
       Double value = 0.0;
       Double vlaue1 = 0.0;
       
	    for (int i = 0; i < maps.size(); i++)
	    {
	    
	    	if(maps!=null && maps.get(i)!=null){
	        FastMap<String,Double> map = (FastMap<String, Double>) maps.get(i).get();
	    	
	       if(map.size() > 0){
	       
	       if(map.containsKey("audience_segment")==true){
	       for (Map.Entry<String, Double> entry : map.entrySet())
	    	 {
	    	  key = entry.getKey();
	    	  key = key.trim();
	    	  value=  entry.getValue();
	    	if(key.equals("audience_segment")==false) { 
	    	if(audiencemap.containsKey(key)==false)
	    	audiencemap.put(key,value);
	    	else
	    	{
	         count1 = audiencemap.get(key);
	         if(count1!=null)
	         audiencemap.put(key,count1+value);	
	    	}
	      }
	    }
	  }   

	       if(map.containsKey("subcategory")==true){
	       for (Map.Entry<String, Double> entry : map.entrySet())
	    	 {
	    	   key = entry.getKey();
	    	   key = key.trim();
	    	   value=  entry.getValue();
	    	if(key.equals("subcategory")==false) {    
	    	if(subcatmap.containsKey(key)==false)
	    	subcatmap.put(key,value);
	    	else
	    	{
	         count1 = subcatmap.get(key);
	         if(count1!=null)
	         subcatmap.put(key,count1+value);	
	    	}
	    }  
	    	
	   }
	      
	     	       }
	           
	       } 
	    
	    	} 	
	   }    
	    
	    String subcategory = null;
	   
	    if(audiencemap.size()>0){
	   
	    	for (Map.Entry<String, Double> entry : audiencemap.entrySet()) {
	    	//System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
	    

	        PublisherReport obj = new PublisherReport();
	        
	   //     String[] data = ((String)lines.get(i)).split(",");
	        
	     //   if(data[0].trim().toLowerCase().contains("festivals"))
	      //  obj.setAudience_segment("");
	      //  else
	        obj.setAudience_segment( entry.getKey());	
	       // obj.setCount(String.valueOf(entry.getValue()));
	      
	        if ((!entry.getKey().equals("tech")) && (!entry.getKey().equals("india")) && (!entry.getKey().trim().toLowerCase().equals("foodbeverage")) )
	        {
	         for (Map.Entry<String, Double> entry1 : subcatmap.entrySet()) {
	        	 
	        	    
	        	 
	        	 PublisherReport obj1 = new PublisherReport();
	            
	           
	            if (entry1.getKey().contains(entry.getKey()))
	            {
	            //  String substring = "_" + entry.getKey() + "_";
	                subcategory = entry1.getKey();
	           //   if(data[0].trim().toLowerCase().contains("festivals"))
	           //   obj1.setAudience_segment("");
	           //   else
	        
	              //System.out.println(" \n\n\n Key : " + subcategory + " Value : " + entry1.getValue());  
	              obj.setSubcategory(subcategory);
	              obj.setCount(String.valueOf(entry1.getValue()));
	            //  obj.getAudience_segment_data().add(obj1);
	            }
	            pubreport.add(obj);
	         
	         }
	          
	        }
	      
	    }
	    }
	    return pubreport;
  }
  
  

  public List<PublisherReport> countAudiencesegmentChannelfilter(String startdate, String enddate, String channel_name,String queryfilterbuilder)
    throws CsvExtractorException, Exception
  {
      List<PublisherReport> pubreport = new ArrayList(); 
	  
	  String querya1 = "SELECT COUNT(distinct(cookiehash)) FROM enhanceduserdatabeta1 where"+ queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate +"' limit 20000000";   
	  
	    //Divide count in different limits 
	
	  
	  List<String> Query = new ArrayList();
	  


	    System.out.println(querya1);
	    
	    final long startTime2 = System.currentTimeMillis();
		
	    
	    CSVResult csvResult1 = null;
		try {
			csvResult1 = AggregationModule.getCsvResult(false, querya1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    final long endTime2 = System.currentTimeMillis();
		
	    List<String> headers = csvResult1.getHeaders();
	    List<String> lines = csvResult1.getLines();
	    
	    
	    String count = lines.get(0);
	    Double countv1 = Double.parseDouble(count);
	    Double n = 0.0;
	    
	    
	    if(countv1 >= 100000 && countv1 <= 120000)
	       n=10.0;
	    
	    if(countv1 <= 100000 && countv1 > 100)
           n=10.0;	    
	   
	    if(countv1 <= 100)
	    	n=1.0;
	    
	    if(countv1 == 0 || countv1 > 50000)
	    {
	    	
	    	return pubreport;
	    	
	    }
	    
	    Double total_length = countv1 - 0;
	    Double subrange_length = total_length/n;	
	    
	    Double current_start = 0.0;
	    for (int i = 0; i < n; ++i) {
	      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
	      Double startlimit = current_start;
	      Double finallimit = current_start + subrange_length;
	      Double index = startlimit +1;
	      if(countv1 == 1)
	    	  index=0.0;
	      String query = "SELECT distinct(cookie_id) FROM enhanceduserdatabeta1 where "+queryfilterbuilder + " and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' Order by cookie_id limit "+index.intValue()+","+finallimit.intValue();  	
		  System.out.println(query);
	  //    Query.add(query);
	      current_start += subrange_length;
	      Query.add(query);
	     
	    }
	    
	    
	    	
	    
	  
	  ExecutorService executorService = Executors.newFixedThreadPool(2000);
        
       List<Callable<FastMap<String,Double>>> lst = new ArrayList<Callable<FastMap<String,Double>>>();
    
       for(int i=0 ; i < Query.size(); i++ ){
       lst.add(new AudienceSegmentQueryExecutionThreads(Query.get(i),client,searchDao));
    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
        
       // returns a list of Futures holding their status and results when all complete
       lst.add(new SubcategoryQueryExecutionThreads(Query.get(i),client,searchDao));
   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
       }
       
       
       List<Future<FastMap<String,Double>>> maps = executorService.invokeAll(lst);
        
       System.out.println(maps.size() +" Responses recieved.\n");
        
       for(Future<FastMap<String,Double>> task : maps)
       {
    	   try{
           if(task!=null)
    	   System.out.println(task.get().toString());
    	   }
    	   catch(Exception e)
    	   {
    		   e.printStackTrace();
    		   continue;
    	   }
    	    
    	   
    	   }
        
       /* shutdown your thread pool, else your application will keep running */
       executorService.shutdown();
	  
	
	  //  //System.out.println(headers1);
	 //   //System.out.println(lines1);
	    
	    
       
       FastMap<String,Double> audiencemap = new FastMap<String,Double>();
       
       FastMap<String,Double> subcatmap = new FastMap<String,Double>();
       
       Double count1 = 0.0;
       
       Double count2 = 0.0;
       
       String key ="";
       String key1 = "";
       Double value = 0.0;
       Double vlaue1 = 0.0;
       
	    for (int i = 0; i < maps.size(); i++)
	    {
	    
	    	if(maps!=null && maps.get(i)!=null){
	        FastMap<String,Double> map = (FastMap<String, Double>) maps.get(i).get();
	    	
	       if(map.size() > 0){
	       
	       if(map.containsKey("audience_segment")==true){
	       for (Map.Entry<String, Double> entry : map.entrySet())
	    	 {
	    	  key = entry.getKey();
	    	  key = key.trim();
	    	  value=  entry.getValue();
	    	if(key.equals("audience_segment")==false) { 
	    	if(audiencemap.containsKey(key)==false)
	    	audiencemap.put(key,value);
	    	else
	    	{
	         count1 = audiencemap.get(key);
	         if(count1!=null)
	         audiencemap.put(key,count1+value);	
	    	}
	      }
	    }
	  }   

	       if(map.containsKey("subcategory")==true){
	       for (Map.Entry<String, Double> entry : map.entrySet())
	    	 {
	    	   key = entry.getKey();
	    	   key = key.trim();
	    	   value=  entry.getValue();
	    	if(key.equals("subcategory")==false) {    
	    	if(subcatmap.containsKey(key)==false)
	    	subcatmap.put(key,value);
	    	else
	    	{
	         count1 = subcatmap.get(key);
	         if(count1!=null)
	         subcatmap.put(key,count1+value);	
	    	}
	    }  
	    	
	   }
	      
	     	       }
	           
	       } 
	    
	    	} 	
	   }    
	    
	    String subcategory = null;
	   
	    if(audiencemap.size()>0){
	   
	    	for (Map.Entry<String, Double> entry : audiencemap.entrySet()) {
	    	//System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
	    

	        PublisherReport obj = new PublisherReport();
	        
	   //     String[] data = ((String)lines.get(i)).split(",");
	        
	     //   if(data[0].trim().toLowerCase().contains("festivals"))
	      //  obj.setAudience_segment("");
	      //  else
	        obj.setAudience_segment( entry.getKey());	
	       // obj.setCount(String.valueOf(entry.getValue()));
	      
	        if ((!entry.getKey().equals("tech")) && (!entry.getKey().equals("india")) && (!entry.getKey().trim().toLowerCase().equals("foodbeverage")) )
	        {
	         for (Map.Entry<String, Double> entry1 : subcatmap.entrySet()) {
	        	 
	        	    
	        	 
	        	 PublisherReport obj1 = new PublisherReport();
	            
	           
	            if (entry1.getKey().contains(entry.getKey()))
	            {
	            //  String substring = "_" + entry.getKey() + "_";
	                subcategory = entry1.getKey();
	           //   if(data[0].trim().toLowerCase().contains("festivals"))
	           //   obj1.setAudience_segment("");
	           //   else
	        
	              //System.out.println(" \n\n\n Key : " + subcategory + " Value : " + entry1.getValue());  
	              obj.setSubcategory(subcategory);
	              obj.setCount(String.valueOf(entry1.getValue()));
	            //  obj.getAudience_segment_data().add(obj1);
	            }
	            pubreport.add(obj);
	         
	         }
	          
	        }
	      
	    }
	    }
	    return pubreport;
  }
  
  
  
  
  
  
  
  
  
  public List<PublisherReport> gettimeofdayChannel(String startdate, String enddate, String channel_name)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> countPinCodeChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = "SELECT COUNT(*)as count,postalcode FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by postalcode";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    //System.out.println(headers);
    //System.out.println(lines);
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	        PublisherReport obj = new PublisherReport();
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        String[] data1 = data[0].split("_");
	        String locationproperties  = citycodeMap.get(data1[0]);
	        obj.setPostalcode(data[0]);
	        obj.setCount(data[1]);
	        obj.setLocationcode(locationproperties);
	        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      
	        pubreport.add(obj);
	      }
	    }
    return pubreport;
  }
  
  public List<PublisherReport> countLatLongChannel(String startdate, String enddate, String channel_name)
    throws CsvExtractorException, Exception
  {
    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
    String query = String.format("SELECT COUNT(*)as count,latitude_longitude FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by latitude_longitude", new Object[] { "enhanceduserdatabeta1" });
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    //System.out.println(headers);
    //System.out.println(lines);
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        String[] dashcount = data[0].split("_");
        if ((dashcount.length == 3) && (data[0].charAt(data[0].length() - 1) != '_'))
        {
          if (!dashcount[2].isEmpty())
          {
            obj.setLatitude_longitude(data[0]);
            obj.setCount(data[1]);
            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
          }
          pubreport.add(obj);
        }
      }
    }
    return pubreport;
  }
  
  public List<PublisherReport> gettimeofdayQuarterChannel(String startdate, String enddate, String channel_name)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='4h')";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> gettimeofdayDailyChannel(String startdate, String enddate, String channel_name)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1d')";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> getdayQuarterdataChannel(String startdate, String enddate, String channel_name)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*),QuarterValue from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY QuarterValue";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if (data[0].equals("quarter1")) {
          data[0] = "quarter1 (00 - 04 AM)";
        }
        if (data[0].equals("quarter2")) {
          data[0] = "quarter2 (04 - 08 AM)";
        }
        if (data[0].equals("quarter3")) {
          data[0] = "quarter3 (08 - 12 AM)";
        }
        if (data[0].equals("quarter4")) {
          data[0] = "quarter4 (12 - 16 PM)";
        }
        if (data[0].equals("quarter5")) {
          data[0] = "quarter5 (16 - 20 PM)";
        }
        if (data[0].equals("quarter6")) {
          data[0] = "quarter6 (20 - 24 PM)";
        }
        obj.setTime_of_day(data[0]);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  
  public static List<String> processList(List<String> lines)
  {
	  
	  
	  List<String> lines1 = new ArrayList<String>();
FastMap<String,Integer> aggregatedMap = new FastMap<String,Integer>();  
if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
{
  for (int i = 0; i < lines.size(); i++)
  {
	 try{ 
	 String[] data = lines.get(i).split(",");
     if(aggregatedMap.containsKey(data[0])==false)
	 aggregatedMap.put(data[0],1);
     else
    	 aggregatedMap.put(data[0], aggregatedMap.get(data[0])+1);
	 }
	 catch(Exception e)
	 {
		 continue;
		 
	 }
	 
	 }
}
  
  for(Map.Entry<String, Integer> entry: aggregatedMap.entrySet()){
	  lines1.add(entry.getKey()+","+entry.getValue());
	  
  }
  return lines1;
  
  } 
  
  
  public static List<String> processList1(List<String> lines)
  {
	  
	  
	  List<String> lines1 = new ArrayList<String>();
FastMap<String,Integer> aggregatedMap = new FastMap<String,Integer>();  
if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
{
  for (int i = 0; i < lines.size(); i++)
  {
	 try{ 
	 String[] data = lines.get(i).split(",");
     if(aggregatedMap.containsKey(data[0]+"@"+data[1])==false)
	 aggregatedMap.put(data[0]+"@"+data[1],1);
     else
    	 aggregatedMap.put(data[0]+"@"+data[1], aggregatedMap.get(data[0]+"@"+data[1])+1);
	 }
	 catch(Exception e)
	 {
		 continue;
		 
	 }
	 
	 }
}
  
  for(Map.Entry<String, Integer> entry: aggregatedMap.entrySet()){
	  String []parts = entry.getKey().split("@");
	  lines1.add(parts[0]+","+parts[1]+","+entry.getValue());
	  
  }
  return lines1;
  
  }  
  
  public static List<PublisherReport> SessionPageDepthChannel(String startdate, String enddate, String channel_name)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "SELECT session_id,referrer FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by session_id,referrer";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    //System.out.println(headers);
		    //System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    Map<String,Integer> sessiondepthMap = new HashMap<String,Integer>();
          Map<String,List<String>> depthSessionMap = new HashMap<String,List<String>>();
		    lines = processList(lines);
        
          Integer value = 0;
          for(Integer i=1; i < 21; i++){
		    	
		    	sessiondepthMap.put(i.toString(),0);
		    	
		    	
		    }
		    
		      sessiondepthMap.put("20+",0);
		      
		      
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
			      for (int i = 0; i < lines.size(); i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			        String[] data = ((String)lines.get(i)).split(",");
			        Integer data1 = Integer.parseInt(data[1]);
			        
			        if(sessiondepthMap.containsKey(data1.toString())){
			        	
			        	value  =  sessiondepthMap.get(data1.toString());
			        	sessiondepthMap.put(data1.toString(),value+1);
			        	
			        	
			        	
			        	
			        	
			        }
			        else{
			        	
			        	value = sessiondepthMap.get("20+");
			        	sessiondepthMap.put("20+",value+1);
			        	
			        	
			        }
			        	String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			      
			        pubreport.add(obj);
			      }
			    }
		   
		   
            for (Map.Entry<String, Integer> entry : sessiondepthMap.entrySet())
		    {
		        System.out.println(entry.getKey() + "," + entry.getValue());
		    }

            
            pubreport.clear();
            for (Map.Entry<String, Integer> entry : sessiondepthMap.entrySet())
			    {
			        
            	    PublisherReport obj = new PublisherReport();
			        String key = entry.getKey();
			        if(key!=null && !key.isEmpty()){
			        obj.setSessionPageDepth(entry.getKey());
			        obj.setCount(entry.getValue().toString());
			       
			        
			        
			        Random random = new Random();	
			        Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
			        
			        
			        
			        obj.setTotalvisits(randomNumber.toString());
			        Random r = new Random();
			        Double random1 = 1 + r.nextDouble() * (4 - 1);
			        Double random2 = NestedJSON5.round(random1, 2);
			        
			        obj.setSessioncomparison(random2.toString());
                    if(entry.getValue().toString().equals("0")){
                    	obj.setTotalvisits("0");
                    	obj.setSessioncomparison("0");
                    }
                    
                    
			        pubreport.add(obj);
			    }
			    }
		    
          Double  total = 0.0;
	      Double  share = 0.0;
	      Double maxTotal = 0.0; 
	      Double scaledshare = 0.0;
	      
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
 	    	    {
 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
 	    	    }
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	              scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	 
	      	  pubreport.get(i).setShare(share.toString());
	      	  pubreport.get(i).setScaledShare(scaledshare.toString());
	        }
		   
	         
	         for(int i=0;i<pubreport.size();i++){    
  	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(numberFormat.format(count)); 
		       
          }
	         
	         
	         return pubreport;
		  }


public List<PublisherReport> SessionFrequencyChannel(String startdate, String enddate, String channel_name)
		    throws CsvExtractorException, Exception
		  {
		   // //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "Select cookie_id,session_id FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by cookie_id,session_id";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    //System.out.println(headers);
		    //System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		   
		    
		    Map<String,Integer> sessionFrequencyMap = new HashMap<String,Integer>();
          Map<String,List<String>> FrequencySessionMap = new HashMap<String,List<String>>();
		    lines = processList(lines);
        
          Integer value = 0;
          for(Integer i=1; i < 205; i++){
		    	
		    	sessionFrequencyMap.put(i.toString(),0);
		    	
		    	
		    }
		    
		      sessionFrequencyMap.put("205",0);
		 //     sessionFrequencyMap.put("15-25",0);
		   //   sessionFrequencyMap.put("25-50",0);
		     // sessionFrequencyMap.put("51-100",0);
		    //  sessionFrequencyMap.put("101-200",0);
		     // sessionFrequencyMap.put("200+",0);      
		     		    
		    
		      
			    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        Integer data1 = Integer.parseInt(data[1]);
				        
				        if(sessionFrequencyMap.containsKey(data1.toString())){
				        	
				        	value  =  sessionFrequencyMap.get(data1.toString());
				        	sessionFrequencyMap.put(data1.toString(),value+1);
				        	
				        	
				        	
				        	
				        	
				        }
				        else{
				        	
				        	value = sessionFrequencyMap.get("205");
				        	sessionFrequencyMap.put("205",value+1);
				        	
				        	
				        }
				        	String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				      
				        pubreport.add(obj);
				      }
				    }
			   
			   
	              for (Map.Entry<String, Integer> entry : sessionFrequencyMap.entrySet())
			    {
			        System.out.println(entry.getKey() + "," + entry.getValue());
			    }


				    Map<String,Integer> FinalMap = new FastMap<String,Integer>();
				    FinalMap.put("1", 0);
				    FinalMap.put("2", 0);
				    FinalMap.put("3", 0);
				    FinalMap.put("4", 0);
				    FinalMap.put("5", 0);
				    FinalMap.put("6", 0);
				    FinalMap.put("7", 0);
				    FinalMap.put("8", 0);
				    FinalMap.put("9-14", 0);
				    FinalMap.put("15-25", 0);
				    FinalMap.put("25-50", 0);
				    FinalMap.put("51-100", 0);
				    FinalMap.put("101-200", 0);
				    FinalMap.put("200+", 0);
				    Integer value1 = 0;
				    
				    for (Map.Entry<String, Integer> entry : sessionFrequencyMap.entrySet())
				    {
				         if(Integer.parseInt(entry.getKey()) == 1){
				        	 value1 = FinalMap.get("1");
				        	 FinalMap.put("1", value1+entry.getValue());
				         }
				    
				         if(Integer.parseInt(entry.getKey()) == 2){
				        	 value1 = FinalMap.get("2");
				        	 FinalMap.put("2", value1+entry.getValue());
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 3){
				        	 value1 = FinalMap.get("3");
				        	 FinalMap.put("3", value1+entry.getValue());
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 4){
				        	 value1 = FinalMap.get("4");
				        	 FinalMap.put("4", value1+entry.getValue());
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 5){
				        	 value1 = FinalMap.get("5");
				        	 FinalMap.put("5", value1+entry.getValue());
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 6){
				        	 value1 = FinalMap.get("6");
				        	 FinalMap.put("6", value1+entry.getValue());
				         }
				         

				         if(Integer.parseInt(entry.getKey()) == 7){
				        	 value1 = FinalMap.get("7");
				        	 FinalMap.put("7", value1+entry.getValue());
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 8){
				        	 value1 = FinalMap.get("8");
				        	 FinalMap.put("8", value1+entry.getValue());
				         }
				         
				         
				         
				         
				         if(Integer.parseInt(entry.getKey()) > 9  && Integer.parseInt(entry.getKey()) <= 14 ){
			            	 value1 = FinalMap.get("9-14");
				        	 FinalMap.put("9-14", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 14  && Integer.parseInt(entry.getKey()) <= 25){
				        	 value1 = FinalMap.get("15-25");
				        	 FinalMap.put("15-25", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 25  && Integer.parseInt(entry.getKey()) <= 50){
				        	 value1 = FinalMap.get("25-50");
				        	 FinalMap.put("25-50", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 50  && Integer.parseInt(entry.getKey()) <= 100){
				        	 value1 = FinalMap.get("51-100");
				        	 FinalMap.put("51-100", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 100 && Integer.parseInt(entry.getKey()) <= 200 ){
				        	 value1 = FinalMap.get("101-200");
				        	 FinalMap.put("101-200", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 200 ){
				        	 value1 = FinalMap.get("200+");
				        	 FinalMap.put("200+", value1+entry.getValue());
				         }
				         
				         
				         }
			    
				    
				    pubreport.clear();
				    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
				    {
				        PublisherReport obj = new PublisherReport();
				        String key = entry.getKey();
				        if(key!=null && !key.isEmpty()){
				        obj.setSessionFrequency(entry.getKey());
				        obj.setCount(entry.getValue().toString());
				     //   obj.setSessionPageDepth(entry.getKey());
				      //  obj.setCount(entry.getValue().toString());
				       
				        Random random = new Random();	
				        Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
				        obj.setTotalvisits(randomNumber.toString());
				        Random r = new Random();
				        Double random1 = 1 + r.nextDouble() * (4 - 1);
	                    Double random2 = NestedJSON5.round(random1, 2);
				        
				        obj.setSessioncomparison(random2.toString());
	                    if(entry.getValue().toString().equals("0")){
	                    	obj.setTotalvisits("0");
	                    	obj.setSessioncomparison("0");
	                    }
	                    
	                    
	                    pubreport.add(obj);
				    }
				    } 
			    
				    
			          Double  total = 0.0;
				      Double  share =0.0;
				      Double maxTotal = 0.0; 
				      Double scaledshare = 0.0;
				      
				      
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			 	    	    {
			 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
			 	    	    }
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	
				      	        	 
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	 
				      	        	 
				      	  pubreport.get(i).setShare(share.toString());
				      	  
				        }
					    
				         
				         for(int i=0;i<pubreport.size();i++){
					      	  
					      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      		  total=total+Double.parseDouble(pubreport.get(i).getTotalvisits());
					           
					              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					            
					             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					      		if(Double.parseDouble(pubreport.get(i).getTotalvisits())> maxTotal)
				 	    	    {
				 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getTotalvisits());
				 	    	    }
					      	  
					        }
					                 
					         for(int i=0;i<pubreport.size();i++){
					      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/total)*100,2);
					      	        
					      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					      	      
					      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					      	
					      	        	 
					      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/maxTotal)*100,2);
					      	        	 
					      	        	pubreport.get(i).setScaledsharetotalvisits(scaledshare.toString());	      	 
					      	        	 
					      	           pubreport.get(i).setSharetotalvisits(share.toString());
					      	  
					        }
						    
				         
				         
				         
				         
				    
				         for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }
				    
				    
				    return pubreport;
		  }



public List<PublisherReport> SessionRecencyChannel(String startdate, String enddate, String channel_name)
	    throws CsvExtractorException, Exception
	  {
	   
               List<PublisherReport> pubreport = new ArrayList();

			    Map<String,Integer> FinalMap = new FastMap<String,Integer>();
			    FinalMap.put("1", 2180);
			    FinalMap.put("2", 1245);
			    FinalMap.put("3", 286);
			    FinalMap.put("4", 356);
			    FinalMap.put("5", 568);
			    FinalMap.put("6", 124);
			    FinalMap.put("7", 567);
			    FinalMap.put("8-14", 142);
			    FinalMap.put("15-30",123);
			    FinalMap.put("31-60", 0);
			    FinalMap.put("61-120", 0);
			    FinalMap.put("121-364", 0);
			    
			    Integer value1 = 0;
			    
			 
			    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
			    {
			        PublisherReport obj = new PublisherReport();
			        String key = entry.getKey();
			        if(key!=null && !key.isEmpty()){
			        obj.setSessionRecency(entry.getKey());
			        obj.setCount(entry.getValue().toString());
			     //   obj.setSessionPageDepth(entry.getKey());
			      //  obj.setCount(entry.getValue().toString());
			       
			        Random random = new Random();	
			        Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
			        obj.setTotalvisits(randomNumber.toString());
			        Random r = new Random();
			        Double random1 = 1 + r.nextDouble() * (4 - 1);
			        Double random2 = NestedJSON5.round(random1, 2);
			        
			        obj.setSessioncomparison(random2.toString());
                    if(entry.getValue().toString().equals("0")){
                    	obj.setTotalvisits("0");
                    	obj.setSessioncomparison("0");
                    }
                    
                    
                    pubreport.add(obj);
			    }
			    } 
		    
		   
			    
		          Double  total = 0.0;
			      Double  share =0.0;
			      Double maxTotal = 0.0; 
			      Double scaledshare = 0.0;
			      
			        for(int i=0;i<pubreport.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      	  
			      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	 	    	    }
			        }
			                 
			         for(int i=0;i<pubreport.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
			      	        	 
			      	        	pubreport.get(i).setScaledShare(scaledshare.toString());    	 
			      	        	 
			      	  pubreport.get(i).setShare(share.toString());
			      	  
			        }
				   
			         for(int i=0;i<pubreport.size();i++){    
		   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				          pubreport.get(i).setCount(numberFormat.format(count)); 
				       
		           }
			    
			    
			    
			    return pubreport;
	  }



















public List<PublisherReport> SessionDurationChannel(String startdate, String enddate, String channel_name)
		    throws CsvExtractorException, Exception
		  {
		   // //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query1 = "SELECT  session_id,max(request_time) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by session_id";
		    CSVResult csvResult = getCsvResult(false, query1);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<String> lines2 = new ArrayList<String>();
		    //System.out.println(headers);
		    //System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		   
		    FastMap<String,String> aggregatedMap = new FastMap<String,String>();  
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		    	 try{ 
		    	 String[] data = lines.get(i).split(",");
		     
		    	 aggregatedMap.put(data[0],data[1]);
		    	 }
		    	 
		    	 catch(Exception e)
		    	 {
		    		 continue;
		    		 
		    	 }
		    	 
		    	 }
		    }		    
		    
		    
		    String query2 = "SELECT  session_id,min(request_time) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by session_id";
		    CSVResult csvResult1 = getCsvResult(false, query2);
		    List<String> headers1 = csvResult1.getHeaders();
		    List<String> lines1 = csvResult1.getLines();
		    //System.out.println(headers);
		    //System.out.println(lines);
		    List<PublisherReport> pubreport1 = new ArrayList();
		    
		    FastMap<String,String> aggregatedMap1 = new FastMap<String,String>();  
		    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines1.size(); i++)
		      {
		    	 try{ 
		    	 String[] data = lines1.get(i).split(",");
		     
		    	 aggregatedMap1.put(data[0],data[1]);
		    	 }
		    	 
		    	 catch(Exception e)
		    	 {
		    		 continue;
		    		 
		    	 }
		    	 
		    	 }
		    }
		    
		   
		    
		    FastMap<String,String> aggregatedMap2 = new FastMap<String,String>();
		    
		    for (Map.Entry<String,String> entry : aggregatedMap.entrySet())
		    {
		        String t1 = aggregatedMap.get(entry.getKey());
		        		
		        String t2 = aggregatedMap1.get(entry.getKey());
		

		        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		        Date parse = sdf.parse(t1);
		        Date parse2 = sdf.parse(t2);

		        Long diff = parse.getTime() - parse2.getTime();
		     
		        diff = diff/1000000;
		        
		        
		        aggregatedMap2.put(entry.getKey(),diff.toString());
		      		    
		    }
		    
		    for(Map.Entry<String, String> entry: aggregatedMap2.entrySet()){
		  	  lines2.add(entry.getKey()+","+entry.getValue());
		  	  
		    }
		    
		    Map<String,Integer> sessionDurationMap = new HashMap<String,Integer>();
          Map<String,List<String>> DurationSessionMap = new HashMap<String,List<String>>();
		   
      
        Integer value = 0;
        for(Integer i=1; i < 100000; i++){
		    	
		    	sessionDurationMap.put(i.toString(),0);
		    	
		    	
		    }
		    
		      sessionDurationMap.put("100000",0);
		 //     sessionFrequencyMap.put("15-25",0);
		   //   sessionFrequencyMap.put("25-50",0);
		     // sessionFrequencyMap.put("51-100",0);
		    //  sessionFrequencyMap.put("101-200",0);
		     // sessionFrequencyMap.put("200+",0);      
		     		    
		    
		      
			    if ((lines2 != null) && (!lines2.isEmpty()) && (!((String)lines2.get(0)).isEmpty())) {
				      for (int i = 0; i < lines2.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines2.get(i)).split(",");
				        Integer data1 = Integer.parseInt(data[1]);
				        
				        if(sessionDurationMap.containsKey(data1.toString())){
				        	
				        	value  =  sessionDurationMap.get(data1.toString());
				        	sessionDurationMap.put(data1.toString(),value+1);
				        	
				        	
				        	
				        	
				        	
				        }
				        else{
				        	
				        	value = sessionDurationMap.get("100000");
				        	sessionDurationMap.put("100000",value+1);
				        	
				        	
				        }
				        	String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				      
				        pubreport.add(obj);
				      }
				    }
			   
			   
	              for (Map.Entry<String, Integer> entry : sessionDurationMap.entrySet())
			    {
			         if(entry.getValue()>0)
	            	  System.out.println(entry.getKey() + "," + entry.getValue());
			    }

			    Map<String,Integer> FinalMap = new FastMap<String,Integer>();
			    FinalMap.put("0-10 seconds", 0);
			    FinalMap.put("11-30 seconds", 0);
			    FinalMap.put("31-60 seconds", 0);
			    FinalMap.put("61-180 seconds", 0);
			    FinalMap.put("181-600 seconds", 0);
			    FinalMap.put("601-1800 seconds", 0);
			    FinalMap.put("1800+ seconds", 0);
			    
			    Integer value1 = 0;
			    
			    for (Map.Entry<String, Integer> entry : sessionDurationMap.entrySet())
			    {
			         if(Integer.parseInt(entry.getKey()) <= 10){
			        	 value1 = FinalMap.get("0-10 seconds");
			        	 FinalMap.put("0-10 seconds", value1+entry.getValue());
			         }
			    
			         if(Integer.parseInt(entry.getKey()) > 10  && Integer.parseInt(entry.getKey()) <= 30 ){
		            	 value1 = FinalMap.get("11-30 seconds");
			        	 FinalMap.put("11-30 seconds", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 30  && Integer.parseInt(entry.getKey()) <= 60){
			        	 value1 = FinalMap.get("31-60 seconds");
			        	 FinalMap.put("31-60 seconds", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 60  && Integer.parseInt(entry.getKey()) <= 180){
			        	 value1 = FinalMap.get("61-180 seconds");
			        	 FinalMap.put("61-180 seconds", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 180  && Integer.parseInt(entry.getKey()) <= 600){
			        	 value1 = FinalMap.get("181-600 seconds");
			        	 FinalMap.put("181-600 seconds", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 601 && Integer.parseInt(entry.getKey()) <= 1800 ){
			        	 value1 = FinalMap.get("601-1800 seconds");
			        	 FinalMap.put("601-1800 seconds", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 1800 ){
			        	 value1 = FinalMap.get("1800+ seconds");
			        	 FinalMap.put("1800+ seconds", value1+entry.getValue());
			         }
			         
			         
			         }
			    
			    pubreport.clear();
			    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
			    {
			        PublisherReport obj = new PublisherReport();
			        String key = entry.getKey();
			        if(key!=null && !key.isEmpty()){
			        obj.setSessionDuration(entry.getKey());
			        obj.setCount(entry.getValue().toString());
			      //  obj.setSessionPageDepth(entry.getKey());
			      //  obj.setCount(entry.getValue().toString());
			       
			        Random random = new Random();	
			        Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
			        obj.setTotalvisits(randomNumber.toString());
			        
			        Random r = new Random();
			        Double random1 = 1 + r.nextDouble() * (4 - 1);
			        Double random2 = NestedJSON5.round(random1, 2);
			        
			        obj.setSessioncomparison(random2.toString());
			        
                    if(entry.getValue().toString().equals("0")){
                    	obj.setTotalvisits("0");
                    	obj.setSessioncomparison("0");
                    }
			        pubreport.add(obj);
			    }
			    
			    } 
			    
			    
			    
		          Double  total = 0.0;
			      Double  share =0.0;
			      Double maxTotal = 0.0; 
			      Double scaledshare = 0.0;  
			      
			        for(int i=0;i<pubreport.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      	  
			      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
 	    	    }
			        }
			                 
			         for(int i=0;i<pubreport.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	    	    
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
			      	        	 
			      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	 
			      	        	 
			      	        	 
			      	  pubreport.get(i).setShare(share.toString());
			      	  
			         }
			
			    
			         for(int i=0;i<pubreport.size();i++){    
		   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				          pubreport.get(i).setCount(numberFormat.format(count)); 
				       
		           } 
			    
			    
			    
			    return pubreport;
		  }


  
  
  
  
  public List<PublisherReport> getQueryFieldChannel(String queryfield,String startdate, String enddate, String channel_name, String filter, String limit)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
		  
  List<PublisherReport> pubreportv1 = new ArrayList();	  
  Map<String,String> TagAggregation = new FastMap<String,String>();   
	  
     if(queryfield.equals("postsPublished"))
     {
    	 pubreportv1.clear();
    	 
    	 pubreportv1 = getPostsPublishedChannel(startdate, enddate, channel_name);
    	 
    	 return pubreportv1;
    	 
     }
  
  
     if(queryfield.equals("postsPublishedDatewise"))
     {
    	 pubreportv1.clear();
    	 
    	 pubreportv1 = getPostsPublishedChannelDatewise(startdate, enddate, channel_name);
    	 
    	 return pubreportv1;
    	 
     }
  
 
	  if(queryfield.equals("visitorType")){
		
		   List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
	       List<PublisherReport> pubreport2 = new ArrayList<PublisherReport>();
	       List<PublisherReport> pubreport3 = new ArrayList<PublisherReport>();
	    	

	    	  AggregationModule module =  AggregationModule.getInstance();
	    	    try {
	    			module.setUp();
	    		} catch (Exception e1) {
	    			// TODO Auto-generated catch block
	    			e1.printStackTrace();
	    		}
	    	
	    	
			pubreport1=module.countUsersChannelDatewise(startdate, enddate, channel_name, filter); 
	        
	   
	    
	    
	    	 
			
	       
	       
	        Double total = 0.0;
	        Double share =0.0;
	        Double maxTotal = 0.0; 
	        Double scaledshare = 0.0;
	        
	        for(int i=0;i<pubreport1.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport1.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		 if(Double.parseDouble(pubreport1.get(i).getCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(pubreport1.get(i).getCount());
   	    }
   	    
	      	  
	        }
	                 
	         for(int i=0;i<pubreport1.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport1.get(i).setScaledShare(scaledshare.toString());
	      	  
	      	        	pubreport1.get(i).setShare(share.toString());
	      	  
	        }
	        
	        
	        

      		for(int i=0;i<pubreport1.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
		          pubreport1.get(i).setCount(numberFormat.format(count)); 
		       
          } 
	        
	        
	        return pubreport1;
	 		
  
  }
	  
	  
	  
	  
	  
	  
	  
	  
	  
		if (queryfield.equals("Author")) {
            queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
            queryfield =  "sourceUrl";
	} 
	  
	  
	  
	  
	  String query = "";        
	  
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
			     
	        	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	        
	            if(queryfield.equals("refcurrentoriginal") && limit != null && !limit.isEmpty()){
	            	
	            	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" limit "+limit;
	    	        
	            }
	        
	        }
			if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
			
				
				 if(queryfield.equals("refcurrentoriginal") && limit != null && !limit.isEmpty()){
		            	
					 
					 query= "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" limit "+limit;    	
			            	
				 }
				query= "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			}
			
			
			
			
			if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
			

				 if(queryfield.equals("refcurrentoriginal") && limit != null && !limit.isEmpty()){
		            	
					 
					 query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+" limit "+limit;  
					    
			            	
				 }
				
				query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
    
			}
    System.out.println(query);
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    List<PublisherReport> pubreport1  = new ArrayList<PublisherReport>();
    
 
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        try{
    	 
    	  PublisherReport obj = new PublisherReport();
    	  List<PublisherReport> obj1 = new ArrayList<PublisherReport>();
        String[] data = ((String)lines.get(i)).split(",");
     //   String demographicproperties = demographicmap.get(data[0]);
            
            
        
            if(queryfield.equals("gender")){
        	
            	String genderId = GenderMap1.get(data[0]);
        		obj.setGenderId(genderId);
            	
            	obj.setGender(capitalizeString(data[0]));
        
            }
            if(queryfield.equals("state"))
            	{
            	
            	
            	
            	
            	data[0]=data[0].replace("_", " ");
            	String stateId = StateMap1.get(data[0]);
        		obj.setStateId(stateId);
            	data[0] = capitalizeString(data[0]);
            	obj.setState(data[0]);
            	}
            
            
            if(queryfield.equals("country"))
        	  {
            	
            	data[0]=data[0].replace("_", " ");
            	String countryId = CountryMap1.get(data[0]);
        		obj.setCountryId(countryId);
            	data[0] = capitalizeString(data[0]);
            	obj.setCountry(data[0]);
             	}
        
            
            if(queryfield.equals("device")){
        	 
            	String deviceId = deviceMap1.get(data[0]);
        		obj.setDeviceId(deviceId);
            	
            	
            	obj.setDevice_type(capitalizeString(data[0]));
            }
            

            if(queryfield.equals("section")){
        	
            	if(data[0].toLowerCase().equals("enterainment"))	
	        		 data[0]="Entertainment";
	        	 
	        	if(AggregationModule.sectionMap1.get(capitalizeFirstLetter(data[0]))!=null)
            	obj.setSectionid(AggregationModule.sectionMap1.get(capitalizeFirstLetter(data[0])));
	        	obj.setSection(capitalizeFirstLetter(data[0]));
        	
            }

            if(queryfield.equals("referrerType"))
        	{
            	
            	String referrerTypeId = referrerTypeMap1.get(data[0]);
        		obj.setReferrerTypeId(referrerTypeId);
            	
            	data[0] = capitalizeFirstLetter(data[0]);
            	obj.setReferrerSource(data[0]);
        	}
            
            
        	
        	if(queryfield.equals("city")){
        		try{
        		String locationproperties = citycodeMap.get(data[0]);
		        data[0]=data[0].replace("_"," ").replace("-"," ");
		        data[0]=capitalizeString(data[0]);
		        obj.setCity(capitalizeString(data[0]));
		        System.out.println(data[0]);
		        obj.setLocationcode(locationproperties);
        		}
        		catch(Exception e){
        			continue;
        		}
        		
        		
        		
        		} 
        	if(queryfield.equals("audience_segment")){
        		String audienceSegment = audienceSegmentMap.get(data[0]);
        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
        		obj.setAudience_segment(audienceSegment);
        		obj.setAudienceSegmentCode(audienceSegmentCode);
        		}
        		else
        	    obj.setAudience_segment(data[0]);
        	}
        	if(queryfield.equals("sourceUrl")){
        		String urlId = UrlMap1.get(data[0]);
        		obj.setUrlId(urlId);

        		obj.setReferrerMasterDomain(data[0]);
        	}	
        	if(queryfield.equals("agegroup"))
	             {
        		 
        		String ageId = AgeMap1.get(data[0]);
        		obj.setAgeId(ageId);
        		 
        		data[0]=data[0].replace("_","-");
        		 data[0]=data[0]+ " Years";
        		 if(data[0].contains("medium")==false)
        		 obj.setAge(data[0]);
	             }
            	
        	if(queryfield.equals("incomelevel")){
	          
        		String incomelevelId = IncomeMap1.get(data[0]);
        		obj.setIncomeId(incomelevelId);
        		obj.setIncomelevel(capitalizeString(data[0]));
        	}
         	
        	if(queryfield.equals("ISP")){
        		if(data[0].trim().toLowerCase().equals("_ltd")==false){
        	        data[0] = data[0].replace("_", " ").replace("-", " ");
        			obj.setISP(capitalizeString(data[0]));
        	}
        	}	
            
        	if(queryfield.equals("organisation")){
        
            	if((!data[0].trim().toLowerCase().contains("broadband")) && (!data[0].trim().toLowerCase().contains("communication")) && (!data[0].trim().toLowerCase().contains("cable")) && (!data[0].trim().toLowerCase().contains("telecom")) && (!data[0].trim().toLowerCase().contains("network")) && (!data[0].trim().toLowerCase().contains("isp")) && (!data[0].trim().toLowerCase().contains("hathway")) && (!data[0].trim().toLowerCase().contains("internet")) && (!data[0].trim().toLowerCase().equals("_ltd")) && (!data[0].trim().toLowerCase().contains("googlebot")) && (!data[0].trim().toLowerCase().contains("sify")) && (!data[0].trim().toLowerCase().contains("bsnl")) && (!data[0].trim().toLowerCase().contains("reliance")) && (!data[0].trim().toLowerCase().contains("broadband")) && (!data[0].trim().toLowerCase().contains("tata")) && (!data[0].trim().toLowerCase().contains("nextra"))){
            		data[0] = data[0].replace("_", " ").replace("-", " ");
            		obj.setOrganisation(capitalizeString(data[0]));
            	}
            }
        	
            
            if(queryfield.equals("screen_properties")){
        		
        		obj.setScreen_properties(data[0]);
        		
        	}
            
            if(queryfield.equals("authorName")){
            	obj.setArticleAuthor(data[0]);
        		String authorId = AuthorMap1.get(data[0]);
        		obj.setAuthorId(authorId);
        		
        	}
        	
             if(queryfield.equals("tag")){
            	 if(data[0].toLowerCase().equals("hindibollywood"))	
	        		 data[0]="Bollywood";
	        	 
	        	 if(data[0].toLowerCase().equals("womenlifestyle"))	
	        		 data[0]="Women's Fashion";
	        	        
	        	 
	        	 if(data[0].toLowerCase().equals("hindimusic"))	
	        		 data[0]="Hindi Music";
	        	 
	        	 if(data[0].toLowerCase().equals("healthfitness"))	
	        		 data[0]="Health & Fitness";
	        	 
	        	 if(data[0].toLowerCase().equals("englishhollywood"))	
	        		 data[0]="Hollywood";
	        	 
	        	 if(data[0].toLowerCase().contains("technews"))	
	        		 data[0]="Technology News";
	        	 
	        	 if(data[0].toLowerCase().contains("mcdonald"))	
	        		 data[0]="Fast Food";
	        	 
	        	 if(data[0].toLowerCase().contains("international"))	
	        		 data[0]="International News";
	        	 
	        	
	        	 if(data.length > 2){
	        	 	 
	        		 for(int q=0; q<data.length-1; q++){
	        		      PublisherReport obj2 = new PublisherReport();
	        			 obj2.setArticleTags(data[q]);
	        			 if(AggregationModule.tagMap3.get(data[q])!=null){
	                    	 String tagId = AggregationModule.tagMap3.get(data[q]);
	        	        	 obj2.setTagId(tagId);
	        			 
	        			 }
	        		 
	        		     obj1.add(obj2);
	        		 }
	        	 }
	        	 else{
	        	 obj.setArticleTags(data[0]);
	        	
            	 if(AggregationModule.tagMap3.get(data[0])!=null){
            	 String tagId = AggregationModule.tagMap3.get(data[0]);
	        	 obj.setTagId(tagId);
            	 }
              
             }
             }
            
            
            
            
            
            if(queryfield.equals("system_os")){
        		String osproperties = oscodeMap.get(data[0]);
		        data[0]=data[0].replace("_"," ").replace("-", " ");
		        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        String [] osParts = oscodeMap1.get(osproperties).split(",");
		        obj.setOs(osParts[0]);
		        obj.setOSversion(osParts[1]);
		        obj.setOscode(osproperties);
        	}
         	
        	if(queryfield.equals("modelName")){
        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
	        	
		        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
		        System.out.println(mobiledeviceproperties[2]);
		        obj.setDevicecode(mobiledeviceproperties[0]);
		        System.out.println(mobiledeviceproperties[0]);
        	}
         	
        	if(queryfield.equals("brandName")){
	            data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
        		obj.setBrandname(data[0]);
        	}
	          
        	if(queryfield.equals("refcurrentoriginal"))
  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
        	
        	
    
        
        	
        	Integer max = 0;	
        Random random = new Random();	
        Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
        if(queryfield.equals("tag")==true)
            max = (int)Double.parseDouble(data[data.length-1]);
            else
            max = (int)Double.parseDouble(data[1]);
        Integer randomNumber1 = random.nextInt(max) + 1;
        
        if(queryfield.equals("audience_segment"))	
        {
        obj.setCount(data[1]); 	
        obj.setExternalWorldCount(randomNumber.toString());	
        obj.setVisitorCount(randomNumber1.toString());
        obj.setAverageTime("0.0");	
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        
        
        pubreport.add(obj);
        
        }
       
        
        else if(queryfield.equals("agegroup")==true) {
        	
        	if(data[0].contains("medium")==false){
        	//	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
        	        	obj.setCount(data[1]);
        	       
        	      //      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        	      //      obj.setEngagementTime(data[1]);
        	        
        	      //      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        	      //      obj.setVisitorCount(data[1]);
        		String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
                
                
                pubreport.add(obj);
        	}
        }
       
        else if(queryfield.equals("tag")==true) {
        	
        	if(!data[0].isEmpty())
        	{
        		for(int q1=0; q1<obj1.size(); q1++){
        		 obj1.get(q1).setCount(data[data.length-1]);
        		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.get(q1).setChannelName(channel_name1);
        		}
                 
        		
        		
                 pubreport.addAll(obj1);
        		
        	}
        
        
        
        }
        
             else if(queryfield.equals("section")==true) {
        	
            	 if(!data[0].isEmpty())
             	{
            		 obj.setCount(data[1]);
            		 
            		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
                     
                     
                     pubreport.add(obj);
            		 
            		 
            	}
            	 
            	 
            	 
           }
        
       
        	    else{
        	    	
        	    //	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
        	         	obj.setCount(data[1]);
        	        
        	         //    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
        	        //     obj.setEngagementTime(data[1]);
        	         
        	      //       if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
        	       //      obj.setVisitorCount(data[1]);
            		
        	             
        	             if(queryfield.equals("sourceUrl") || queryfield.equals("referrerType")){
        	            	 
        	            	 if(data[0].contains("Social")){
        	           			obj.setLikes("45");
        	           		    obj.setShares("10");
        	           		}		
        	            	 
        	            	 else if(data[0].contains("facebook")){
        	            		 
        	            		 obj.setLikes("45");
         	           		     obj.setShares("10");
        	            	 }
        	            	 
        	            	 
        	            	  else{	
        	           			
        	           			obj.setLikes("0");
        	           			obj.setShares("0");
        	           			
        	           		}		 
        	            	 
        	             }
        	             
        	             
        	             String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
                    
                    
                    pubreport.add(obj);
        	    }
        
        	
        	
        	
        }
        catch(Exception e)
        {
        	continue;
        }
        }
      //System.out.println(headers);
      //System.out.println(lines);
    }
   
    
      if(queryfield.equals("tag")){
    	
    	Double valuev1 = 0.0;
    	
    	for(int i=0; i<pubreport.size(); i++){
    		
    		if(TagAggregation.containsKey(pubreport.get(i).getArticleTags())==false){
	        	
	        	
	        //	valuev1 = TagAggregation.get(pubreport.get(i).getArticleTags());
	        	TagAggregation.put(pubreport.get(i).getArticleTags(),pubreport.get(i).getCount());
	        	
	        	}
	        	
	        
	        else{
	        	
	        	valuev1 = Double.parseDouble(TagAggregation.get(pubreport.get(i).getArticleTags()));
	        	TagAggregation.put(pubreport.get(i).getArticleTags(),new Double(valuev1+(Double.parseDouble(pubreport.get(i).getCount()))).toString());
	        	pubreport.get(i).setCount(new Double(valuev1+(Double.parseDouble(pubreport.get(i).getCount()))).toString());
	        	
		        }	
	        }
    
    	
    	    pubreport.clear();
    
    	 for (Map.Entry<String, String> entry : TagAggregation.entrySet())
		    {
		        System.out.println(entry.getKey() + "," + entry.getValue());
		        PublisherReport obj5 = new PublisherReport();
		        obj5.setArticleTags(entry.getKey());
		        obj5.setCount(entry.getValue());
		        if(AggregationModule.tagMap3.get(entry.getKey())!=null){
	            	 String tagId = AggregationModule.tagMap3.get(entry.getKey());
		        	 obj5.setTagId(tagId);
	            	 }
		        pubreport.add(obj5);
		    }
    	
    	
    	
    	
    	}
    
    
    
    
    
    
    
    
    
    Double total = 0.0;
    Double share = 0.0;
         
    Double maxTotal = 0.0; 
    Double scaledshare = 0.0;
   	      
    
    for(int i=0;i<pubreport.size();i++){
  	  
  	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  		  total=total+Double.parseDouble(pubreport.get(i).getCount());
       
          //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
          //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
        
         //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
         // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
  		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
    	    {
    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
  }
  	  
    }
             
     for(int i=0;i<pubreport.size();i++){
  	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
  	        
  	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
  	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
  	      
  	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
  	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
 	    	    
  	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
  	        	 
  	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	
  	  pubreport.get(i).setShare(share.toString());
  	  
    }
    
    
    
   
    
    
    
    
    if (queryfield.equals("sessiondepth")) {
        
  	  AggregationModule module =  AggregationModule.getInstance();
  	    try {
  			module.setUp();
  		} catch (Exception e1) {
  			// TODO Auto-generated catch block
  			e1.printStackTrace();
  		}
		pubreport=module.SessionPageDepthChannel1(startdate, enddate, channel_name);
	/*
		for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	          pubreport.get(i).setCount(numberFormat.format(count)); 
	       
     }     
		*/
		
		return pubreport;
  }
    
    
    
    if (queryfield.equals("sessionfrequency")) {
        
  	  AggregationModule module =  AggregationModule.getInstance();
  	    try {
  			module.setUp();
  		} catch (Exception e1) {
  			// TODO Auto-generated catch block
  			e1.printStackTrace();
  		}
		pubreport=module.SessionFrequencyChannel1(startdate, enddate, channel_name);
	/*	
		for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	          pubreport.get(i).setCount(numberFormat.format(count)); 
	       
     }     
		*/
		
		return pubreport;
  }
    
    
    if (queryfield.equals("sessionduration")) {
        
    	  AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
  		pubreport=module.SessionDurationChannel1(startdate, enddate, channel_name);
  	/*	
  		for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	          pubreport.get(i).setCount(numberFormat.format(count)); 
	       
     }     
  		*/
  		
  		return pubreport;
    }
    
    
    if (queryfield.equals("sessionrecency")) {
        
    	  AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
  		pubreport=module.SessionRecencyChannel1(startdate, enddate, channel_name);
  		
  	
  		
  		return pubreport;
    }
    
    
    
    
    
    
    if (queryfield.equals("LatLong")) {
        
  	  AggregationModule module =  AggregationModule.getInstance();
  	    try {
  			module.setUp();
  		} catch (Exception e1) {
  			// TODO Auto-generated catch block
  			e1.printStackTrace();
  		}
		pubreport=module.countLatLongChannel(startdate, enddate, channel_name);
		
		
		for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	          pubreport.get(i).setCount(numberFormat.format(count)); 
	       
     }     
		
		return pubreport;
  }
    
    if (queryfield.equals("postalcode")) {
        
    	  AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
  		pubreport=module.countPinCodeChannel(startdate, enddate, channel_name);
  		
  		for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	          pubreport.get(i).setCount(numberFormat.format(count)); 
	       
     }     
  		
  		
  		
  		return pubreport;
    }
      
    if (queryfield.equals("cityOthers")) {
        
  	  AggregationModule module =  AggregationModule.getInstance();
  	    try {
  			module.setUp();
  		} catch (Exception e1) {
  			// TODO Auto-generated catch block
  			e1.printStackTrace();
  		}
		pubreport=module.countCityChannel(startdate, enddate, channel_name, filter);
	
		
		  total = 0.0;
	        share =0.0;
	        maxTotal = 0.0; 
	        scaledshare = 0.0;       
	        
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
   	    	    {
   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
 	    }
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	      	 
	      	        	 
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		
	         for(int i=0;i<pubreport.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(numberFormat.format(count)); 
		       
          }     
		return pubreport;
  }
    
    
    if (queryfield.equals("stateOthers")) {
        
    	  AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
  		pubreport=module.countStateChannel(startdate, enddate, channel_name, filter);
  		
  	  total = 0.0;
      share =0.0;
       maxTotal = 0.0; 
      scaledshare = 0.0;
               
      for(int i=0;i<pubreport.size();i++){
    	  
    	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    		  total=total+Double.parseDouble(pubreport.get(i).getCount());
         
            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
          
           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
    		   if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
  	    	    {
  	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    }
	    
    	  
      }
               
       for(int i=0;i<pubreport.size();i++){
    	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
    	        
    	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
    	      
    	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
    	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
    	        	 scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
    	        	 
    	        	 pubreport.get(i).setScaledShare(scaledshare.toString());	 
    	  
    	        	 pubreport.get(i).setShare(share.toString());
    	  
      }
       for(int i=0;i<pubreport.size();i++){    
       	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	          pubreport.get(i).setCount(numberFormat.format(count)); 
	       
    }     
  		
  		return pubreport;
    }
    
    
    if (queryfield.equals("countryOthers")) {
        
    	  AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
  		pubreport=module.countCountryChannel(startdate, enddate, channel_name, filter);
  	  
  	  total = 0.0;
      share =0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;
     	               
      for(int i=0;i<pubreport.size();i++){
    	  
    	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    		  total=total+Double.parseDouble(pubreport.get(i).getCount());
         
            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
          
           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
    	  
    		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
 	    	    {
 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    }
      }
               
       for(int i=0;i<pubreport.size();i++){
    	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
    	        
    	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
    	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
    	      
    	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
    	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
    	        	 scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
    	        	 
    	        	 pubreport.get(i).setScaledShare(scaledshare.toString());	 
    	  pubreport.get(i).setShare(share.toString());
    	  
      }
  		
       for(int i=0;i<pubreport.size();i++){    
       	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	          pubreport.get(i).setCount(numberFormat.format(count)); 
	       
    }     
  		
  		return pubreport;
    }
    
    
    if (queryfield.equals("newVisitors")) {
        
  	  AggregationModule module =  AggregationModule.getInstance();
  	    try {
  			module.setUp();
  		} catch (Exception e1) {
  			// TODO Auto-generated catch block
  			e1.printStackTrace();
  		}
		pubreport=module.countNewUsersChannelDatewise(startdate, enddate, channel_name,filter); 
		return pubreport;
  }
  
  if (queryfield.equals("returningVisitors")) {
      
  	 AggregationModule module =  AggregationModule.getInstance();
	    try {
			module.setUp();
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		pubreport=module.countReturningUsersChannelDatewise(startdate, enddate, channel_name,filter); 
		return pubreport;
  }
  
  if (queryfield.equals("LoyalVisitors")) {
      
  	 AggregationModule module =  AggregationModule.getInstance();
	    try {
			module.setUp();
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		pubreport=module.countLoyalUsersChannelDatewise(startdate, enddate, channel_name,filter); 
		return pubreport;
  }
  
    
    
    
    
   if(queryfield.equals("visitorType")){
		
        List<PublisherReport> pubreport1a  = new ArrayList<PublisherReport>();
        List<PublisherReport> pubreport2  = new ArrayList<PublisherReport>();
        List<PublisherReport> pubreport3  = new ArrayList<PublisherReport>();
        
	   
    	AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
		
    	pubreport1a=module.countNewUsersChannelDatewise(startdate, enddate, channel_name,filter); 
		
    
		pubreport2=module.countReturningUsersChannelDatewise(startdate, enddate, channel_name,filter); 
		
   
 		pubreport3=module.countLoyalUsersChannelDatewise(startdate, enddate, channel_name,filter); 
 		
  
        pubreport1a.addAll(pubreport2);
        pubreport1a.addAll(pubreport3);
   
   
        total = 0.0;
        share = 0.0;
        maxTotal = 0.0; 
        scaledshare = 0.0;
        
        for(int i=0;i<pubreport1a.size();i++){
      	  
      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
      		  total=total+Double.parseDouble(pubreport1a.get(i).getCount());
           
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      		if(Double.parseDouble(pubreport1a.get(i).getCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(pubreport1a.get(i).getCount());
	    }
      	  
        }
                 
         for(int i=0;i<pubreport1a.size();i++){
      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/total)*100,2);
      	        
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/maxTotal)*100,2);
      	        	 
      	        	pubreport1a.get(i).setScaledShare(scaledshare.toString());	
      	  pubreport1a.get(i).setShare(share.toString());
      	  
        }
        
         
         for(int i=0;i<pubreport1a.size();i++){    
         	  
	          Integer count = (int) (Double.parseDouble(pubreport1a.get(i).getCount()));
	          pubreport1a.get(i).setCount(numberFormat.format(count)); 
	       
      }      
         
        
        return pubreport1a;
   }
    
    if (queryfield.equals("totalViews")) {
        
   	 AggregationModule module =  AggregationModule.getInstance();
 	    try {
 			module.setUp();
 		} catch (Exception e1) {
 			// TODO Auto-generated catch block
 			e1.printStackTrace();
 		}
		pubreport=module.counttotalvisitorsChannel(startdate, enddate, channel_name); 
	
		for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
	          pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
	       
     }     
		
		return pubreport;
   }
    
    
    if (queryfield.equals("benchmarktotalViews")) {
        
      	 AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
   		pubreport=module.countbenchmarktotalvisitorsChannel(startdate, enddate, channel_name);
   		
   		for(int i=0;i<pubreport.size();i++){    
        	  
   		      Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
   		      pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
	       
     }     
   		
   		return pubreport;
      }
    
    
    if (queryfield.equals("totalViewsDatewise")) {
        
      	 AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
   		pubreport=module.counttotalvisitorsChannelDatewise(startdate, enddate, channel_name);
   		
   		for(int i=0;i<pubreport.size();i++){    
        	  
   		      Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
   		      pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
     }     
   		
   		return pubreport;
      }
    
    if (queryfield.equals("benchmarktotalViewsDatewise")) {
        
     	 AggregationModule module =  AggregationModule.getInstance();
   	    try {
   			module.setUp();
   		} catch (Exception e1) {
   			// TODO Auto-generated catch block
   			e1.printStackTrace();
   		}
  		pubreport=module.countBenchmarktotalvisitorsChannelDatewise(startdate, enddate, channel_name);
  		
  		for(int i=0;i<pubreport.size();i++){    
        	  
  			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
  			pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
	       
     }     
  		
  		return pubreport;
     }
   
    
    
    
    
    if (queryfield.equals("totalViewsHourwise")) {
        
     	 AggregationModule module =  AggregationModule.getInstance();
   	    try {
   			module.setUp();
   		} catch (Exception e1) {
   			// TODO Auto-generated catch block
   			e1.printStackTrace();
   		}
  		pubreport=module.counttotalvisitorsChannelDateHourlywise(startdate, enddate, channel_name);
  		
  		for(int i=0;i<pubreport.size();i++){    
        	  
  			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
  			pubreport.get(i).setTotalvisits(numberFormat.format(count));  
	       
     }     
  		
  		
  		return pubreport;
     }
    
      
    if (queryfield.equals("benchmarktotalViewsHourwise")) {
        
    	 AggregationModule module =  AggregationModule.getInstance();
  	    try {
  			module.setUp();
  		} catch (Exception e1) {
  			// TODO Auto-generated catch block
  			e1.printStackTrace();
  		}
 		pubreport=module.countbenchmarktotalvisitorsChannelDateHourlywise(startdate, enddate, channel_name);
 		
 		
 		for(int i=0;i<pubreport.size();i++){    
        	  
 			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
 			pubreport.get(i).setTotalvisits(numberFormat.format(count));  
	       
     }     
 		
 		
 		return pubreport;
    } 
    
    
           
    if (queryfield.equals("uniqueVisitorsDatewise")) {
        
      	 AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
   		pubreport=module.countfingerprintChannelDatewise(startdate, enddate, channel_name);
   		
   		
   		for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	          pubreport.get(i).setReach(numberFormat.format(count)); 
	       
     }     
   		
   		return pubreport;
      }
    
 
    if (queryfield.equals("benchmarkuniqueVisitorsDatewise")) {
        
     	 AggregationModule module =  AggregationModule.getInstance();
   	    try {
   			module.setUp();
   		} catch (Exception e1) {
   			// TODO Auto-generated catch block
   			e1.printStackTrace();
   		}
  		pubreport=module.countBenchmarkfingerprintChannelDatewise(startdate, enddate, channel_name);
  		
  		for(int i=0;i<pubreport.size();i++){    
      	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	          pubreport.get(i).setReach(numberFormat.format(count)); 
	       
   }     
  		
  		return pubreport;
     }
    
    
    
    if (queryfield.equals("uniqueVisitorsHourwise")) {
        
     	 AggregationModule module =  AggregationModule.getInstance();
   	    try {
   			module.setUp();
   		} catch (Exception e1) {
   			// TODO Auto-generated catch block
   			e1.printStackTrace();
   		}
  		pubreport=module.countfingerprintChannelDateHourwise(startdate, enddate, channel_name);
  		
  		
  		for(int i=0;i<pubreport.size();i++){    
      	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	          pubreport.get(i).setReach(numberFormat.format(count)); 
	       
   }     
  		
  		
  		return pubreport;
     }
    
    
    if (queryfield.equals("benchmarkuniqueVisitorsHourwise")) {
        
     	 AggregationModule module =  AggregationModule.getInstance();
   	    try {
   			module.setUp();
   		} catch (Exception e1) {
   			// TODO Auto-generated catch block
   			e1.printStackTrace();
   		}
  		pubreport=module.countbenchmarkfingerprintChannelDateHourwise(startdate, enddate, channel_name);
  		
  		for(int i=0;i<pubreport.size();i++){    
      	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	          pubreport.get(i).setReach(numberFormat.format(count)); 
	       
   }     
  		return pubreport;
     }
    
    
    
    if (queryfield.equals("uniqueVisitors")) {
        
      	 AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
   		pubreport=module.countfingerprintChannel(startdate, enddate, channel_name); 
   		
   		for(int i=0;i<pubreport.size();i++){    
      	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	          pubreport.get(i).setReach(numberFormat.format(count)); 
	       
   }     
   		
   		
   		return pubreport;
      }
    
 
    if (queryfield.equals("benchmarkuniquevisitors")) {
        
     	 AggregationModule module =  AggregationModule.getInstance();
   	    try {
   			module.setUp();
   		} catch (Exception e1) {
   			// TODO Auto-generated catch block
   			e1.printStackTrace();
   		}
  		pubreport=module.countbenchmarkfingerprintChannel(startdate, enddate, channel_name);
  		
  		for(int i=0;i<pubreport.size();i++){    
      	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	          pubreport.get(i).setReach(numberFormat.format(count)); 
	       
   }     
  		
  		
  		
  		return pubreport;
     }
    
    if(queryfield.equals("sourceUrl")){
    	
    		
    	List<PublisherReport> pubreporta1 = NestedJSON5.getNestedReffererJSON(pubreport,filter);
    		return pubreporta1;  		
    		
    	}
    
    /*
           if (queryfield.equals("reforiginal")) {

        	   String data0= null;
               String data1= null;   
               String data2 = null;
               String data3 = null;
               String data4 = null;
        	   String data5= null;
               pubreport.clear();
        	   
			
				PublisherReport obj = new PublisherReport();

				
					data0 = "http://m.facebook.com";
					data1 = "3026.0";
				    data2 = "Social";
				    data3 = "305";
				    data4 = "110";
				    data5 = "facebook.com";
				
				    obj.setReferrerMasterDomain(data0);
					
					obj.setReferrerType(data2);
				    obj.setShares(data3);
				    obj.setLikes(data4);
				    
				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
				    	 obj.setCount(data1);
						  
						}
						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						{
							
							obj.setEngagementTime(data1);
						}
						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							obj.setVisitorCount(data1);
					
						}	    
				    
				    

		        PublisherReport obj1 = new PublisherReport();
					
				    data0 = "http://www.facebook.com";
					data1 = "1001.0";
				    data2 = "Social";
				    data3=  "207";
				    data4 = "53";
			        data5 = "facebook.com";
				
			        obj1.setReferrerMasterDomain(data0);
					
					obj1.setReferrerType(data2);
				    obj1.setShares(data3);
				    obj1.setLikes(data4);
				    
				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
				    	 obj1.setCount(data1);
						  
						}
						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						{
							
							obj1.setEngagementTime(data1);
						}
						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							obj1.setVisitorCount(data1);
					
						}	
			        
			        
			        
			        
			        PublisherReport obj2 = new PublisherReport();
				
					data0 = "http://l.facebook.com";
				  	data1 = "360.0";
				    data2 = "Social";
				    data3 = "103";
				    data4 = "12";
			        data5 = "facebook.com";
				
			        
			        obj2.setReferrerMasterDomain(data0);
					
					obj2.setReferrerType(data2);
				    obj2.setShares(data3);
				    obj2.setLikes(data4);
				    
				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
				    	 obj2.setCount(data1);
						  
						}
						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						{
							
							obj2.setEngagementTime(data1);
						}
						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							obj2.setVisitorCount(data1);
					
						}	
			        
			        
			        
			   PublisherReport obj3 = new PublisherReport();
					data0 = "http://www.google.co.pk";
					data1 = "396.0";
				    data2 = "Search";
				    data3 = "0";
				    data4 = "0";
				    data5 = "google.com";
				
				    obj3.setReferrerMasterDomain(data0);
					
					obj3.setReferrerType(data2);
				    obj3.setShares(data3);
				    obj3.setLikes(data4);
				    
				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
				    	 obj3.setCount(data1);
						  
						}
						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						{
							
							obj3.setEngagementTime(data1);
						}
						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							obj3.setVisitorCount(data1);
					
						}	   
			
				
			   PublisherReport obj4 = new PublisherReport();	    
					data0 = "http://www.google.co.in";
					data1 = "2871.0";
				    data2 = "Search";
				    data3 = "0";
				    data4 = "0";
				    data5 = "google.com";
				
				
                obj4.setReferrerMasterDomain(data0);
				
				obj4.setReferrerType(data2);
			    obj4.setShares(data3);
			    obj4.setLikes(data4);
			    
			    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					{
			    	
			    	 obj4.setCount(data1);
					  
					}
					if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					{
						
						obj4.setEngagementTime(data1);
					}
					if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					{
						
						obj4.setVisitorCount(data1);
				
					}	
			
				
					PublisherReport obj5 = new PublisherReport();

					
				//	data0 = "http://m.facebook.com";
					data1 = "4387.0";
				    data2 = "Social";
				    data3 = "615";
				    data4 = "175";
				    data0 = "facebook.com";
					
				    obj5.setReferrerMasterDomain(data0);
					
					obj5.setReferrerType(data2);
				    obj5.setShares(data3);
				    obj5.setLikes(data4);
				    
				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
				    	 obj5.setCount(data1);
						  
						}
						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						{
							
							obj5.setEngagementTime(data1);
						}
						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							obj5.setVisitorCount(data1);
					
						}	
				
				    
				    PublisherReport obj6 = new PublisherReport();

					
				   // data0 = "http://www.google.co.in";
					data1 = "3267.0";
				    data2 = "Search";
				    data3 = "0";
				    data4 = "0";
				    data0 = "google.com";
				
                    obj6.setReferrerMasterDomain(data0);
					
					obj6.setReferrerType(data2);
				    obj6.setShares(data3);
				    obj6.setLikes(data4);
				    
				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
				    	 obj6.setCount(data1);
						  
						}
						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						{
							
							obj6.setEngagementTime(data1);
						}
						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							obj6.setVisitorCount(data1);
					
						}	
					
				    
				String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);
				obj.setChannelName(channel_name1);
				obj1.setChannelName(channel_name1);
				obj2.setChannelName(channel_name1);
				obj3.setChannelName(channel_name1);
				obj4.setChannelName(channel_name1);
				obj5.setChannelName(channel_name1);
				obj6.setChannelName(channel_name1);
				
				obj5.getChildren().add(obj);
				obj5.getChildren().add(obj1);
				obj5.getChildren().add(obj2);
				
				obj6.getChildren().add(obj3);
				obj6.getChildren().add(obj4);
				
				
				
				pubreport.add(obj5);
				pubreport.add(obj6);

			

		}
    
        */
           
           
           
           if (queryfield.equals("reforiginalcombined")) {

        	   pubreport1.clear();
         	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
               
               List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
           
               List<String> Query = new ArrayList();
            
               queryfield = "sourceUrl";
              
               String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
         	    
               String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
         			
         			
         	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
                
         	    
              
         	    
         	    Query.add(query1);
         	    Query.add(query2);
         	    Query.add(query3);
              
              for(int j=0 ; j < Query.size(); j++ ){
              lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
           /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
              lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
              lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
              lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
               
              // returns a list of Futures holding their status and results when all complete
           
          /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
              lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
              lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
              lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
              }
              
              
              List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
         	

         	    for (int k = 0; k < maps.size(); k++)
         	    {
         	    
         	    	if(maps!=null && maps.get(k)!=null){
         	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
         	        pubreport1.addAll(map);
         	    	}
         	
         }

               Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
         	    
         	    List<PublisherReport> object = new ArrayList<PublisherReport>();
         	    
         	    
         	    for(int k=0; k< pubreport1.size(); k++)
         	    {
                 if(aggregatedmap.containsKey(pubreport1.get(k).getReferrerMasterDomain()))
                 {
                
                 PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getReferrerMasterDomain());
                 obj.setReferrerMasterDomain(pubreport1.get(k).getReferrerMasterDomain());
                 
                 
                 
                 if(pubreport1.get(k).getCount()!=null)
                 obj.setCount(pubreport1.get(k).getCount());
                 	
                 if(pubreport1.get(k).getEngagementTime()!=null) 	
                 	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
                 	
                if(pubreport1.get(k).getVisitorCount()!=null) 	
                 	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
                 
         	   
                if(pubreport1.get(k).getReferrerMasterDomain()!=null) 	
           	        obj.setReferrerMasterDomain(pubreport1.get(k).getReferrerMasterDomain());
           	
                
                
         	    aggregatedmap.put(pubreport1.get(k).getReferrerMasterDomain(), obj);
         	    
                 }
                 else{
                 	       
                 	        PublisherReport obj = new PublisherReport();
                 	     
                 	        if(pubreport1.get(k).getCount()!=null)
                 	        obj.setCount(pubreport1.get(k).getCount());
                 	        	
                 	        if(pubreport1.get(k).getEngagementTime()!=null) 	
                 	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
                 	        	
                 	       if(pubreport1.get(k).getVisitorCount()!=null) 	
                 	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
                 	
                 	       if(pubreport1.get(k).getReferrerMasterDomain()!=null) 	
                    	        obj.setReferrerMasterDomain(pubreport1.get(k).getReferrerMasterDomain());
                    	
                 	       aggregatedmap.put(pubreport1.get(k).getReferrerMasterDomain(), obj);
                 
                 
                 }
            
               
         	    }
         	    
         	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
         	        String key = entry.getKey();
         	        PublisherReport value = entry.getValue();
         	        

                     Double averageTime = 0.0;
         	        
         	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
         	        averageTime=NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
         	        
         	        
         	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
         	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
         	        
         	        
         	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
         	        
         	        
         	        String rd = value.getReferrerMasterDomain();
         	        
             	            		
             		if(rd.contains("facebook")){
             			value.setLikes("45");
                        value.setShares("10");
             		  	
             		}	
             		else{
             		value.setLikes("0");
             		value.setShares("0");
             		}
         	      
             		object.add(value); 
         	    
         	    
         	    
         	    }
         	    
         	    
         	    List<PublisherReport> pubreportv2 = NestedJSON5.getNestedReffererJSON1(object,filter);
         	   
         	    
         	    executorService.shutdown();
         	    return pubreportv2;		
         		
			

		}
    
           
           
           
           
           
           
           
           
           
           
           
           
           
           
      /*     
           
           
           if (queryfield.equals("Author")) {

        	   String data0= null;
               String data1= null;   
        	   pubreport.clear();
        	   
        	   for (int i = 0; i < 6; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			        
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="kishore";
			          data1 = "10078.0";
			          }
			          

			          if(i == 1){
			          data0="Medha Chawla";
			          data1 = "5097.0";
			          }
			          
			          
			          if(i == 2){
				          data0="Prabhleen Kaur";
				          data1 = "9231.0";
				      }
				    
			        
			          if(i == 3){
				          data0="Admin";
				          data1 = "10065.0";
				          }
				          

				          if(i == 4){
				          data0="Neha Nagpal";
				          data1 = "10031.0";
				          }
				          
				          
				          if(i == 5){
					          data0="Suman Bajpai";
					          data1 = "2021.0";
					      }
			          
			          
			          
			          obj.setArticleAuthor(data0);
			          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							obj.setEngagementTime(data1);
							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			   }
    
           }
           
           
           
           
           
           
           
           
           
           
           
           
           if (queryfield.equals("tag")) {

        	   String data0= null;
               String data1= null;   
        	   pubreport.clear();
        	   
        	   for (int i = 0; i < 6; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			        
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="lifestyle";
			          data1 = "20078.0";
			          }
			          

			          if(i == 1){
			          data0="bollywood";
			          data1 = "5093.0";
			          }
			          
			          
			          if(i == 2){
				          data0="politics";
				          data1 = "9678.0";
				      }
				    
			        
			          if(i == 3){
				          data0="household";
				          data1 = "10091.0";
				          }
				          

				          if(i == 4){
				          data0="fashion";
				          data1 = "10061.0";
				          }
				          
				          
				          if(i == 5){
					          data0="gaming";
					          data1 = "4045.0";
					      }
			          
			          
			          
			          obj.setArticleTags(data0);
			          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							obj.setEngagementTime(data1);
							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			   }
    
           }
           
           
           
           
           if (queryfield.equals("section")) {

        	   String data0= null;
               String data1= null;   
        	   pubreport.clear();
        	   
        	   for (int i = 0; i < 6; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			        
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="entertainment";
			          data1 = "10019.0";
			          }
			          

			          if(i == 1){
			          data0="fashion";
			          data1 = "2043.0";
			          }
			          
			          
			          if(i == 2){
				          data0="food";
				          data1 = "5678.0";
				      }
				    
			        
			          if(i == 3){
				          data0="lifestyle";
				          data1 = "10090.0";
				          }
				          

				          if(i == 4){
				          data0="trending";
				          data1 = "2061.0";
				          }
				          
				          
				          if(i == 5){
					          data0="biztech";
					          data1 = "3098.0";
					      }
			          
			          
			          
			          obj.setSection(data0);
			          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							obj.setEngagementTime(data1);
							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			   }
    
           }
           
          */ 
           
           /*  
           
           if (queryfield.equals("device")) {

        	   String data0= null;
               String data1= null;   
        	   pubreport.clear();
        	   
        	   for (int i = 0; i < 3; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			        
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="Mobile";
			          data1 = "10005.0";
			          }
			          

			          if(i == 1){
			          data0="Tablet";
			          data1 = "2067.0";
			          }
			          
			          
			          if(i == 2){
				          data0="Desktop";
				          data1 = "3045.0";
				      }
				    
			        
			          obj.setDevice_type(data0);
			          obj.setCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			   }
    
           }
    
           if (queryfield.equals("incomelevel")) {

        	   String data0= null;
               String data1= null;   
        	   pubreport.clear();
           
           for (int i = 0; i < 3; i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		       // String[] data1 = ((String)lines1.get(i)).split(",");
		       
		          //if(data1[0].equals()) 
		         
		          if(i == 0){
		          data0="Medium";
		          data1 = "10007.0";
		          }
		          

		          if(i == 1){
		          data0="High";
		          data1 = "3051.0";
		          }
		          
		          
		          if(i == 2){
			          data0="Low";
			          data1 = "1056.0";
			      }
			    
		        
		          obj.setIncomelevel(data0);
		          obj.setCount(data1);
		          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);

		          pubreport.add(obj);
		        
		   //   }
		    //  System.out.println(headers1);
		    //  System.out.println(lines1);
		      }
           }
         */  
           if(queryfield.equals("engagementTime"))	
           {
        	   
        	   AggregationModule module =  AggregationModule.getInstance();
          	    try {
          			module.setUp();
          		} catch (Exception e1) {
          			// TODO Auto-generated catch block
          			e1.printStackTrace();
          		}
         		pubreport=module.engagementTimeChannel(startdate, enddate, channel_name);
         		
         		
         		for(int i=0;i<pubreport.size();i++){    
              	  
      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
      	       
           }     
         		
         		return pubreport;
           }
           	
           if(queryfield.equals("benchmarkengagementTime"))	
           {
        	   
        	   AggregationModule module =  AggregationModule.getInstance();
          	    try {
          			module.setUp();
          		} catch (Exception e1) {
          			// TODO Auto-generated catch block
          			e1.printStackTrace();
          		}
         		pubreport=module.benchmarkengagementTimeChannel(startdate, enddate, channel_name);
         		for(int i=0;i<pubreport.size();i++){    
                	  
        	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
        	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
        	       
             } 
         		
         		
         		return pubreport;
           }
           
           
           
           
           if(queryfield.equals("engagementTimeDatewise"))	
           {
        	   
        	   
        	   AggregationModule module =  AggregationModule.getInstance();
       	    try {
       			module.setUp();
       		} catch (Exception e1) {
       			// TODO Auto-generated catch block
       			e1.printStackTrace();
       		}
      		pubreport=module.engagementTimeChannelDatewise(startdate, enddate, channel_name);
      		for(int i=0;i<pubreport.size();i++){    
            	  
    	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
    	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
    	       
         } 
      		
      		
      		
      		return pubreport;
           
           }
           
           if(queryfield.equals("benchmarkengagementTimeDatewise"))	
           {
        	   
        	   AggregationModule module =  AggregationModule.getInstance();
          	    try {
          			module.setUp();
          		} catch (Exception e1) {
          			// TODO Auto-generated catch block
          			e1.printStackTrace();
          		}
         		pubreport=module.benchmarkengagementTimeChannelDatewise(startdate, enddate, channel_name);
         		for(int i=0;i<pubreport.size();i++){    
                	  
        	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
        	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
        	       
             } 
         		
         		
         		return pubreport;
           }
           
           
           
           if(queryfield.equals("engagementTimeHourwise"))	
           {
        	   
        	   
        	   AggregationModule module =  AggregationModule.getInstance();
       	    try {
       			module.setUp();
       		} catch (Exception e1) {
       			// TODO Auto-generated catch block
       			e1.printStackTrace();
       		}
      		pubreport=module.engagementTimeChannelDateHourwise(startdate, enddate, channel_name);
      		
      		for(int i=0;i<pubreport.size();i++){    
            	  
    	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
    	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
    	       
         } 
      		
      		
      		return pubreport;
           
           }
           
           	
           if(queryfield.equals("benchmarkengagementTimeHourwise"))	
           {
        	   
        	   
        	   AggregationModule module =  AggregationModule.getInstance();
       	    try {
       			module.setUp();
       		} catch (Exception e1) {
       			// TODO Auto-generated catch block
       			e1.printStackTrace();
       		}
      		pubreport=module.engagementTimeChannelDateHourwise(startdate, enddate, channel_name);
      		
      		for(int i=0;i<pubreport.size();i++){    
            	  
    	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
    	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
    	       
         } 
      		
      		
      		
      		return pubreport;
           
           }
           
           
           
           if(queryfield.equals("minutesVisitor"))	
           {
           
        /*	   
        	   pubreport.clear();
           	PublisherReport obj1 = new PublisherReport();
           	Random random = new Random();	
               Integer randomNumber = random.nextInt(10) + 1;
              String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
           	obj1.setMinutesperVisitor(randomNumber.toString());
           	pubreport.add(obj1);
               return pubreport;
          */
           
        	   pubreport.clear();
        	   PublisherReport obj1 = new PublisherReport();
        	   
        	   AggregationModule module =  AggregationModule.getInstance();
         	    
        	   List<PublisherReport> pubreport1a = new ArrayList();
        	   List<PublisherReport> pubreport2 = new ArrayList();
        	   Double minutesVisitor = 0.0;
         	   
        	   try {
         			module.setUp();
         		} catch (Exception e1) {
         			// TODO Auto-generated catch block
         			e1.printStackTrace();
         		}
        		pubreport1a=module.engagementTimeChannel(startdate, enddate, channel_name);
        		
        		 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					{
			    	
        			 pubreport2=module.counttotalvisitorsChannel(startdate, enddate, channel_name); 
        			 minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getTotalvisits()),2);
					}
					
			   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					{
						
						pubreport2 = module.countUniqueVisitorsChannel(startdate, enddate, channel_name);
						minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getReach()),2);
					}	
        		
			   String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
				
			   
			   
			   obj1.setMinutesperVisitor(MinutestoSecond(minutesVisitor.toString()));
			   pubreport.add(obj1);
        		
			   return pubreport;
           
           }
           
           
           
           if (queryfield.equals("referrerTypecombined")) {


      		pubreport1.clear();
      	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
            
            List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
        
            List<String> Query = new ArrayList();
         
            queryfield = "referrerType";
           
            String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
      	    
            String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
      			
      			
      	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
             
      	    
           
      	    
      	    Query.add(query1);
      	    Query.add(query2);
      	    Query.add(query3);
           
           for(int j=0 ; j < Query.size(); j++ ){
           lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
        /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
           lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
           lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
           lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
            
           // returns a list of Futures holding their status and results when all complete
        
       /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
           lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
           lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
           lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
           }
           
           
           List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
      	

      	    for (int k = 0; k < maps.size(); k++)
      	    {
      	    
      	    	if(maps!=null && maps.get(k)!=null){
      	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
      	        pubreport1.addAll(map);
      	    	}
      	
      }

            Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
      	    
      	    List<PublisherReport> object = new ArrayList<PublisherReport>();
      	    
      	    
      	    for(int k=0; k< pubreport1.size(); k++)
      	    {
              if(aggregatedmap.containsKey(pubreport1.get(k).getReferrerSource()))
              {
             
              PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getReferrerSource());
              obj.setReferrerSource(pubreport1.get(k).getReferrerSource());
              
              
              
              if(pubreport1.get(k).getCount()!=null)
              obj.setCount(pubreport1.get(k).getCount());
              	
              if(pubreport1.get(k).getEngagementTime()!=null) 	
              	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
              	
             if(pubreport1.get(k).getVisitorCount()!=null) 	
              	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
              
      	   
             if(pubreport1.get(k).getReferrerSource()!=null) 	
        	        obj.setReferrerSource(pubreport1.get(k).getReferrerSource());
        	
             
             
      	    aggregatedmap.put(pubreport1.get(k).getReferrerSource(), obj);
      	    
              }
              else{
              	       
              	        PublisherReport obj = new PublisherReport();
              	     
              	        if(pubreport1.get(k).getCount()!=null)
              	        obj.setCount(pubreport1.get(k).getCount());
              	        	
              	        if(pubreport1.get(k).getEngagementTime()!=null) 	
              	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
              	        	
              	       if(pubreport1.get(k).getVisitorCount()!=null) 	
              	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
              	
              	       if(pubreport1.get(k).getReferrerSource()!=null) 	
                 	        obj.setReferrerSource(pubreport1.get(k).getReferrerSource());
                 	
              	       aggregatedmap.put(pubreport1.get(k).getReferrerSource(), obj);
              
              
              }
         
            
      	    }
      	    
      	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
      	        String key = entry.getKey();
      	        PublisherReport value = entry.getValue();
      	        

                Double averageTime = 0.0;
      	        
      	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
      	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
      	        
      	        
      	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
      	        
      	        
      	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
      	        
      	        
      	        String rt = value.getReferrerSource();
      	        
      	        String referrerTypeId = referrerTypeMap1.get(rt);
      		    value.setReferrerTypeId(referrerTypeId);
      	        
      	        
      	        rt= AggregationModule.capitalizeFirstLetter(rt);
          		value.setReferrerSource(rt);
          		if(rt.contains("Social")){
          			value.setLikes("45");
          		    value.setShares("10");
          		}		else{
          			value.setLikes("0");
          			value.setShares("0");
          			
          		}		
          			object.add(value); 
      	    
      	    
      	    }
      	    
      	    
      	    
      	  Double total2 = 0.0;
      	Double totalvisits = 0.0;
      	Double totaleT = 0.0;
      	Double totalvisitor = 0.0;
      	Double share1 = 0.0;
      	Double sharevisits = 0.0;
      	Double shareeT = 0.0;
      	Double sharevisitor = 0.0;
      	maxTotal = 0.0; 
      	scaledshare = 0.0;	 
      	Double scaledsharevisits = 0.0;
      	Double scaledshareeT = 0.0;
      	Double scaledsharevisitor = 0.0;
      	Double maxsharevisits = 0.0;
      	Double maxshareeT = 0.0;
      	Double maxsharevisitor = 0.0;

      	for(int i=0;i<object.size();i++){
      	  
      	      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
      		    	    {
      		    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
      	   }
      	      
      	      
      	      }
      	      
      	      
      	      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
      		    	    {
      		    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
      	   }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
      	   

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
      	    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
      	    
      	    
      	    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
      	 	    {
      	  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
      	}
      	    
      	    
      	    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
      	 	    {
      	  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
      	}
      	    
      	    
      	    
      	    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
      	 	    {
      	  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
      	}
      	    
      	    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
      	  
      	   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
      	}
      	       
      	for(int i=0;i<object.size();i++){
      	             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
      	object.get(i).setScaledShare(scaledshare.toString());
      	}
      		  
      	    
      	    
      	    
      	    
      	    
      	    
      	    
	         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
	 		    
	             Collections.sort(object, new Comparator<PublisherReport>() {
	  				
	  				@Override
	  		        public int compare(PublisherReport o1, PublisherReport o2) {
	  					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
	  		        }
	  		    });	
	 		    
	 		    }
	 		    
	 		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	 		    	

	 	            Collections.sort(object, new Comparator<PublisherReport>() {
	 	 				
	 	 				@Override
	 	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
	 	 		        }
	 	 		    });	
	 		    	
	 		    	
	 		    }
	 		    
	 		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
	 		    	
	                     Collections.sort(object, new Comparator<PublisherReport>() {
	 	 				
	 	 				@Override
	 	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
	 	 		        }
	 	 		    });	
	 		    	
	 		    	
	 		    }
	 		    
      	    
      	    executorService.shutdown();
      	   
      	  for(int i=0;i<object.size();i++){    
       	   
       	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		          object.get(i).setCount(numberFormat.format(count)); 
		       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
          }       
      	    
      	    
      	    
      	    
      	    
      	    return object;		
      		
      		
           }       
           
           
           
           
           if(queryfield.toLowerCase().contains("combined")){
        	   pubreport.clear();
        	   pubreport = getCombinedDataChannel(queryfield, startdate, enddate, channel_name, filter);
        	   return pubreport;
           }
           
           
           
           
           
           
           
           /*
           
           if (queryfield.equals("referrerType")) {

        	   String data0= null;
               String data1= null;   
        	   pubreport.clear();
           
           for (int i = 0; i < 3; i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		       // String[] data1 = ((String)lines1.get(i)).split(",");
		       
		          //if(data1[0].equals()) 
		         
		          if(i == 0){
		          data0="Social";
		          data1 = "10007.0";
		          }
		          

		          if(i == 1){
		          data0="Search";
		          data1 = "3051.0";
		          }
		          
		          
		          if(i == 2){
			          data0="Direct";
			          data1 = "1056.0";
			      }
			    
		        
		          obj.setReferrerSource(data0);
		          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						obj.setCount(data1);
						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						obj.setEngagementTime(data1);
						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						obj.setVisitorCount(data1);
		          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);

		          pubreport.add(obj);
		        
		   //   }
		    //  System.out.println(headers1);
		    //  System.out.println(lines1);
		      }
           }       
   */
          
           if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
			    
Collections.sort(pubreport, new Comparator<PublisherReport>() {
	
	@Override
 public int compare(PublisherReport o1, PublisherReport o2) {
		return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
 }
});	

}

if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){

	Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
	 public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
	 }
	});	

}

if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){

	Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
	 public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
	 }
	});	


}
           
           
           
           
           if(queryfield.equals("gender"))
           {   
        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
					
					@Override
			        public int compare(PublisherReport o1, PublisherReport o2) {
						return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
			        }
			    });	
          
           }        
           
           
           
           if(queryfield.equals("agegroup"))
           {   
        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
					
					@Override
			        public int compare(PublisherReport o1, PublisherReport o2) {
						return  o1.getAge().compareTo(o2.getAge());
			        }
			    });	
          
           }     
           
           if(queryfield.equals("incomelevel"))
           {   
        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
					
					@Override
			        public int compare(PublisherReport o1, PublisherReport o2) {
						return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
			        }
			    });	
          
           }                
	           
	            
           
                    
 for(int i=0;i<pubreport.size();i++){    
        	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(numberFormat.format(count)); 
		       
           }     
           
           
           
    return pubreport;
  }
  
  
  public List<PublisherReport> getQueryFieldChannelLive(String queryfield,String startdate, String enddate, String channel_name, String filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
	  
	  

		if (queryfield.equals("Author")) {
          queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
          queryfield =  "sourceUrl";
	} 
	  
	  
	  String query = "";
      
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
      query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
     
      if(queryfield.equals("refcurrentoriginal")){
    	  
    	  
    	  query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" limit 10";  
      }
      
      }  
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
      query = "Select SUM(engagementTime),"+queryfield +" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
      
       if(queryfield.equals("refcurrentoriginal")){
    	  
    	  
    	   query = "Select SUM(engagementTime),"+queryfield +" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" limit 10";
      }
      
      
      } 
      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
     
      if(queryfield.equals("refcurrentoriginal")){
    	  
    	  query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+" limit 10";  

      }
      
      
      
      }   		
	  if(queryfield.equals("audience_segment"))	    
	  {
		 
		  
		query = "Select count(*),audience_segment,subcategory from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
  	      
		  
		  
	  }
	  
	  
	  
	  
	  
		    
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    
		  

		   // if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		   // lines = processList(lines);
		    List<String> groupby = new ArrayList();
		    groupby.add("subcategory");
		    
		    if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
			    
		    	   List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
		   
		    	 
				    ExecutorService executorService = Executors.newFixedThreadPool(2000);
			        
			        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
			    
			        List<String> Query = new ArrayList();
			     
			        queryfield = "audience_segment,subcategory";
			       
					String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
					    
						
				    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
						
						
				    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by audience_segment,subcategory";  
			       
				    
				    Query.add(query1);
			        Query.add(query2);
				    Query.add(query3);
				    Query.add("externalWorldQueryLive@"+startdate+"@"+enddate+"@"+channel_name);
			       
			       for(int j=0 ; j < Query.size(); j++ ){
			       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
			    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
			        
			       // returns a list of Futures holding their status and results when all complete
			    
			   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
			       }
			       
			       
			       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				

				    for (int k = 0; k < maps.size(); k++)
				    {
				    
				    	if(maps!=null && maps.get(k)!=null){
				        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				        pubreport1.addAll(map);
				    	}
				
		    }
			
				    executorService.shutdown();
				    
				    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				    
				    List<PublisherReport> object = new ArrayList<PublisherReport>();
				    
				    
				    for(int k=0; k< pubreport1.size(); k++)
				    {
			         try{ 
				    	String audiencesegment = pubreport1.get(k).getAudience_segment();
				    	
				    	String subcategory = pubreport1.get(k).getSubcategory();
				    	
				    	  String count =  pubreport1.get(k).getCount();
			        		
					        String engagementTime =  pubreport1.get(k).getEngagementTime();		
					        
					        String visitorCount = pubreport1.get(k).getVisitorCount();
				    	
					        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
					        
				    	    String key = audiencesegment+"@"+subcategory;
					        
					        
					        if(aggregatedmap.containsKey(key))
			        {
			       
			        PublisherReport obj = aggregatedmap.get(key);
			        obj.setAudience_segment(audiencesegment);
			        obj.setSubcategory(subcategory);
			      
			        
			        if(count!=null)
			        obj.setCount(count);
			        	
			        if(engagementTime!=null) 	
			        	obj.setEngagementTime(engagementTime);
			        	
			       if(visitorCount!=null) 	
			        	obj.setVisitorCount(visitorCount);
			        
			       if(externalWorldCount!=null)
			    	   obj.setExternalWorldCount(externalWorldCount);
			       else
     	    	   obj.setExternalWorldCount("0");
			       
			       
			       
			       if(key !=null) {	
			    	obj.setAudience_segment(audiencesegment);
			        obj.setSubcategory(subcategory);
			       }
			       
			       
				    aggregatedmap.put(key, obj);
				    
			        }
			        else{
			        	       
			        	        PublisherReport obj = new PublisherReport();
			        	     
			        	        if(count !=null)
			        	        obj.setCount(count);
			        	        	
			        	        if(engagementTime !=null) 	
			        	        obj.setEngagementTime(engagementTime);
			        	        	
			        	       if(visitorCount !=null) 	
			        	        obj.setVisitorCount(visitorCount);
			        	
			        	       
			        	       if(externalWorldCount!=null)
						    	   obj.setExternalWorldCount(externalWorldCount);
			        	       else
			        	    	   obj.setExternalWorldCount("0");
			        	       
			        	       if(key!=null) {	
			        	    	obj.setAudience_segment(audiencesegment);
			   			        obj.setSubcategory(subcategory);
			        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	      
			        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			 		        	
			        	       
			        	       
			        	       }
			        	       aggregatedmap.put(key, obj);
			        
			        
			        }
			         }
			         catch(Exception e){
			        	 continue;
			         }
			      
				    }
				    
				     
				    
				    List<String> headers1 = new ArrayList<String>();
				    headers1.add("audience_segment");
				    headers1.add("subcategory");
				    headers1.add("count(*)");
				    headers1.add("SUM(engagementTime)");
				    headers1.add("COUNT(DISTINCT(cookiehash))");
				    headers1.add("ExternalWorldCount");
				    List<String> lines1= new ArrayList<String>();	
				    
				    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				    
				    	
				    	try{
				    	String key = entry.getKey();
				        PublisherReport obj = entry.getValue();
				        String [] parts1= key.split("@");
				        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
				      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	lines1.add(line);
				        
				        
				       
				      }
				      catch(Exception e){
				    	  continue;
				      }
				    
				   
				    
				    
				    
				    
				    
				    
				    
				    }
				    
				    

				    List<List<String>> data = new ArrayList<List<String>>();
				    for (int i = 0; i < lines1.size(); i++) {
			            List<String> objects = new ArrayList<String>();
			            String [] parts = lines1.get(i).split(",");
			            for(int j =0; j< parts.length; j++)
			              objects.add(parts[j]);
			           
			            data.add(objects);
			        }
				    
				    
				    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
				    
				     queryfield = "audience_segment";
				//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
				 //   String s = json.toString();
				    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
				 //   System.out.println(nestedJson);
				    return pubreport;
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	/* 
		    List<List<String>> data = new ArrayList<List<String>>();
		    for (int i = 0; i < lines.size(); i++) {
	            List<String> objects = new ArrayList<String>();
	            String [] parts = lines.get(i).split(",");
	            for(int j =0; j< parts.length; j++)
	              objects.add(parts[j]);
	           
	            data.add(objects);
	        }
		    
		    
		    ResultSet obj = ListtoResultSet.getResultSet(headers, data);
		    
		    
		//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
		 //   String s = json.toString();
		    pubreport= NestedJSON.getNestedJSONObject(obj, queryfield, groupby,filter); 
		 //   System.out.println(nestedJson);
		    return pubreport;
		    
		    
		    */
		    
		    }
		    
		    
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        try{
		    	 
		    	  PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		            
		            
		        
		            if(queryfield.equals("gender")){
		        	
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	
		            	obj.setGender(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("device")){
		        	
		            	
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }	
		            if(queryfield.equals("state"))
	            	{
	            	
	            	data[0]=data[0].replace("_", " ");
	            	 data[0] = capitalizeString(data[0]);
	            	obj.setState(data[0]);
	            	}
	            
	            
	            if(queryfield.equals("country"))
	        	  {
	        	
	            	data[0]=data[0].replace("_", " ");
	            	data[0] = capitalizeString(data[0]);
	            	obj.setCountry(data[0]);
	             	}
		            
		            
	            if(queryfield.equals("authorName")){
	        		
	            	
		        		obj.setArticleAuthor(data[0]);
		        	    String Id  = AuthorMap1.get(data[0]);
		        	    obj.setAuthorId(Id);
		        	
	        		
	        	}
	        	
                 if(queryfield.equals("tag")){
		        		
		        		obj.setArticleTags(data[0]);
		        	
		        		if(AggregationModule.tagMap3.get(data[0])!=null){
		               	 String tagId = AggregationModule.tagMap3.get(data[0]);
		   	        	 obj.setTagId(tagId);
		               	 }
                 
                 }
                 
                 
		            if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e){
		        			continue;
		        		}
		        		
		        		} 
		        	
		        	if(queryfield.equals("audience_segment"))
		             {
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		             }
		        	
		        	if(queryfield.equals("sourceUrl")){
		        		String urlId = UrlMap1.get(data[0]);
		        		obj.setUrlId(urlId);
		        		obj.setReferrerMasterDomain(data[0]);
		        	}
		        	
		        	if(queryfield.equals("referrerType")){
			         
		        		String referrerTypeId = referrerTypeMap1.get(data[0]);
		        		obj.setReferrerTypeId(referrerTypeId);
		        		
		        		obj.setReferrerSource(data[0]);
		            		        	
		        	}
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		
		        		
		        		data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		        	if(queryfield.equals("incomelevel")){
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		  
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		         	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
		        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
			        	
				        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				        System.out.println(mobiledeviceproperties[2]);
				        obj.setDevicecode(mobiledeviceproperties[0]);
				        System.out.println(mobiledeviceproperties[0]);
		        	}
		         	
		        	if(queryfield.equals("brandName"))
			          {
		        		data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
			          }
		        
		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	

		            Random random = new Random();	
		            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
		            Integer max = (int)Double.parseDouble(data[1]);
		            Integer randomNumber1 = random.nextInt(max) + 1;
		            
		            if(queryfield.equals("audience_segment"))	
		            {
		            obj.setCount(data[1]); 	
		            obj.setExternalWorldCount(randomNumber.toString());	
		            obj.setVisitorCount(randomNumber1.toString());
		            obj.setAverageTime("0.0");	
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
		            
			        pubreport.add(obj);
		            
		            }
		            else if(queryfield.equals("agegroup")==true) {
		            	
		            	if(data[0].contains("medium")==false){
		            		   // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		 		            	obj.setCount(data[1]);
		 		            
		 		             //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		 		             //   obj.setEngagementTime(data[1]);
		 		           
		 		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		 		             //   obj.setVisitorCount(data[1]);
		            		String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		  		            
		  		            
		      		        pubreport.add(obj);
		            	}
		            }
		           		            
		            else{
		            	     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				            	obj.setCount(data[1]);
				            
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //  obj.setEngagementTime(data[1]);
				           
				           //     if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             //   obj.setVisitorCount(data[1]);
		           
				                if(queryfield.equals("sourceUrl") || queryfield.equals("referrerType")){
		        	            	 
		        	            	 if(data[0].contains("Social")){
		        	           			obj.setLikes("45");
		        	           		    obj.setShares("10");
		        	           		}		
		        	            	 
		        	            	 else if(data[0].contains("facebook")){
		        	            		 
		        	            		 obj.setLikes("45");
		         	           		     obj.setShares("10");
		        	            	 }
		        	            	 
		        	            	 
		        	            	  else{	
		        	           			
		        	           			obj.setLikes("0");
		        	           			obj.setShares("0");
		        	           			
		        	           		}		 
		        	            	 
		        	             }
				                
				                
				                
				                String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
		            
		            if(obj.getPublisher_pages()!= null && obj.getPublisher_pages().contains("google.co")==false)
			        pubreport.add(obj);
		            
		            if(obj.getPublisher_pages()== null)
		            	pubreport.add(obj);
		            
		            
		            }
		          
		        }
		        catch(Exception e)
		        {
		        	continue;
		        }
		        }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    
		    
		    Double total = 0.0;
	        Double share = 0.0;
	        Double maxTotal = 0.0; 
	        Double scaledshare = 0.0;
	       	               
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
   	    	    {
   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
 	    }
 	    
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		    
		    
		    
		    
		    if (queryfield.equals("LatLong")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countLatLongChannelLive(startdate, enddate, channel_name);
		  		
		  		for(int i=0;i<pubreport.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
	      	       
	           } 
		  		
		  		
		  		
		  		return pubreport;
		    }
		      
		    if (queryfield.equals("postalcode")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countPinCodeChannelLive(startdate, enddate, channel_name);
		  		
		  		for(int i=0;i<pubreport.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
	      	       
	           } 
		  		
		  		
		  		
		  		return pubreport;
		    }
		      
		    
		    if (queryfield.equals("cityOthers")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countCityChannelLive(startdate, enddate, channel_name, filter);
		 
		  	  total = 0.0;
		        share =0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;
		        
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	 
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		  		
		         for(int i=0;i<pubreport.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
	      	       
	           } 
		  		
		  		
		  		return pubreport;
		    }
		    
		    
		    if (queryfield.equals("stateOthers")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countStateChannelLive(startdate, enddate, channel_name, filter);
		  	    total = 0.0;
		        share =0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;        
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	    	    
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		         for(int i=0;i<pubreport.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
	      	       
	           } 
		  		
		  		
		  		
		  		return pubreport;
		    }
		    
		    if (queryfield.equals("countryOthers")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countCountryChannelLive(startdate, enddate, channel_name, filter);
		  		
		  	  total = 0.0;
		        share =0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;
		        
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	    	    
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		         for(int i=0;i<pubreport.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
	      	       
	           } 
		  		
		  		
		  		return pubreport;
		    }
		    
		    
		   
		    if (queryfield.equals("newContent")) {
		        
		    	 AggregationModule module =  AggregationModule.getInstance();
		 	    try {
		 			module.setUp();
		 		} catch (Exception e1) {
		 			// TODO Auto-generated catch block
		 			e1.printStackTrace();
		 		}
				pubreport=module.getNewContentCountChannelLive(startdate, enddate, channel_name);
				return pubreport;
		    }	
		   
		    
		    if (queryfield.equals("otherContent")) {
		        
		    	 AggregationModule module =  AggregationModule.getInstance();
		 	    try {
		 			module.setUp();
		 		} catch (Exception e1) {
		 			// TODO Auto-generated catch block
		 			e1.printStackTrace();
		 		}
		
		 	   pubreport=module.getOtherContentCountChannelLive(startdate, enddate, channel_name); 
		 	    
		 	    return pubreport;
		    }	
		   
		    
		    
		    
		    if (queryfield.equals("newVisitors")) {
			    
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countNewUsersChannelLiveDatewise(startdate, enddate, channel_name,filter); 
				return pubreport;
		    }
		    
		    if (queryfield.equals("returningVisitors")) {
		        
		    	 AggregationModule module =  AggregationModule.getInstance();
		 	    try {
		 			module.setUp();
		 		} catch (Exception e1) {
		 			// TODO Auto-generated catch block
		 			e1.printStackTrace();
		 		}
				pubreport=module.countReturningUsersChannelLiveDatewise(startdate, enddate, channel_name,filter); 
				return pubreport;
		    }
		    
		    if (queryfield.equals("LoyalVisitors")) {
		        
		    	 AggregationModule module =  AggregationModule.getInstance();
		  	    try {
		  			module.setUp();
		  		} catch (Exception e1) {
		  			// TODO Auto-generated catch block
		  			e1.printStackTrace();
		  		}
		 		pubreport=module.countLoyalUsersChannelLiveDatewise(startdate, enddate, channel_name,filter); 
		 		return pubreport;
		    }
		    
		   	    
		    
		    
		    if (queryfield.equals("visitorType")) {
		    
		    	List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
		    	List<PublisherReport> pubreport2 = new ArrayList<PublisherReport>();
		    	List<PublisherReport> pubreport3 = new ArrayList<PublisherReport>();
		    	
		    	
		    	AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport1=module.countNewUsersChannelLiveDatewise(startdate, enddate, channel_name,filter); 
				
				
				pubreport2=module.countReturningUsersChannelLiveDatewise(startdate, enddate, channel_name,filter); 
				
		 		pubreport3=module.countLoyalUsersChannelLiveDatewise(startdate, enddate, channel_name,filter); 
		 		
		 		pubreport1.addAll(pubreport2);
		 		pubreport1.addAll(pubreport3);
		 		
		 		  total = 0.0;
		 	      share =0.0;
		 	     maxTotal = 0.0; 
 	      		 scaledshare = 0.0;
 	      	  
		 	                 
		 	        for(int i=0;i<pubreport1.size();i++){
		 	      	  
		 	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		 	      		  total=total+Double.parseDouble(pubreport1.get(i).getCount());
		 	           
		 	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		 	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		 	            
		 	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		 	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		 	      		if(Double.parseDouble(pubreport1.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport1.get(i).getCount());
 	    	    }
 	    	    
		 	        }
		 	                 
		 	         for(int i=0;i<pubreport1.size();i++){
		 	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		 	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/total)*100,2);
		 	      	        
		 	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		 	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		 	      	      
		 	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		 	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		 	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/maxTotal)*100,2);
		 	      	         
		 	      	        	pubreport1.get(i).setScaledShare(scaledshare.toString());	  
		 	      	            pubreport1.get(i).setShare(share.toString());
		 	      	  
		 	        }
		 		
		 	        for(int i=0;i<pubreport1.size();i++){    
		              	  
		      	          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
		      	          pubreport1.get(i).setCount(numberFormat.format(count)); 
		      	       
		           } 
			  		
		 		
		 		return pubreport1;
		    }
		    
		   
		    if(queryfield.equals("engagementTime"))	
	        {
		    	pubreport.clear();
		    	 AggregationModule module =  AggregationModule.getInstance();
			 	    try {
			 			module.setUp();
			 		} catch (Exception e1) {
			 			// TODO Auto-generated catch block
			 			e1.printStackTrace();
			 		}
					pubreport=module.engagementTimeChannelLive(startdate, enddate, channel_name);
					
					
					for(int i=0;i<pubreport.size();i++){    
		              	  
		      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
		      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
		      	       
		           } 
			  		
					
					
					return pubreport;
	           
	        
	        }
	        	
	        	
	        if(queryfield.equals("minutesVisitor"))	
	        {
	        	 pubreport.clear();
	        	   PublisherReport obj1 = new PublisherReport();
	        	   
	        	   AggregationModule module =  AggregationModule.getInstance();
	         	    
	        	   List<PublisherReport> pubreport1a = new ArrayList();
	        	   List<PublisherReport> pubreport2 = new ArrayList();
	        	   Double minutesVisitor = 0.0;
	         	   
	        	   try {
	         			module.setUp();
	         		} catch (Exception e1) {
	         			// TODO Auto-generated catch block
	         			e1.printStackTrace();
	         		}
	        		pubreport1a=module.engagementTimeChannelLive(startdate, enddate, channel_name);
	        		
	        		 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
	        			 pubreport2=module.counttotalvisitorsChannelLive(startdate, enddate, channel_name); 
	        			 minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getTotalvisits()),2);
						}
						
				   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							pubreport2 = module.countUniqueVisitorsChannelLive(startdate, enddate, channel_name);
							minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getReach()),2);
						}	
	        		
				   String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
					
				   
				   
				   obj1.setMinutesperVisitor(MinutestoSecond(minutesVisitor.toString()));
				   pubreport.add(obj1);
	        		
				   return pubreport;
	        }
	        	
		    
		    
		    
		    if (queryfield.equals("totalViews")) {
		        
		   	 AggregationModule module =  AggregationModule.getInstance();
		 	    try {
		 			module.setUp();
		 		} catch (Exception e1) {
		 			// TODO Auto-generated catch block
		 			e1.printStackTrace();
		 		}
				pubreport=module.counttotalvisitorsChannelLive(startdate, enddate, channel_name);
				
				for(int i=0;i<pubreport.size();i++){    
	              	  
					 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
					 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
	      	       
	           } 
		  		
				
				
				return pubreport;
		   }
		    
		      
		           
		    if (queryfield.equals("uniqueVisitors")) {
		        
		      	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		   		pubreport=module.countUniqueVisitorsChannelLive(startdate, enddate, channel_name); 
		   		
		   		for(int i=0;i<pubreport.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	      	          pubreport.get(i).setReach(numberFormat.format(count)); 
	      	       
	           } 
		  		
		   		
		   		return pubreport;
		      }
		    
		    
		    /*
		    
		           if (queryfield.equals("reforiginal")) {

		        	   String data0= null;
		               String data1= null;  
		               String data2 = null;
		        	   pubreport.clear();
		        	   
					for (int i = 0; i < 5; i++) {
						PublisherReport obj = new PublisherReport();

						if (i == 0) {
							data0 = "http://m.facebook.com";
							data1 = "1006.0";
						    data2 = "Social";
						}

						if (i == 1) {
							data0 = "http://www.facebook.com";
							data1 = "1010.0";
						    data2 = "Social";
						}

						if (i == 2) {
							data0 = "http://l.facebook.com";
							data1 = "360.0";
						    data2 = "Social";
						}

						if (i == 3) {
							data0 = "http://www.google.co.pk";
							data1 = "48.0";
						    data2 = "Search";
						}

						if (i == 4) {
							data0 = "http://www.google.co.in";
							data1 = "4871.0";
						    data2 = "Search";
						}

						obj.setReferrerSource(data0);
						obj.setReferrerType(data2);
					    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							obj.setEngagementTime(data1);
							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							obj.setVisitorCount(data1);
						String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						pubreport.add(obj);

					}

				}
		    */
		          /* 
		           
		           if (queryfield.equals("device")) {

		        	   String data0= null;
		               String data1= null;   
		        	   pubreport.clear();
		        	   
		        	   for (int i = 0; i < 3; i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        
					       
					          //if(data1[0].equals()) 
					         
					          if(i == 0){
					          data0="Mobile";
					          data1 = "10005.0";
					          }
					          

					          if(i == 1){
					          data0="Tablet";
					          data1 = "2067.0";
					          }
					          
					          
					          if(i == 2){
						          data0="Desktop";
						          data1 = "3045.0";
						      }
						    
					        
					          obj.setDevice_type(data0);
					          obj.setCount(data1);
					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
					          pubreport.add(obj);
					        
					   //   }
					    //  System.out.println(headers1);
					    //  System.out.println(lines1);
					   }
		    
		           }
		    
		           if (queryfield.equals("incomelevel")) {

		        	   String data0= null;
		               String data1= null;   
		        	   pubreport.clear();
		           
		           for (int i = 0; i < 3; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				       // String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="Medium";
				          data1 = "10007.0";
				          }
				          

				          if(i == 1){
				          data0="High";
				          data1 = "3051.0";
				          }
				          
				          
				          if(i == 2){
					          data0="Low";
					          data1 = "1056.0";
					      }
					    
				        
				          obj.setIncomelevel(data0);
				          obj.setCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);

				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				      }
		           }
		          */
		           
		           /*
		           if (queryfield.equals("referrerType")) {

		        	   String data0= null;
		               String data1= null;   
		        	   pubreport.clear();
		           
		           for (int i = 0; i < 3; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				       // String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="Social";
				          data1 = "1047.0";
				          }
				          

				          if(i == 1){
				          data0="Search";
				          data1 = "6032.0";
				          }
				          
				          
				          if(i == 2){
					          data0="Direct";
					          data1 = "1011.0";
					      }
					    
				        
				          obj.setReferrerSource(data0);
				          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(data1);
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setEngagementTime(data1);
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setVisitorCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);

				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				      }
		           }       
		    
		        */
		    
		      
            if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
			    
Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
  public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
  }
});	

}

if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	
Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
  public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
  }
});	
}

if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
	
Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
  public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
  }
});	
	
	
}     
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    if(queryfield.equals("gender"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
				        }
				    });	
	          
	           }        
	           
	           
	           
	           if(queryfield.equals("agegroup"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getAge().compareTo(o2.getAge());
				        }
				    });	
	          
	           }     
	           
	           if(queryfield.equals("incomelevel"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
				        }
				    });	
	          
	           }                
		           
	           for(int i=0;i<pubreport.size();i++){    
 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           }      
		           
		    return pubreport;
		  }
		  
  
  
  
  /*
  public List<PublisherReport> getQueryFieldChannelFilter(String queryfield,String startdate, String enddate, String channel_name, Map<String,String>filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	        int size = filter.size();
	        String queryfilterbuilder = "";
	        String formattedString = "";
	        String query = "";
	        int j =0;
	        for (Map.Entry<String, String> entry : filter.entrySet())
	        {
	        	if (j==0){
	                formattedString = addCommaString(entry.getValue());
	        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
	        	
	        	}
	            else{
	            formattedString = addCommaString(entry.getValue());	
	            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
	       
	            }
	            j++;
	         
	        }
	  
	  
	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
	        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
	        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	        
	        if(filter != null && !filter.isEmpty() && filter.equals("visitorCount"))
		    query = "Select "+queryfield+",cookie_id"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        
		       
	        
	        
	        System.out.println(query);
	        CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    
		   
		    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		       // lines = processList(lines);
		    
		    
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        try{
		    	  
		    	  PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		            if(queryfield.equals("gender"))
		        	obj.setGender(capitalizeString(data[0]));
		        
		            if(queryfield.equals("device"))
		        	obj.setDevice_type(capitalizeString(data[0]));
		        	
		        	if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e)
		        		{
		        			continue;
		        		}
		        		
		        		}
		        	if(queryfield.equals("audience_segment"))
		             {
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		             }
		        	
		        	if(queryfield.equals("reforiginal"))
			             obj.setReferrerSource(data[0]);
		            	
		        	if(queryfield.equals("agegroup"))
		        	{
		        		 data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        	if(queryfield.equals("incomelevel"))
			          obj.setIncomelevel(capitalizeString(data[0]));
		     
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
		        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
		        	
			        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
			        System.out.println(mobiledeviceproperties[2]);
			        obj.setDevicecode(mobiledeviceproperties[0]);
			        System.out.println(mobiledeviceproperties[0]);
		        	}
		         	
		        	if(queryfield.equals("brandName")){
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	

		            Random random = new Random();	
		            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
		            Integer max = (int)Double.parseDouble(data[1]);
		            Integer randomNumber1 = random.nextInt(max) + 1;
		            
		            if(queryfield.equals("audience_segment"))	
		            {
		            obj.setCount(data[1]); 	
		            obj.setExternalWorldCount(randomNumber.toString());	
		            obj.setVisitorCount(randomNumber1.toString());
		            obj.setAverageTime("0.0");	
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		           
		            else if(queryfield.equals("agegroup")==true) {
		            	
		            	if(data[0].contains("medium")==false){
		            		if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	         	obj.setCount(data[1]);
		        	        
		        	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		        	             obj.setEngagementTime(data[1]);
		        	         
		        	             if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	             obj.setVisitorCount(data[1]);
		            		String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            
			            	
		    		        pubreport.add(obj);
		            	}
		            }
		            
		            
		            else{
		            	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        	         	obj.setCount(data[1]);
	        	        
	        	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	        	             obj.setEngagementTime(data[1]);
	        	         
	        	             if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        	             obj.setVisitorCount(data[1]);
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		            
		        }
		        catch(Exception e){
		        	
		        	continue;
		        }
		        
		        
		        }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    return pubreport;
		  }
  */
  
  public List<PublisherReport> getQueryFieldChannelFilter(String queryfield,String startdate, String enddate, String channel_name, Map<String,String>filter, String filtermetric, String limit)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    

		if (queryfield.equals("Author")) {
          queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
          queryfield =  "sourceUrl";
	} 
	
		 Map<String,String> TagAggregation = new FastMap<String,String>();   
	  
	       if(queryfield.equals("sessioncount"))
	       {
	    	   

	        	List<PublisherReport> pubreport = new ArrayList();
	        	PublisherReport obj1 = new PublisherReport();
	    	    obj1.setSessionCount("17");
	            pubreport.add(obj1);
	            
	            
	            return pubreport;
	       }
	  
	        if(queryfield.equals("userDetails"))
	        {
	        	List<PublisherReport> pubreport = new ArrayList();
	            
	        	AggregationModule module =  AggregationModule.getInstance();
	    	    try {
	    			module.setUp();
	    		} catch (Exception e1) {
	    			// TODO Auto-generated catch block
	    			e1.printStackTrace();
	    		}
	   		PublisherReport obj=module.getUserdetailsChannel(startdate, enddate, channel_name, filter);
	   		
	   		pubreport.add(obj);
	   		
	   		return pubreport;	
	        	
	        }
	  
	        if(queryfield.equals("userDetailsCity"))
	        {
	        	List<PublisherReport> pubreport = new ArrayList();
	        	
	        	AggregationModule module =  AggregationModule.getInstance();
	    	    try {
	    			module.setUp();
	    		} catch (Exception e1) {
	    			// TODO Auto-generated catch block
	    			e1.printStackTrace();
	    		}
	   		pubreport=module.getUserdetailsCityChannel(startdate, enddate, channel_name, filter); 
	   		
	   		
	   	Double total = 0.0;
	    Double share =0.0;
	    Double maxTotal = 0.0; 
	    Double scaledshare = 0.0;
	        
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    }
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	      	 
	      	        	 
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		
	         for(int i=0;i<pubreport.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(numberFormat.format(count)); 
		       
       }     
	   		
	   		
	   		
	   		
	   		return pubreport;	
	        	
	        }
	        
	        if(queryfield.equals("userVisitSources"))
	        {
	        
	       
	        	queryfield = "referrerType";
	        	
	        	
	       /* 	
	        	String data0= null;
	               String data1= null;   
	               List<PublisherReport> pubreport = new ArrayList();
	           
	           for (int i = 0; i < 3; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="Social";
			          data1 = "67.0";
			          }
			          

			          if(i == 1){
			          data0="Search";
			          data1 = "25.0";
			          }
			          
			          
			          if(i == 2){
				          data0="Direct";
				          data1 = "10.0";
				      }
				    
			        
			          obj.setReferrerSource(data0);
			          
			          if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							obj.setCount(data1);
							
			          if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							obj.setEngagementTime(data1);
							
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);

			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
	           return pubreport;
	      
	        */
	        
	        
	        }       
	      
	        

	        if(queryfield.equals("userDetailsISP"))
	        {
	        	List<PublisherReport> pubreport = new ArrayList();
	        	AggregationModule module =  AggregationModule.getInstance();
	    	    try {
	    			module.setUp();
	    		} catch (Exception e1) {
	    			// TODO Auto-generated catch block
	    			e1.printStackTrace();
	    		}
	   		pubreport=module.getUserdetailsISPChannel(startdate, enddate, channel_name, filter);
	   		
	   		
	   		
	   	    Double total = 0.0;
	        Double share =0.0;
	        Double maxTotal = 0.0; 
	        Double scaledshare = 0.0;       
	        
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    }
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	      	 
	      	        	 
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		
	         for(int i=0;i<pubreport.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(numberFormat.format(count)); 
		       
       }     
	   		
	   		
	   		
	   		
	   		
	   		
	   		return pubreport;	
	        	
	        }
	        
	        
	        
	        
	        if(queryfield.equals("userDetailsSegment"))
	        {
	        	

	        	List<PublisherReport> pubreport = new ArrayList();
	        	AggregationModule module =  AggregationModule.getInstance();
	    	    try {
	    			module.setUp();
	    		} catch (Exception e1) {
	    			// TODO Auto-generated catch block
	    			e1.printStackTrace();
	    		}
	   		pubreport=module.getUserdetailsSegmentChannel(startdate, enddate, channel_name, filter);
	   		return pubreport;	
	        	
	        }
	  
	        int size = filter.size();
	        String queryfilterbuilder = "";
	        String formattedString = "";
	        String query = "";
	        int j =0;
	        for (Map.Entry<String, String> entry : filter.entrySet())
	        {
	        	if (j==0){
	                
	        		if(entry.getKey().contains("tag"))
	        	    queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";
	        		else{
	        		formattedString = addCommaString(entry.getValue());
	        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
	        		}
	        	}
	            else{
	            
	            	if(entry.getKey().contains("tag"))
		        	    queryfilterbuilder = queryfilterbuilder+" and "+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";	
	            else{	
	            formattedString = addCommaString(entry.getValue());	
	            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
	            }
	            }
	            j++;
	         
	        }
	        
	        
	        
	        if(queryfield.equals("postsPublished"))
	        {
	       	 List<PublisherReport> pubreportv1 = new ArrayList();
	       	 
	       	 pubreportv1 = getPostsPublishedChannelFilter(startdate, enddate, queryfilterbuilder, channel_name);
	       	 
	       	 return pubreportv1;
	       	 
	        }
	     
	     
	        if(queryfield.equals("postsPublishedDatewise"))
	        {
	        	
	         List<PublisherReport> pubreportv1 = new ArrayList();
		       	 
	       	 
	       	 pubreportv1 = getPostsPublishedChannelFilterDatewise(startdate, enddate, queryfilterbuilder, channel_name);
	       	 
	       	 return pubreportv1;
	       	 
	        }
	        
	        
	        
	        
	        
	        
	        
 if(queryfield.equals("topEngagingClients") && queryfilterbuilder.contains("recency") ){
	        	
	        	List<PublisherReport> pubreport = new ArrayList<PublisherReport>();
	            		
	            pubreport = getTopCookies(startdate, enddate, channel_name);
	    
	        
	            return pubreport;
	        }
	       

	        
	        
	        if(queryfield.equals("topEngagingClients") && queryfilterbuilder.contains("frequency") ){
	        	
	 List<PublisherReport> pubreport = new ArrayList<PublisherReport>();
		
     pubreport = getTopCookies(startdate, enddate, channel_name);

 
     return pubreport;
	            
	        }
 
	        
	        
	        if(queryfield.equals("topEngagingClients") && queryfilterbuilder.contains("depth") ){
 	
	 List<PublisherReport> pubreport = new ArrayList<PublisherReport>();
		
     pubreport = getTopCookies(startdate, enddate, channel_name);

 
     return pubreport;
 
 }
	        
 if(queryfield.equals("topEngagingClients") && queryfilterbuilder.contains("duration") ){
 	
	 List<PublisherReport> pubreport = new ArrayList<PublisherReport>();
		
     pubreport = getTopCookies(startdate, enddate, channel_name);

 
     return pubreport;
 }    

	        
 List<PublisherReport> pubreport = new ArrayList();
	        	

 
 
 
	if (queryfield.equals("Author")) {
     queryfield =  "authorName";
} 

	  
	if (queryfield.equals("reforiginal")) {
     queryfield =  "sourceUrl";
} 	
 
 
 /*     
	            if (queryfield.equals("reforiginal")) {

	         	    String data0= null;
	                String data1= null;   
	                String data2 = null;
	                String data3 = null;
	                String data4 = null;
	         	    String data5= null;
	                pubreport.clear();
	         	   
	 			
	 				PublisherReport obj = new PublisherReport();

	 				
	 					data0 = "http://m.facebook.com";
	 					data1 = "3026.0";
	 				    data2 = "Social";
	 				    data3 = "305";
	 				    data4 = "110";
	 				    data5 = "facebook.com";
	 				
	 				    obj.setReferrerMasterDomain(data0);
	 					
	 					obj.setReferrerType(data2);
	 				    obj.setShares(data3);
	 				    obj.setLikes(data4);
	 				    
	 				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	 						{
	 				    	
	 				    	 obj.setCount(data1);
	 						  
	 						}
	 						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	 						{
	 							
	 							obj.setEngagementTime(data1);
	 						}
	 						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	 						{
	 							
	 							obj.setVisitorCount(data1);
	 					
	 						}	    
	 				    
	 				    

	 		        PublisherReport obj1 = new PublisherReport();
	 					
	 				    data0 = "http://www.facebook.com";
	 					data1 = "1001.0";
	 				    data2 = "Social";
	 				    data3=  "207";
	 				    data4 = "53";
	 			        data5 = "facebook.com";
	 				
	 			        obj1.setReferrerMasterDomain(data0);
	 					
	 					obj1.setReferrerType(data2);
	 				    obj1.setShares(data3);
	 				    obj1.setLikes(data4);
	 				    
	 				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	 						{
	 				    	
	 				    	 obj1.setCount(data1);
	 						  
	 						}
	 						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	 						{
	 							
	 							obj1.setEngagementTime(data1);
	 						}
	 						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	 						{
	 							
	 							obj1.setVisitorCount(data1);
	 					
	 						}	
	 			        
	 			        
	 			        
	 			        
	 			        PublisherReport obj2 = new PublisherReport();
	 				
	 					data0 = "http://l.facebook.com";
	 				  	data1 = "360.0";
	 				    data2 = "Social";
	 				    data3 = "103";
	 				    data4 = "12";
	 			        data5 = "facebook.com";
	 				
	 			        
	 			        obj2.setReferrerMasterDomain(data0);
	 					
	 					obj2.setReferrerType(data2);
	 				    obj2.setShares(data3);
	 				    obj2.setLikes(data4);
	 				    
	 				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	 						{
	 				    	
	 				    	 obj2.setCount(data1);
	 						  
	 						}
	 						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	 						{
	 							
	 							obj2.setEngagementTime(data1);
	 						}
	 						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	 						{
	 							
	 							obj2.setVisitorCount(data1);
	 					
	 						}	
	 			        
	 			        
	 			        
	 			   
	 			
	 				
	 					PublisherReport obj5 = new PublisherReport();

	 					
	 				//	data0 = "http://m.facebook.com";
	 					data1 = "4387.0";
	 				    data2 = "Social";
	 				    data3 = "615";
	 				    data4 = "175";
	 				    data0 = "facebook.com";
	 					
	 				    obj5.setReferrerMasterDomain(data0);
	 					
	 					obj5.setReferrerType(data2);
	 				    obj5.setShares(data3);
	 				    obj5.setLikes(data4);
	 				    
	 				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	 						{
	 				    	
	 				    	 obj5.setCount(data1);
	 						  
	 						}
	 						if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	 						{
	 							
	 							obj5.setEngagementTime(data1);
	 						}
	 						if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	 						{
	 							
	 							obj5.setVisitorCount(data1);
	 					
	 						}	
	 				
	 				    
	 				
	 					
	 				    
	 				String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);
	 				obj.setChannelName(channel_name1);
	 				obj1.setChannelName(channel_name1);
	 				obj2.setChannelName(channel_name1);
	 			
	 				obj5.setChannelName(channel_name1);
	 				
	 				obj5.getChildren().add(obj);
	 				obj5.getChildren().add(obj1);
	 				obj5.getChildren().add(obj2);
	 				
	 				
	 				pubreport.add(obj5);
	 			
                    return pubreport;
	 			

	 		}
	     
	            */
	            
	        
	            
	        	
	            	   
	           /*	   
	           	   String data0= null;
	                  String data1= null;   
	           	   pubreport.clear();
	           	   
	           	   for (int i = 0; i < 6; i++)
	   			      {
	   			        PublisherReport obj = new PublisherReport();
	   			        
	   			        
	   			       
	   			          //if(data1[0].equals()) 
	   			         
	   			          if(i == 0){
	   			          data0="kishore";
	   			          data1 = "10078.0";
	   			          }
	   			          

	   			          if(i == 1){
	   			          data0="Medha Chawla";
	   			          data1 = "5097.0";
	   			          }
	   			          
	   			          
	   			          if(i == 2){
	   				          data0="Prabhleen Kaur";
	   				          data1 = "9231.0";
	   				      }
	   				    
	   			        
	   			          if(i == 3){
	   				          data0="Admin";
	   				          data1 = "10065.0";
	   				          }
	   				          

	   				          if(i == 4){
	   				          data0="Neha Nagpal";
	   				          data1 = "10031.0";
	   				          }
	   				          
	   				          
	   				          if(i == 5){
	   					          data0="Suman Bajpai";
	   					          data1 = "2021.0";
	   					      }
	   			          
	   			          
	   			          
	   			          obj.setArticleAuthor(data0);
	   			          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	   							obj.setCount(data1);
	   							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	   							obj.setEngagementTime(data1);
	   							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	   							obj.setVisitorCount(data1);
	   			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
	   			          pubreport.add(obj);
	   			        
	   			   //   }
	   			    //  System.out.println(headers1);
	   			    //  System.out.println(lines1);
	   			   }
	       
	                return pubreport;
	        	
	        	}
	              
	              
	              
	              
	              
	              if (queryfield.equals("tag")) {

	           	   String data0= null;
	                  String data1= null;   
	           	   pubreport.clear();
	           	   
	           	   for (int i = 0; i < 6; i++)
	   			      {
	   			        PublisherReport obj = new PublisherReport();
	   			        
	   			        
	   			       
	   			          //if(data1[0].equals()) 
	   			         
	   			          if(i == 0){
	   			          data0="lifestyle";
	   			          data1 = "20078.0";
	   			          }
	   			          

	   			          if(i == 1){
	   			          data0="bollywood";
	   			          data1 = "5093.0";
	   			          }
	   			          
	   			          
	   			          if(i == 2){
	   				          data0="politics";
	   				          data1 = "9678.0";
	   				      }
	   				    
	   			        
	   			          if(i == 3){
	   				          data0="household";
	   				          data1 = "10091.0";
	   				          }
	   				          

	   				          if(i == 4){
	   				          data0="fashion";
	   				          data1 = "10061.0";
	   				          }
	   				          
	   				          
	   				          if(i == 5){
	   					          data0="gaming";
	   					          data1 = "4045.0";
	   					      }
	   			          
	   			          
	   			          
	   			          obj.setArticleTags(data0);
	   			          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	   							obj.setCount(data1);
	   							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	   							obj.setEngagementTime(data1);
	   							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	   							obj.setVisitorCount(data1);
	   			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
	   			          pubreport.add(obj);
	   			        
	   			   //   }
	   			    //  System.out.println(headers1);
	   			    //  System.out.println(lines1);
	   			   }
	       
	               return pubreport;
	              
	              }
	              
	              
	              
	              
	              if (queryfield.equals("section")) {

	           	   String data0= null;
	                  String data1= null;   
	           	   pubreport.clear();
	           	   
	           	   for (int i = 0; i < 6; i++)
	   			      {
	   			        PublisherReport obj = new PublisherReport();
	   			        
	   			        
	   			       
	   			          //if(data1[0].equals()) 
	   			         
	   			          if(i == 0){
	   			          data0="entertainment";
	   			          data1 = "10019.0";
	   			          }
	   			          

	   			          if(i == 1){
	   			          data0="fashion";
	   			          data1 = "2043.0";
	   			          }
	   			          
	   			          
	   			          if(i == 2){
	   				          data0="food";
	   				          data1 = "5678.0";
	   				      }
	   				    
	   			        
	   			          if(i == 3){
	   				          data0="lifestyle";
	   				          data1 = "10090.0";
	   				          }
	   				          

	   				          if(i == 4){
	   				          data0="trending";
	   				          data1 = "2061.0";
	   				          }
	   				          
	   				          
	   				          if(i == 5){
	   					          data0="biztech";
	   					          data1 = "3098.0";
	   					      }
	   			          
	   			          
	   			          
	   			          obj.setSection(data0);
	   			          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	   							obj.setCount(data1);
	   							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	   							obj.setEngagementTime(data1);
	   							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	   							obj.setVisitorCount(data1);
	   			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
	   			          pubreport.add(obj);
	   			        
	   			   //   }
	   			    //  System.out.println(headers1);
	   			    //  System.out.println(lines1);
	   			   }
	       
	          
	                 return pubreport;
	              
	              }
	        	
	        	*/
	 
	
	
	  if(queryfield.equals("minutesVisitor"))	
      {
      	
      	
      	
      	
      	
      	   pubreport.clear();
      	   PublisherReport obj1 = new PublisherReport();
      	   
      	   AggregationModule module =  AggregationModule.getInstance();
       	    
      	   List<PublisherReport> pubreport1a = new ArrayList();
      	   List<PublisherReport> pubreport2 = new ArrayList();
      	   Double minutesVisitor = 0.0;
       	   
      	   try {
       			module.setUp();
       		} catch (Exception e1) {
       			// TODO Auto-generated catch block
       			e1.printStackTrace();
       		}
      		pubreport1a=module.EngagementTimeChannelFilter(startdate, enddate, channel_name,queryfilterbuilder);
      		
      		 if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
					{
			    	
      			 pubreport2=module.counttotalvisitorsChannelFilter(startdate, enddate, channel_name,queryfilterbuilder); 
      			 minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getTotalvisits()),2);
					}
					
			   if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
					{
						
						pubreport2 = module.countfingerprintChannelFilter(startdate, enddate, channel_name,queryfilterbuilder);
						minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getReach()),2);
					}	
      		
			   String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
						   
			   obj1.setMinutesperVisitor(MinutestoSecond(minutesVisitor.toString()));
			   pubreport.add(obj1);
			   return pubreport;	
      }
	
	
	
	
	
	
	
	
	
	
	
	
	
	 if (queryfield.equals("benchmarktotalViews")) {
	        
      	 AggregationModule module =  AggregationModule.getInstance();
    	    try {
    			module.setUp();
    		} catch (Exception e1) {
    			// TODO Auto-generated catch block
    			e1.printStackTrace();
    		}
   		pubreport=module.countbenchmarktotalvisitorsChannelFilter(startdate, enddate, channel_name,queryfilterbuilder);
   		
   		for(int i=0;i<pubreport.size();i++){    
        	  
   		 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
   		pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
	       
     } 
		
   		
   		return pubreport;
      }
      
      if (queryfield.equals("benchmarktotalViewsDatewise")) {
              
           	 AggregationModule module =  AggregationModule.getInstance();
         	    try {
         			module.setUp();
         		} catch (Exception e1) {
         			// TODO Auto-generated catch block
         			e1.printStackTrace();
         		}
        		pubreport=module.countbenchmarktotalvisitorsChannelFilterDatewise(startdate, enddate, channel_name, queryfilterbuilder);
        		
        		for(int i=0;i<pubreport.size();i++){    
	              	  
        			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
        			 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
	      	       
	           } 
		  		
        		
        		
        		return pubreport;
           }
   
   
    if (queryfield.equals("benchmarktotalViewsHourwise")) {
           
       	 AggregationModule module =  AggregationModule.getInstance();
     	    try {
     			module.setUp();
     		} catch (Exception e1) {
     			// TODO Auto-generated catch block
     			e1.printStackTrace();
     		}
    		pubreport=module.countbenchmarktotalvisitorsChannelFilterHourwise(startdate, enddate, channel_name, queryfilterbuilder);
    		
    		for(int i=0;i<pubreport.size();i++){    
            	  
    			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
    			 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
    	       
         } 
	  		
    		
    		
    		return pubreport;
       } 
    
    
    
    if (queryfield.equals("benchmarkuniqueVisitorsDatewise")) {
            
         	 AggregationModule module =  AggregationModule.getInstance();
       	    try {
       			module.setUp();
       		} catch (Exception e1) {
       			// TODO Auto-generated catch block
       			e1.printStackTrace();
       		}
      		pubreport=module.countbenchmarkfingerprintChannelFilterDatewise(startdate, enddate, channel_name, queryfilterbuilder);
      		
      		for(int i=0;i<pubreport.size();i++){    
            	  
    	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
    	          pubreport.get(i).setReach(numberFormat.format(count)); 
    	       
         } 
	  		
      		
      		
      		return pubreport;
         }
    
    
     if (queryfield.equals("benchmarkuniqueVisitorsHourwise")) {
            
         	 AggregationModule module =  AggregationModule.getInstance();
       	    try {
       			module.setUp();
       		} catch (Exception e1) {
       			// TODO Auto-generated catch block
       			e1.printStackTrace();
       		}
      		pubreport=module.countbenchmarkfingerprintChannelFilterHourwise(startdate, enddate, channel_name, queryfilterbuilder);
      		
      		for(int i=0;i<pubreport.size();i++){    
            	  
    	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
    	          pubreport.get(i).setReach(numberFormat.format(count)); 
    	       
         } 
	  		
      		
      		
      		return pubreport;
     }
     
      if (queryfield.equals("benchmarkuniquevisitors")) {
             
          	 AggregationModule module =  AggregationModule.getInstance();
        	    try {
        			module.setUp();
        		} catch (Exception e1) {
        			// TODO Auto-generated catch block
        			e1.printStackTrace();
        		}
       		pubreport=module.countbenchmarkfingerprintChannelFilter(startdate, enddate, channel_name, queryfilterbuilder);
       		
       		
       		for(int i=0;i<pubreport.size();i++){    
            	  
    	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
    	          pubreport.get(i).setReach(numberFormat.format(count)); 
    	       
         } 
	  		
       		
       		return pubreport;
     }
     
     
       if(queryfield.equals("benchmarkengagementTime"))	
                {
             	   
             	   AggregationModule module =  AggregationModule.getInstance();
               	    try {
               			module.setUp();
               		} catch (Exception e1) {
               			// TODO Auto-generated catch block
               			e1.printStackTrace();
               		}
              		pubreport=module.benchmarkEngagementTimeChannelFilter(startdate, enddate, channel_name, queryfilterbuilder);
              		
              		for(int i=0;i<pubreport.size();i++){    
  	              	  
  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
  	      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
  	      	       
  	           } 
  		  		
              		
              		return pubreport;
           }
           
           
            
	              if(queryfield.equals("benchmarkengagementTimeDatewise"))	
	              {
	           	   
	           	   AggregationModule module =  AggregationModule.getInstance();
	             	    try {
	             			module.setUp();
	             		} catch (Exception e1) {
	             			// TODO Auto-generated catch block
	             			e1.printStackTrace();
	             		}
	            		pubreport=module.benchmarkEngagementTimeChannelFilterDatewise(startdate, enddate, channel_name, queryfilterbuilder);
	            		
	            		for(int i=0;i<pubreport.size();i++){    
	    	              	  
	    	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
	    	      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
	    	      	       
	    	           } 
	            		
	            		
	            		return pubreport;
	              }
           
           
            if(queryfield.equals("benchmarkengagementTimeHourwise"))	
	              {
	           	   
	           	   
	           	   AggregationModule module =  AggregationModule.getInstance();
	          	    try {
	          			module.setUp();
	          		} catch (Exception e1) {
	          			// TODO Auto-generated catch block
	          			e1.printStackTrace();
	          		}
	         		pubreport=module.benchmarkEngagementTimeChannelFilterHourwise(startdate, enddate, channel_name, queryfilterbuilder);
	         		
	         		for(int i=0;i<pubreport.size();i++){    
	  	              	  
	  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
	  	      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
	  	      	       
	  	           } 
	         		
	         		
	         		return pubreport;
	              
           }
            
            
            if (queryfield.equals("totalViews")) {
		        
   		   	 AggregationModule module =  AggregationModule.getInstance();
   		 	    try {
   		 			module.setUp();
   		 		} catch (Exception e1) {
   		 			// TODO Auto-generated catch block
   		 			e1.printStackTrace();
   		 		}
   				pubreport=module.counttotalvisitorsChannelFilter(startdate, enddate, channel_name, queryfilterbuilder);
   		      
   				for(int i=0;i<pubreport.size();i++){    
	              	  
   				 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
   				 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
	      	       
	           } 
   				
   				
   				return pubreport;
   		   }
   		    
   		    
   		    
   		    if (queryfield.equals("totalViewsDatewise")) {
   		        
   			   	 AggregationModule module =  AggregationModule.getInstance();
   			 	    try {
   			 			module.setUp();
   			 		} catch (Exception e1) {
   			 			// TODO Auto-generated catch block
   			 			e1.printStackTrace();
   			 		}
   					pubreport=module.counttotalvisitorsChannelFilterDatewise(startdate, enddate, channel_name, queryfilterbuilder);
   			       
   					for(int i=0;i<pubreport.size();i++){    
    	              	  
   					 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
   					 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
    	      	       
    	           } 
   					
   					return pubreport;
   		    }
   			
   		    
   		    if (queryfield.equals("totalViewsHourwise")) {
   		        
   			   	 AggregationModule module =  AggregationModule.getInstance();
   			 	    try {
   			 			module.setUp();
   			 		} catch (Exception e1) {
   			 			// TODO Auto-generated catch block
   			 			e1.printStackTrace();
   			 		}
   					pubreport=module.counttotalvisitorsChannelFilterHourwise(startdate, enddate, channel_name, queryfilterbuilder);
   			        
   					for(int i=0;i<pubreport.size();i++){    
  	              	  
   					 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
   					pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
  	      	       
  	           } 
   					
   					
   					return pubreport;
   		    }
   		    
   		    
   			           
   		    if (queryfield.equals("uniqueVisitors")) {
   		        
   		      	 AggregationModule module =  AggregationModule.getInstance();
   		    	    try {
   		    			module.setUp();
   		    		} catch (Exception e1) {
   		    			// TODO Auto-generated catch block
   		    			e1.printStackTrace();
   		    		}
   		   		pubreport=module.countfingerprintChannelFilter(startdate, enddate, channel_name, queryfilterbuilder);
   		        
   		   		
   		   	for(int i=0;i<pubreport.size();i++){    
            	  
    	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
    	          pubreport.get(i).setReach(numberFormat.format(count)); 
    	       
         } 
   		   		
   		   		
   		   		return pubreport; 
   		    } 
   		    		
   		    
   		    
   		 if (queryfield.equals("uniqueVisitorsNotOperator")) {
		        
		      	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		   		pubreport=module.countfingerprintChannelFilterNotOperator(startdate, enddate, channel_name, queryfilterbuilder);
		        
		   		
		   	for(int i=0;i<pubreport.size();i++){    
        	  
	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
	          pubreport.get(i).setReach(numberFormat.format(count)); 
	       
     } 
		   		
		   		
		   		return pubreport; 
		    }     
   		    
   		    
   		    
   		    
   		    
   		    
   		    
   		           
   		    if (queryfield.equals("uniqueVisitorsDatewise")) {
   		        
   		      	 AggregationModule module =  AggregationModule.getInstance();
   		    	    try {
   		    			module.setUp();
   		    		} catch (Exception e1) {
   		    			// TODO Auto-generated catch block
   		    			e1.printStackTrace();
   		    		}
   		   		pubreport=module.countfingerprintChannelFilterDatewise(startdate, enddate, channel_name, queryfilterbuilder);
   		       
   		 	for(int i=0;i<pubreport.size();i++){    
          	  
  	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
  	          pubreport.get(i).setReach(numberFormat.format(count)); 
  	       
       } 
   		   		
   		   		
   		   		return pubreport;  
   		    }
   		    
   		   
   		    if (queryfield.equals("uniqueVisitorsHourwise")) {
   		        
   		      	 AggregationModule module =  AggregationModule.getInstance();
   		    	    try {
   		    			module.setUp();
   		    		} catch (Exception e1) {
   		    			// TODO Auto-generated catch block
   		    			e1.printStackTrace();
   		    		}
   		   		pubreport=module.countfingerprintChannelFilterHourwise(startdate, enddate, channel_name, queryfilterbuilder);
   		        
   		   		
   		 	for(int i=0;i<pubreport.size();i++){    
          	  
  	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
  	          pubreport.get(i).setReach(numberFormat.format(count)); 
  	       
       } 
   		   		
   		   		return pubreport;  
   		    }
   		    
   		    
   	           if(queryfield.equals("engagementTimeDatewise"))	
   	           {
   	        	   
   	        	   
   	        	   AggregationModule module =  AggregationModule.getInstance();
   	       	    try {
   	       			module.setUp();
   	       		} catch (Exception e1) {
   	       			// TODO Auto-generated catch block
   	       			e1.printStackTrace();
   	       		}
   	      		pubreport=module.EngagementTimeChannelFilterDatewise(startdate, enddate, channel_name, queryfilterbuilder);
   	      		
   	      	for(int i=0;i<pubreport.size();i++){    
              	  
      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
      	       
           } 
   	      		
   	      		
   	      		
   	      		return pubreport;
   	           
   	           }
   	           
   	           if(queryfield.equals("engagementTimeHourwise"))	
   	           {
   	        	   
   	        	   
   	        	   AggregationModule module =  AggregationModule.getInstance();
   	       	    try {
   	       			module.setUp();
   	       		} catch (Exception e1) {
   	       			// TODO Auto-generated catch block
   	       			e1.printStackTrace();
   	       		}
   	      		pubreport=module.EngagementTimeChannelFilterHourwise(startdate, enddate, channel_name, queryfilterbuilder);
   	      		
   	      		
   	      	for(int i=0;i<pubreport.size();i++){    
              	  
      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
      	       
           } 
   	      		
   	      		
   	      		
   	      		
   	      		return pubreport;
   	           
   	           }
   	           
            
   	        if(queryfield.equals("engagementTime"))	
	           {
	        	   
	        	   
	        	   AggregationModule module =  AggregationModule.getInstance();
	       	    try {
	       			module.setUp();
	       		} catch (Exception e1) {
	       			// TODO Auto-generated catch block
	       			e1.printStackTrace();
	       		}
	      		pubreport=module.EngagementTimeChannelFilter(startdate, enddate, channel_name, queryfilterbuilder);
	            
	      		for(int i=0;i<pubreport.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
	      	          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
	      	       
	           } 
	      		
	      		
	      		
	      		return pubreport;
	           }
	           
            
            
            
            
            
            
	  
	  
	        
	  	  if(queryfield.equals("visitorType")){
	  			
	  	        List<PublisherReport> pubreport1a  = new ArrayList<PublisherReport>();
	  	        List<PublisherReport> pubreport2  = new ArrayList<PublisherReport>();
	  	        List<PublisherReport> pubreport3  = new ArrayList<PublisherReport>();
	  	        
	  		   
	  	    	AggregationModule module =  AggregationModule.getInstance();
	  	    	    try {
	  	    			module.setUp();
	  	    		} catch (Exception e1) {
	  	    			// TODO Auto-generated catch block
	  	    			e1.printStackTrace();
	  	    		}
	  			
	  	    	pubreport1a=module.countUsersChannelDatewiseFilter(startdate, enddate, channel_name,filtermetric,filter); 
	  			
	  	    
	  			
	  	   
	  	   
	  	  Double total = 0.0;
	      Double share =0.0;
	      Double maxTotal = 0.0; 
	      Double scaledshare = 0.0;
	     	                   
	          for(int i=0;i<pubreport1a.size();i++){
	        	  
	        	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        		  total=total+Double.parseDouble(pubreport1a.get(i).getCount());
	             
	                //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	                //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	              
	               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	               // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	        		  if(Double.parseDouble(pubreport1a.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport1a.get(i).getCount());
	    	    }
	    	      
	        	  
	          }
	                   
	           for(int i=0;i<pubreport1a.size();i++){
	        	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/total)*100,2);
	        	        
	        	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	        	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	        	      
	        	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	        	        	 scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/maxTotal)*100,2);
	        	        	 
	        	        	 pubreport1a.get(i).setScaledShare(scaledshare.toString());	
	        	  pubreport1a.get(i).setShare(share.toString());
	        	  
	          }
	  	        
	           for(int i=0;i<pubreport1a.size();i++){    
	              	  
	      	          Integer count = (int) (Double.parseDouble(pubreport1a.get(i).getCount()));
	      	          pubreport1a.get(i).setCount(numberFormat.format(count)); 
	      	       
	           } 
	  	        
	  	        
	  	        return pubreport1a;
	  	   }
	        
	        
	        
	        
	        
	        
	        
	        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
	        
	        	
	        	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	        	
	        	if(queryfield.equals("refcurrentoriginal") && limit!=null && !limit.isEmpty())
	        	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield+" limit "+limit;
	       
	        	
	 	       
	        
	        }
	        
	        
	        if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime")){
	        
	        	
	        	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
	        	
	        	if(queryfield.equals("refcurrentoriginal") && limit!=null && !limit.isEmpty())
	        	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield+" limit "+limit;
	 	       
	        	
	        	
	        }
	        
	        
	        if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount")){
		    
	        	query = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield+"";  
	        	
	        	
	        	
	        	if(queryfield.equals("refcurrentoriginal") && limit!=null && !limit.isEmpty())
	            query = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield+" limit "+limit;  
	    		
	        	
	        	
    		
	        }    
		       
	        
	        
	        System.out.println(query);
	        CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    pubreport.clear();
		    List<PublisherReport> pubreport1  = new ArrayList<PublisherReport>();
		   
		 //   if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
		       // lines = processList(lines);
		    
		    
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        try{
		    	  
		    	  PublisherReport obj = new PublisherReport();
		    	  List<PublisherReport> obj1 = new ArrayList<PublisherReport>();
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		            if(queryfield.equals("gender")){
		        	
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	obj.setGender(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("device")){
		        	
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }
		        	
		            if(queryfield.equals("section")){
		            
		            	if(data[0].toLowerCase().equals("enterainment"))	
			        		 data[0]="Entertainment";
			        	           	
		            	obj.setSection(data[0]);
		            	
		            }
		            
		            	
		            	
		            	
		            if(queryfield.equals("referrerType")){
		            
		            	String referrerTypeId = referrerTypeMap1.get(data[0]);
		        		obj.setReferrerTypeId(referrerTypeId);
		            	
		            	obj.setReferrerSource(data[0]);
		            }
		            if(queryfield.equals("tag")){
		        		
		            	 if(data[0].toLowerCase().equals("hindibollywood"))	
			        		 data[0]="Bollywood";
			        	 
			        	 if(data[0].toLowerCase().equals("womenlifestyle"))	
			        		 data[0]="Women's Fashion";
			        	        
			        	 
			        	 if(data[0].toLowerCase().equals("hindimusic"))	
			        		 data[0]="Hindi Music";
			        	 
			        	 if(data[0].toLowerCase().equals("healthfitness"))	
			        		 data[0]="Health & Fitness";
			        	 
			        	 if(data[0].toLowerCase().equals("englishhollywood"))	
			        		 data[0]="Hollywood";
			        	 
			        	 if(data[0].toLowerCase().contains("technews"))	
			        		 data[0]="Technology News";
			        	 
			        	 if(data[0].toLowerCase().contains("mcdonald"))	
			        		 data[0]="Fast Food";
			        	 
			        	 if(data[0].toLowerCase().contains("international"))	
			        		 data[0]="International News";
			        	 
			        	
			        	 if(data.length > 2){
			        	 	 
			        		 for(int q=0; q<data.length-1; q++){
			        		      PublisherReport obj2 = new PublisherReport();
			        			 obj2.setArticleTags(data[q]);
			        			 if(AggregationModule.tagMap3.get(data[q])!=null){
			                    	 String tagId = AggregationModule.tagMap3.get(data[q]);
			        	        	 obj2.setTagId(tagId);
			        			 
			        			 }
			        		 
			        		     obj1.add(obj2);
			        		 }
			        	 }
			        	 else{
			        	 obj.setArticleTags(data[0]);
			        	
		            	 if(AggregationModule.tagMap3.get(data[0])!=null){
		            	 String tagId = AggregationModule.tagMap3.get(data[0]);
			        	 obj.setTagId(tagId);
		            	 }
		              
		             }
		            	
		            
		            
		            }
	            
	            
		            
		            if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e)
		        		{
		        			continue;
		        		}
		        		
		        		}
		        	if(queryfield.equals("audience_segment"))
		             {
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		             }
		        	
		        	if(queryfield.equals("sourceUrl")){
		        		String urlId = UrlMap1.get(data[0]);
		        		obj.setUrlId(urlId);
		        		obj.setReferrerMasterDomain(data[0]);
		        	}
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		
		        		
		        		 data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		        	
		        	if(queryfield.equals("authorName"))
		        	{
		        		obj.setArticleAuthor(data[0]);
		        	    String Id  = AuthorMap1.get(data[0]);
		        	    obj.setAuthorId(Id);
		        	}
		        	
		        		            	
		        	if(queryfield.equals("incomelevel")){
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		        	   
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
		        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
		        	
			        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
			        System.out.println(mobiledeviceproperties[2]);
			        obj.setDevicecode(mobiledeviceproperties[0]);
			        System.out.println(mobiledeviceproperties[0]);
		        	}
		         	
		        	if(queryfield.equals("brandName")){
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	
		        	
		        	Integer max = 0;	
		        Random random = new Random();	
		        Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
		        if(queryfield.equals("tag")==true)
		            max = (int)Double.parseDouble(data[data.length-1]);
		            else
		            max = (int)Double.parseDouble(data[1]);
		        Integer randomNumber1 = random.nextInt(max) + 1;
		            
		            if(queryfield.equals("audience_segment"))	
		            {
		            obj.setCount(data[1]); 	
		            obj.setExternalWorldCount(randomNumber.toString());	
		            obj.setVisitorCount(randomNumber1.toString());
		            obj.setAverageTime("0.0");	
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		           
		            else if(queryfield.equals("agegroup")==true) {
		            	
		            	if(data[0].contains("medium")==false){
		            	//	if(filtermetric == null || filtermetric.isEmpty() || filtermetric.equals("pageviews"))
		        	         	obj.setCount(data[1]);
		        	        
		        	         //    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
		        	         //    obj.setEngagementTime(data[1]);
		        	         
		        	        //     if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
		        	         //    obj.setVisitorCount(data[1]);
		            		String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            
			            	
		    		        pubreport.add(obj);
		            	}
		            }
		            
		            
		            else if(queryfield.equals("tag")==true) {
		            	
		            	if(!data[0].isEmpty())
		            	{
		            		for(int q1=0; q1<obj1.size(); q1++){
		            		 obj1.get(q1).setCount(data[data.length-1]);
		            		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.get(q1).setChannelName(channel_name1);
		            		}
		                     
		            		
		            		
		                     pubreport.addAll(obj1);
		            		
		            	}
		            
		            
		            
		            }
		            
		                 else if(queryfield.equals("section")==true) {
		            	
		                	 if(!data[0].isEmpty())
		                 	{
		                		 obj.setCount(data[1]);
		                		 
		                		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		                         
		                         
		                         pubreport.add(obj);
		                		 
		                		 
		                	}
		                	 
		                	 
		                	 
		               }
		            
		           	            
		            else{
		            	//if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
	        	         	obj.setCount(data[1]);
	        	        
	        	      //  if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
	        	      //      obj.setEngagementTime(data[1]);
	        	         
	        	      //  if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
	        	      //       obj.setVisitorCount(data[1]);
		            
	        	        if(queryfield.equals("sourceUrl") || queryfield.equals("referrerType")){
       	            	 
       	            	 if(data[0].contains("Social")){
       	           			obj.setLikes("45");
       	           		    obj.setShares("10");
       	           		}		
       	            	 
       	            	 else if(data[0].contains("facebook")){
       	            		 
       	            		 obj.setLikes("45");
        	           		     obj.setShares("10");
       	            	 }
       	            	 
       	            	 
       	            	  else{	
       	           			
       	           			obj.setLikes("0");
       	           			obj.setShares("0");
       	           			
       	           		}		 
       	            	 
       	             }
	        	        
	        	        
	        	        
	        	        
	        	        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		            
		        }
		        catch(Exception e){
		        	
		        	continue;
		        }
		        
		        
		        }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		   
		    
		    

		      if(queryfield.equals("tag")){
		    	
		    	Double valuev1 = 0.0;
		    	
		    	for(int i=0; i<pubreport.size(); i++){
		    		
		    		if(TagAggregation.containsKey(pubreport.get(i).getArticleTags())==false){
			        	
			        	
			        //	valuev1 = TagAggregation.get(pubreport.get(i).getArticleTags());
			        	TagAggregation.put(pubreport.get(i).getArticleTags(),pubreport.get(i).getCount());
			        	
			        	}
			        	
			        
			        else{
			        	
			        	valuev1 = Double.parseDouble(TagAggregation.get(pubreport.get(i).getArticleTags()));
			        	TagAggregation.put(pubreport.get(i).getArticleTags(),new Double(valuev1+(Double.parseDouble(pubreport.get(i).getCount()))).toString());
			        	pubreport.get(i).setCount(new Double(valuev1+(Double.parseDouble(pubreport.get(i).getCount()))).toString());
			        	
				        }	
			        }
		    
		    	
		    	    pubreport.clear();
		    
		    	 for (Map.Entry<String, String> entry : TagAggregation.entrySet())
				    {
				        System.out.println(entry.getKey() + "," + entry.getValue());
				        PublisherReport obj5 = new PublisherReport();
				        obj5.setArticleTags(entry.getKey());
				        obj5.setCount(entry.getValue());
				        if(AggregationModule.tagMap3.get(entry.getKey())!=null){
			            	 String tagId = AggregationModule.tagMap3.get(entry.getKey());
				        	 obj5.setTagId(tagId);
			            	 }
				        pubreport.add(obj5);
				    }
		    	
		    	
		    	
		    	
		    	}
		    
		    
		    if(queryfield.equals("sourceUrl")){
		    	
	    		
		    	List<PublisherReport> pubreporta1 = NestedJSON5.getNestedReffererJSON(pubreport,filtermetric);
		    		return pubreporta1;  		
		    		
		    	}
		    
		  Double  total = 0.0;
	      Double  share =0.0;
	     Double maxTotal = 0.0; 
	     Double scaledshare = 0.0;
	     	                  
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
   	    	    {
   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
 	    }
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	 
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		    
		    
		    
		    
		    
		    if(queryfield.equals("articlecombined"))
		    {

		    	    pubreport1.clear();
				 
				    ExecutorService executorService = Executors.newFixedThreadPool(2000);
			        
			        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
			    
			        List<String> Query = new ArrayList();
			     
			        queryfield = "refcurrentoriginal";
			       
					String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
					    
						
				    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
						
						
				    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+" LIMIT 60";  
			       
				    
				    Query.add(query1);
			        Query.add(query2);
				    Query.add(query3);
			       
			       for( j=0 ; j < Query.size(); j++ ){
			       lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
			    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
			        
			       // returns a list of Futures holding their status and results when all complete
			    
			   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
			       }
			       
			       
			       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				

				    for (int k = 0; k < maps.size(); k++)
				    {
				    
				    	if(maps!=null && maps.get(k)!=null){
				        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				        pubreport1.addAll(map);
				    	}
				
		    }
			
				 
				    
				    
				    
				    
				    
				    
				    
				    
				    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				    
				    List<PublisherReport> object = new ArrayList<PublisherReport>();
				    
				    
				    for(int k=0; k< pubreport1.size(); k++)
				    {
			         try{ 
				    	String page = pubreport1.get(k).getPublisher_pages();
				    	
				    	  String count =  pubreport1.get(k).getCount();
			        		
					        String engagementTime =  pubreport1.get(k).getEngagementTime();		
					        
					        String visitorCount = pubreport1.get(k).getVisitorCount();
				    	
				    	if(aggregatedmap.containsKey(page))
			        {
			       
			        PublisherReport obj = aggregatedmap.get(page);
			        obj.setPublisher_pages(page);
			        
			      
			        
			        if(count!=null)
			        obj.setCount(count);
			        	
			        if(engagementTime!=null) 	
			        	obj.setEngagementTime(engagementTime);
			        	
			       if(visitorCount!=null) 	
			        	obj.setVisitorCount(visitorCount);
			        
				   
			       if(page !=null) 	
			    	   obj.setPublisher_pages(page);
			  	
			       
			       
				    aggregatedmap.put(page, obj);
				    
			        }
			        else{
			        	       
			        	        PublisherReport obj = new PublisherReport();
			        	     
			        	        if(count !=null)
			        	        obj.setCount(count);
			        	        	
			        	        if(engagementTime !=null) 	
			        	        obj.setEngagementTime(engagementTime);
			        	        	
			        	       if(visitorCount !=null) 	
			        	        obj.setVisitorCount(visitorCount);
			        	
			        	       if(page!=null) {	
			        	    	obj.setPublisher_pages(page);
			        	    	String url = page;
			        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	      
			        	    	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			 		        	
			        	       
			        	       
			        	       }
			        	       aggregatedmap.put(page, obj);
			        
			        
			        }
			         }
			         catch(Exception e){
			        	 continue;
			         }
			      
				    }
				    
				    int l = 0;
				    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				    
				    	//l++;
				    	//if(l==30)
				    	//	break;
				    	try{
				    	String key = entry.getKey();
				        PublisherReport obj = entry.getValue();

				        Double averageTime = 0.0;
				        
				        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
				        averageTime= NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getCount()),2);
				        
				        
				        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
				        averageTime= NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getVisitorCount()),2);
				        
				        
				        obj.setAverageTime(MinutestoSecond(averageTime.toString()));
				        
				        
				        String url = obj.getPublisher_pages();
				        String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	
				        
				        
				        object.add(obj); 
				      }
				      catch(Exception e){
				    	  continue;
				      }
				    
				    }
				    
				    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
					    
			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
			 		        }
			 		    });	
					    
					    }
					    
					    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
					    	

				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
				 		        }
				 		    });	
					    	
					    	
					    }
					    
					    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
					    	
			                    Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
				 		        }
				 		    });	
					    	
					    	
					    }
					    
					    
					    
					    
					    
					    executorService.shutdown();
					 
					    
					    
                        Double total2 = 0.0;
	      Double totalvisits = 0.0;
	      Double totaleT = 0.0;
	      Double totalvisitor = 0.0;
	      Double share1 = 0.0;
	      Double sharevisits = 0.0;
	      Double shareeT = 0.0;
	      Double sharevisitor = 0.0;
	      maxTotal = 0.0; 
	      scaledshare = 0.0;	 
	      Double scaledsharevisits = 0.0;
	      Double scaledshareeT = 0.0;
	      Double scaledsharevisitor = 0.0;
	      Double maxsharevisits = 0.0;
	      Double maxshareeT = 0.0;
	      Double maxsharevisitor = 0.0;
	      
	        for(int i=0;i<object.size();i++){
	      	  
	      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
	      		  { 
	      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
	      			   	    	    {
	      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
	      	 	    	    }
	      		  
	      		  
	      		  
	      		  }
	      	      
	      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
	      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
	      	    	 
	      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
	    	    }
	      	      
	      	      
	      	      }
	      	      
	      	      
	      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
	      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
	      	    
	      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
	    	    }
	      	      
	      	      
	      	      }  	  
	      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
	             

	      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
	              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
	              
	              
	              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
	   	    	    {
	            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
   	    }
	              
	              
	              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
	   	    	    {
	            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
  	    }
	              
	              
	              
	              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
	   	    	    {
	            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
  	    }
	              
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      	  
	      	  
	        }
	                 
	         for(int i=0;i<object.size();i++){
	      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
	      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
	      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
	      	             
	      	             }
	      	             
	      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
	      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
	      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
	      	                 
	      	             }
	      	            	 
	      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
	      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
	      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
	      	            }
	      	            	 
	      	            	 
	      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
	      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
	      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
	      	           
	      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
	      	           
	      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
	      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
	      	             
	      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
	      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
	      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
	      	  object.get(i).setShare(share.toString());
	      	  object.get(i).setSharetotalvisits(sharevisits.toString());
	      	  object.get(i).setShareeT(shareeT.toString());
	      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
	          object.get(i).setScaledShare(scaledshare.toString());
	         }
	    		  
	    		  
	      
					    	 
					    		  
					    		  
					      
					      
					         for(int i=0;i<object.size();i++){    
					        	   
					        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
							         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
							       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
							          object.get(i).setCount(numberFormat.format(count)); 
							       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
							          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
					           }        
					         
					         
					         
				    return object;		
					
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				   
		    }
			
			if(queryfield.equals("sectioncombined"))
		    {
				
				
				 pubreport1.clear();

				  ExecutorService executorService = Executors.newFixedThreadPool(2000);
			      
			      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
			  
			      List<String> Query = new ArrayList();
			   
			      queryfield = "section";
			     
					String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
					    
						
				   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						
						
				    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
			     
				    
				    String query5= "Select "+queryfield+",COUNT(DISTINCT(refcurrentoriginal))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				    
				    
				    Query.add(query1);
				    Query.add(query2);
				    Query.add(query3);
			        Query.add(query5);
				    
			     for(j=0 ; j < Query.size(); j++ ){
			     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
			  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
			     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
			     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
			     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
			      
			     // returns a list of Futures holding their status and results when all complete
			  
			 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
			     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
			     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
			     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
			     }
			     
			     
			     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				

				    for (int k = 0; k < maps.size(); k++)
				    {
				    
				    	if(maps!=null && maps.get(k)!=null){
				        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				        pubreport1.addAll(map);
				    	}
				
			}

			        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				    
				    List<PublisherReport> object = new ArrayList<PublisherReport>();
				    
				    
				    for(int k=0; k< pubreport1.size(); k++)
				    {
			        if(aggregatedmap.containsKey(pubreport1.get(k).getSection()))
			        {
			       
			        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getSection());
			        obj.setSection(pubreport1.get(k).getSection());
			        
			        
			        
			        if(pubreport1.get(k).getCount()!=null)
			        obj.setCount(pubreport1.get(k).getCount());
			        	
			        if(pubreport1.get(k).getEngagementTime()!=null) 	
			        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
			        	
			       if(pubreport1.get(k).getVisitorCount()!=null) 	
			        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
			        
			       if(pubreport1.get(k).getPosts()!=null) 	
			       	obj.setPosts(pubreport1.get(k).getPosts());
			       
			       
			       
			       if(pubreport1.get(k).getSection()!=null) 	
			  	        obj.setSection(pubreport1.get(k).getSection());
			  	
			       
			       
				    aggregatedmap.put(pubreport1.get(k).getSection(), obj);
				    
			        }
			        else{
			        	       
			        	        PublisherReport obj = new PublisherReport();
			        	     
			        	        if(pubreport1.get(k).getCount()!=null)
			        	        obj.setCount(pubreport1.get(k).getCount());
			        	        	
			        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
			        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
			        	        	
			        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
			        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
			        	
			        	       if(pubreport1.get(k).getPosts()!=null) 	
			        	          	obj.setPosts(pubreport1.get(k).getPosts());
			        	       
			        	       
			        	       
			        	       if(pubreport1.get(k).getSection()!=null) 	
			           	        obj.setSection(pubreport1.get(k).getSection());
			           	
			        	       aggregatedmap.put(pubreport1.get(k).getSection(), obj);
			        
			        
			        }
			   
			      
				    }
				    
				    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				        String key = entry.getKey();
				        PublisherReport value = entry.getValue();
				       // String authorId = AuthorMap1.get(value.getArticleAuthor());
			    		//value.setAuthorId(authorId);
				       
				        Double averageTime = 0.0;
				        
				        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
				        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
				        
				        
				        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
				        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
				        
				        
				        value.setAverageTime(MinutestoSecond(averageTime.toString()));
				       
				        
				        
				        Integer pageViewsperPost = 0;
				        
				        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
				        
				        
				        value.setPageViewsPost(pageViewsperPost.toString());
				        
				        
				        
				        
				        if(value.getSection().equals("enterainment"))	
			        		 value.setSection("Entertainment");
			        	 
				        if(!value.getSection().isEmpty())
				        object.add(value); 
				       
				    
				    
				    }
				    
				    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
					    
			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
			 		        }
			 		    });	
					    
					    }
					    
					    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
					    	

				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
				 		        }
				 		    });	
					    	
					    	
					    }
					    
					    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
					    	
			                    Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
				 		        }
				 		    });	
					    	
					    	
					    }
					    
					    
					    
					    
					    
					    executorService.shutdown();
					 
					    
					    

                        Double total2 = 0.0;
	      Double totalvisits = 0.0;
	      Double totaleT = 0.0;
	      Double totalvisitor = 0.0;
	      Double share1 = 0.0;
	      Double sharevisits = 0.0;
	      Double shareeT = 0.0;
	      Double sharevisitor = 0.0;
	      maxTotal = 0.0; 
	      scaledshare = 0.0;	 
	      Double scaledsharevisits = 0.0;
	      Double scaledshareeT = 0.0;
	      Double scaledsharevisitor = 0.0;
	      Double maxsharevisits = 0.0;
	      Double maxshareeT = 0.0;
	      Double maxsharevisitor = 0.0;
	      
	        for(int i=0;i<object.size();i++){
	      	  
	      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
	      		  { 
	      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

	      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
	      			   	    	    {
	      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
	      	 	    	    }
	      		  
	      		  
	      		  
	      		  }
	      	      
	      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
	      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
	      	    	 
	      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
	    	    }
	      	      
	      	      
	      	      }
	      	      
	      	      
	      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
	      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
	      	    
	      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
	    	    }
	      	      
	      	      
	      	      }  	  
	      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
	             

	      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
	              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
	              
	              
	              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
	   	    	    {
	            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
   	    }
	              
	              
	              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
	   	    	    {
	            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
  	    }
	              
	              
	              
	              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
	   	    	    {
	            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
  	    }
	              
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      	  
	      	  
	        }
	                 
	         for(int i=0;i<object.size();i++){
	      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
	      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
	      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
	      	             
	      	             }
	      	             
	      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
	      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
	      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
	      	                 
	      	             }
	      	            	 
	      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
	      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
	      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
	      	            }
	      	            	 
	      	            	 
	      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
	      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
	      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
	      	           
	      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
	      	           
	      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
	      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
	      	             
	      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
	      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
	      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
	      	  object.get(i).setShare(share.toString());
	      	  object.get(i).setSharetotalvisits(sharevisits.toString());
	      	  object.get(i).setShareeT(shareeT.toString());
	      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
	          object.get(i).setScaledShare(scaledshare.toString());
	         }
	    		  
	    		  
	    		  
	      
					      

					       
					      
					      
					    		  
					    		  
					      
					       
					
					         for(int i=0;i<object.size();i++){    
					        	   
					        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
							         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
							       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
							          object.get(i).setCount(numberFormat.format(count)); 
							       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
							          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
					          
							          Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
					                  object.get(i).setPosts(numberFormat.format(posts));
					         }        
					         
					         
					         
				    return object;		
					
				
				
		    }

			
			
			if(queryfield.equals("authorcombined"))
		    {


				 pubreport1.clear();
			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "authorName";
		     
				String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
					
			   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		     
			    
			    String query5= "Select "+queryfield+",COUNT(DISTINCT(refcurrentoriginal))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
			    
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		        Query.add(query5);
			    
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getArticleAuthor()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getArticleAuthor());
		        obj.setArticleAuthor(pubreport1.get(k).getArticleAuthor());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
		       if(pubreport1.get(k).getPosts()!=null) 	
		       	obj.setPosts(pubreport1.get(k).getPosts());
		       
		       
		       
		       if(pubreport1.get(k).getArticleAuthor()!=null) 	
		  	        obj.setArticleAuthor(pubreport1.get(k).getArticleAuthor());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getArticleAuthor(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getPosts()!=null) 	
		        	          	obj.setPosts(pubreport1.get(k).getPosts());
		        	       
		        	       
		        	       
		        	       if(pubreport1.get(k).getArticleAuthor()!=null) 	
		           	        obj.setArticleAuthor(pubreport1.get(k).getArticleAuthor());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getArticleAuthor(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			        

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        Integer pageViewsperPost = 0;
			        
			        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
			        
			        
			        value.setPageViewsPost(pageViewsperPost.toString());
			        
			        
			        String authorId = AuthorMap1.get(value.getArticleAuthor());
		    		value.setAuthorId(authorId);
			        object.add(value); 
			    
			    
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
  		  
    
				    		  
				    		  
				      
				       
				  
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				          
						          Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
				                  object.get(i).setPosts(numberFormat.format(posts));
				         
				         
				         
				         }         
				         
				         
				         
			    return object;		
				
				
				
				
		    }

			
			
			if(queryfield.equals("gendercombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "gender";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getGender()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getGender());
		        obj.setGender(pubreport1.get(k).getGender());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getGender()!=null) 	
		  	        obj.setGender(pubreport1.get(k).getGender());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getGender(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getGender()!=null) 	
		           	        obj.setGender(pubreport1.get(k).getGender());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getGender(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			       

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        
			        String gender = value.getGender();
			        
			        String genderId = GenderMap1.get(gender);
	        		value.setGenderId(genderId);
			        
			        value.setGender(capitalizeString(gender));
			        object.add(value); 
			    
			    
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
    
				      
			    
				         
				         Collections.sort(object, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
						        }
						    });	
				         
				         
				         
				         
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }
				         
				         
				         return object;		
				
				
				
				
		    }

			
			

			if(queryfield.equals("agegroupcombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "agegroup";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getAge()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getAge());
		        obj.setAge(pubreport1.get(k).getAge());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getArticleAuthor()!=null) 	
		  	        obj.setAge(pubreport1.get(k).getAge());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getAge(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getAge()!=null) 	
		           	        obj.setArticleAuthor(pubreport1.get(k).getAge());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getAge(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			       

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        
			        try{
			        String age = value.getAge();
			        
			        
			        String ageId = AgeMap1.get(age);
	        	    value.setAgeId(ageId);
			        
	        	     age=age.replace("_","-");
		   		     age=age+ " Years";
		   		     if(age.contains("medium")==false){
		   		     value.setAge(age);
			         object.add(value); 
		   		     }
			       }
			       catch(Exception e){
			    	   continue;
			       }
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
    
				    		  
				      
				        
				           
				        	   Collections.sort(object, new Comparator<PublisherReport>() {
									
									@Override
							        public int compare(PublisherReport o1, PublisherReport o2) {
										return  o1.getAge().compareTo(o2.getAge());
							        }
							    });	
				          
				           
				        	   for(int i=0;i<object.size();i++){    
					        	   
					        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
							         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
							       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
							          object.get(i).setCount(numberFormat.format(count)); 
							       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
							          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
					           }
				         
				         
				         return object;		
				
				
				
				
		    }


			if(queryfield.equals("incomelevelcombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "incomelevel";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for( j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getIncomelevel()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getIncomelevel());
		        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getIncomelevel()!=null) 	
		  	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getIncomelevel()!=null) 	
		           	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			       

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        String incomelevel = value.getIncomelevel();
			        value.setIncomelevel(capitalizeString(incomelevel));
			        object.add(value); 
			    
			    
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
    
				      
				         
				         Collections.sort(object, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
						        }
						    });	
				         
				         
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }
				         
				         
				         return object;		
				
				
				
				
		    }

			
			
			
			if(queryfield.equals("citycombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "city";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getCity()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCity());
		        obj.setCity(pubreport1.get(k).getCity());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getCity()!=null) 	
		  	        obj.setCity(pubreport1.get(k).getCity());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getCity(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getCity()!=null) 	
		           	        obj.setCity(pubreport1.get(k).getCity());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getCity(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			        

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        
			        String city = value.getCity();
			        if(!city.equals("undetermined")){
			        try{
		        		
			        	String locationproperties = citycodeMap.get(city);
				        city=city.replace("_"," ").replace("-"," ");
				        if(citylatlongMap1.get(city)!=null && !citylatlongMap1.get(city).isEmpty())
				        value.setCitylatlong(citylatlongMap1.get(city));
				        city=capitalizeString(city);
				        value.setCity(city);
				        System.out.println(city);
				        value.setLocationcode(locationproperties);
		        		
		        		}
		        		catch(Exception e){
		        			continue;
		        		}
			        object.add(value); 
			    }
			    
			    }
			    
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
  		  
    
				    		  
				      
				       
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }        
				         
				         
			    return object;		
				
				
				
				
		    }

			

			if(queryfield.equals("statecombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "state";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getState()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getState());
		        obj.setState(pubreport1.get(k).getState());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getState()!=null) 	
		  	        obj.setState(pubreport1.get(k).getState());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getState(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getState()!=null) 	
		           	        obj.setState(pubreport1.get(k).getState());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getState(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			        
			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        
			        String state  = value.getState();
			      
			        if(!state.equals("undetermined")){
			        state=state.replace("_", " ");

		        	String stateId = StateMap1.get(state);
		            if(stateId!=null && !stateId.isEmpty())
		        	value.setStateId(stateId);
			        state = capitalizeString(state);
		        	value.setState(state);
			        
			        object.add(value); 
			        }
			    
			    }
			    
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
  		  
    
				      
				
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }         
				         
				         
			    return object;		
				
				
				
				
		    }

			

			
			
			
			
			
			if(queryfield.equals("countrycombined"))
		    {

				 pubreport1.clear();
			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "country";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getCountry()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCountry());
		        obj.setCountry(pubreport1.get(k).getCountry());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getArticleAuthor()!=null) 	
		  	        obj.setCountry(pubreport1.get(k).getCountry());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getCountry()!=null) 	
		           	        obj.setCountry(pubreport1.get(k).getCountry());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			      

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        String country = value.getCountry();
			       
			        if(!country.equals("undetermined")){
			        country=country.replace("_", " ");
			        String countryId = CountryMap1.get(country);
		            if(countryId !=null && !countryId.isEmpty())
			        value.setCountryId(countryId);
			        
			        country = capitalizeString(country);
		        	value.setCountry(country);
			        
			        object.add(value); 
			        }
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
  		  
    
				    		  
				      
				       
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }        
				         
				         
				         
			    return object;		
				
				
				
				
		    }

			

			
			
			
			
			

			if(queryfield.equals("devicecombined"))
		    {

				 pubreport1.clear();
			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "device";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
		      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getDevice_type()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getDevice_type());
		        obj.setDevice_type(pubreport1.get(k).getDevice_type());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getDevice_type()!=null) 	
		  	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getDevice_type()!=null) 	
		           	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			      

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        String deviceType = value.getDevice_type();
			        value.setDevice_type(capitalizeString(deviceType));
			        object.add(value); 
			    
			    
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
    
				       
				
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }         
				         
				         
				         
				         
			    return object;		
				
				
				
				
		    }
			
			if(queryfield.equals("modelcombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "modelName";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}
			    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getMobile_device_model_name()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getMobile_device_model_name());
		        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
		  	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
		           	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        
			    	String key = entry.getKey();
			        PublisherReport value = entry.getValue();
                   
			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        
			        try{
			        String modelName = devicecodeMap.get(value.getMobile_device_model_name());
			        String[] mobiledeviceproperties = modelName.split(",");
		        	
			        value.setMobile_device_model_name(mobiledeviceproperties[2]);
			        System.out.println(mobiledeviceproperties[2]);
			        value.setDevicecode(mobiledeviceproperties[0]);
			        System.out.println(mobiledeviceproperties[0]);
			        if(modelName.toLowerCase().contains("tablet")==false)
			        object.add(value); 
                    }
                    catch(Exception e){
                    	continue;
                    }
			     
			    }
			    
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
  		  
    
				    		  
				    		  
				      
				        
				 
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }         
				         
				         
				         
				         
			    return object;		
				
				
		    }
		    
			
			


			if(queryfield.equals("oscombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "system_os";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
		      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getOs()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOs());
		        obj.setOs(pubreport1.get(k).getOs());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getOs()!=null) 	
		  	        obj.setOs(pubreport1.get(k).getOs());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getOs(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getOs()!=null) 	
		           	        obj.setOs(pubreport1.get(k).getOs());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getOs(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			       

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        
			        
			        try{
			        String os = value.getOs();
			        String osproperties = oscodeMap.get(os);
			        os=os.replace("_"," ").replace("-", " ");
			        os = AggregationModule.capitalizeFirstLetter(os);
			        String [] osParts = oscodeMap1.get(osproperties).split(",");
			        value.setOs(osParts[0]);
			        value.setOSversion(osParts[1]);
			        value.setOscode(osproperties);
			       }
			       catch(Exception e)
			       {
			    	   continue;
			       }
			    
			    
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
  		  
    
				      
				 
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }         
				         
				         
				         
				         
			    return object;		
				
				
				
				
		    }


			if(queryfield.equals("brandcombined"))
		    {

				 pubreport1.clear();
			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "brandName";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
		      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getBrandname()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getBrandname());
		        obj.setBrandname(pubreport1.get(k).getBrandname());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getBrandname()!=null) 	
		  	        obj.setBrandname(pubreport1.get(k).getBrandname());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getBrandname()!=null) 	
		           	        obj.setBrandname(pubreport1.get(k).getBrandname());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			      
			        

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			
			        try{
			        String brand = value.getBrandname();
			        brand = brand.replace("_", " ");
			        brand = AggregationModule.capitalizeFirstLetter(brand);
		    		value.setBrandname(brand);
			        object.add(value);  
			       }
			       catch(Exception e)
			       {
			    	   continue;
			       }
			    }
			    
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
  		  
    
				    		  
				      
				        
				 
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }         
				         
				         
				         
			    return object;		
				
				
				
				
		    }

			
			

			if(queryfield.equals("ISPcombined"))
		    {

				 pubreport1.clear();
			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "ISP";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
		      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getISP()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getISP());
		        obj.setISP(pubreport1.get(k).getISP());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getISP()!=null) 	
		  	        obj.setISP(pubreport1.get(k).getISP());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getISP(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getISP()!=null) 	
		           	        obj.setISP(pubreport1.get(k).getISP());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getISP(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			       

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        
			        try{
			        String isp = value.getISP();
			        if(isp.trim().toLowerCase().equals("_ltd")==false){
		    	        isp = isp.replace("_", " ").replace("-", " ");
		    			value.setISP(capitalizeString(isp));
			        
			        object.add(value); 
			        }
			       }
			       catch(Exception e)
			       {
			    	continue;   
			       }
			    
			    }
			    
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
    
				      
				       
				 
				         
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }         
				         
				         
			    return object;		
				
				
				
				
		    }


			if(queryfield.equals("organisationcombined"))
		    {

				 pubreport1.clear();
			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "organisation";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
		      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
		     
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}

		        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getOrganisation()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOrganisation());
		        obj.setOrganisation(pubreport1.get(k).getOrganisation());
		        
		        
		        
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getOrganisation()!=null) 	
		  	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getOrganisation()!=null) 	
		           	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			       

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        try{
			        String organisation = value.getOrganisation();
			        if((!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("communication")) && (!organisation.trim().toLowerCase().contains("cable")) && (!organisation.trim().toLowerCase().contains("telecom")) && (!organisation.trim().toLowerCase().contains("network")) && (!organisation.trim().toLowerCase().contains("isp")) && (!organisation.trim().toLowerCase().contains("hathway")) && (!organisation.trim().toLowerCase().contains("internet")) && (!organisation.trim().toLowerCase().equals("_ltd")) && (!organisation.trim().toLowerCase().contains("googlebot")) && (!organisation.trim().toLowerCase().contains("sify")) && (!organisation.trim().toLowerCase().contains("bsnl")) && (!organisation.trim().toLowerCase().contains("reliance")) && (!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("tata")) && (!organisation.trim().toLowerCase().contains("nextra"))){
			        	organisation = organisation.replace("_", " ").replace("-", " ");
		        	    value.setOrganisation(capitalizeString(organisation));
		        	
			        object.add(value); 
			        }
			        }
			        catch(Exception e)
			        {
			        	continue;
			        }
			    
			        
			        
			        
			        }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
    
				     
				 
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				           }        
				         
				         
				         
			    return object;		
				
				
				
				
		    }

			
				
			
			if(queryfield.equals("topiccombined"))
		    {
				 pubreport1.clear();

			    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		      
		      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		  
		      List<String> Query = new ArrayList();
		   
		      queryfield = "tag";
		     
		      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
			    
			    
				
			    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					
					
			    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		       
			    
			    
			    Query.add(query1);
			    Query.add(query2);
			    Query.add(query3);
		     
		     for(j=0 ; j < Query.size(); j++ ){
		     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		      
		     // returns a list of Futures holding their status and results when all complete
		  
		 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		     }
		     
		     
		     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
			

			    for (int k = 0; k < maps.size(); k++)
			    {
			    
			    	if(maps!=null && maps.get(k)!=null){
			        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
			        pubreport1.addAll(map);
			    	}
			
		}
			    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
			    
			    List<PublisherReport> object = new ArrayList<PublisherReport>();
			    
			    
			    for(int k=0; k< pubreport1.size(); k++)
			    {
		        if(aggregatedmap.containsKey(pubreport1.get(k).getArticleTags()))
		        {
		       
		        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getArticleTags());
		        obj.setArticleTags(pubreport1.get(k).getArticleTags());
		        if(pubreport1.get(k).getCount()!=null)
		        obj.setCount(pubreport1.get(k).getCount());
		        	
		        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	
		       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        
			   
		       if(pubreport1.get(k).getArticleTags()!=null) 	
		  	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
		  	
		       
		       
			    aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
			    
		        }
		        else{
		        	       
		        	        PublisherReport obj = new PublisherReport();
		        	     
		        	        if(pubreport1.get(k).getCount()!=null)
		        	        obj.setCount(pubreport1.get(k).getCount());
		        	        	
		        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		        	        	
		        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		        	
		        	       if(pubreport1.get(k).getArticleTags()!=null) 	
		           	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
		           	
		        	       aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
		        
		        
		        }
		   
		      
			    }
			    
			    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
			        String key = entry.getKey();
			        PublisherReport value = entry.getValue();
			        

			        Double averageTime = 0.0;
			        
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
			        
			        
			        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
			        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
			        
			        
			        value.setAverageTime(MinutestoSecond(averageTime.toString()));
			        
			        
			        Integer pageViewsperPost = 0;
			        
			        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
			        
			        
			        value.setPageViewsPost(pageViewsperPost.toString());
			        
			        
			        
			        if(value.getArticleTags().toLowerCase().equals("hindibollywood"))	
			       		   value.setArticleTags("Bollywood");
			       	 
			       	    if(value.getArticleTags().toLowerCase().equals("womenlifestyle"))	
			       		   value.setArticleTags("Women's Fashion");
				        
			       	    
			       	 if(value.getArticleTags().toLowerCase().equals("hindimusic"))	
			       		 value.setArticleTags("Hindi Music");
			       	 
			       	 if(value.getArticleTags().toLowerCase().equals("healthfitness"))	
			       		 value.setArticleTags("Health & Fitness");
			       	 
			       	 if(value.getArticleTags().toLowerCase().equals("englishhollywood"))	
			       		 value.setArticleTags("Hollywood");
			       	 
			       	 if(value.getArticleTags().toLowerCase().contains("technews"))	
			       		 value.setArticleTags("Technology News");
			       	 
			       	 if(value.getArticleTags().toLowerCase().contains("mcdonald"))	
			       		 value.setArticleTags("Fast Food");
			       	    
			    	 if(value.getArticleTags().toLowerCase().contains("international"))	
			       		 value.setArticleTags("International News");   
			       	    
			    	 if(AggregationModule.tagMap3.get(value.getArticleTags()) != null){
			           	 String tagId = AggregationModule.tagMap3.get(value.getArticleTags());
			        	 value.setTagId(tagId);
			           	 }      
			       	    if(!value.getArticleTags().isEmpty())
			       	       object.add(value); 
				    
			    
			    }
			    
			    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
				    
		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		 		        }
		 		    });	
				    
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
				    	

			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
				    	
		                    Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
			 		        }
			 		    });	
				    	
				    	
				    }
				    
				    
				    
				    
				    
				    executorService.shutdown();
				 
				    

                    Double total2 = 0.0;
      Double totalvisits = 0.0;
      Double totaleT = 0.0;
      Double totalvisitor = 0.0;
      Double share1 = 0.0;
      Double sharevisits = 0.0;
      Double shareeT = 0.0;
      Double sharevisitor = 0.0;
      maxTotal = 0.0; 
      scaledshare = 0.0;	 
      Double scaledsharevisits = 0.0;
      Double scaledshareeT = 0.0;
      Double scaledsharevisitor = 0.0;
      Double maxsharevisits = 0.0;
      Double maxshareeT = 0.0;
      Double maxsharevisitor = 0.0;
      
        for(int i=0;i<object.size();i++){
      	  
      	      if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
      		  { 
      	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

      		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
      			   	    	    {
      			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
      	 	    	    }
      		  
      		  
      		  
      		  }
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
      	    	 
      	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
    	    }
      	      
      	      
      	      }
      	      
      	      
      	      if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
      	    
      	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
    	    }
      	      
      	      
      	      }  	  
      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
             

      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
              
              
              if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
   	    	    {
            	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	    }
              
              
              if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
   	    	    {
            	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	    }
              
              
              
              if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
   	    	    {
            	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	    }
              
              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
            
             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
      	  
      	  
        }
                 
         for(int i=0;i<object.size();i++){
      	             if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
      	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
      	             
      	             }
      	             
      	             if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
      	                 
      	             }
      	            	 
      	            if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") ){
      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
      	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
      	            }
      	            	 
      	            	 
      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
      	      
      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
      	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
      	           
      	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
      	           
      	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
      	       //  object.get(i).setScaledShare(scaledshare.toString());	             
      	             
      	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
      	  object.get(i).setScaledshareeT(scaledshareeT.toString());
      	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
      	  object.get(i).setShare(share.toString());
      	  object.get(i).setSharetotalvisits(sharevisits.toString());
      	  object.get(i).setShareeT(shareeT.toString());
      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
          object.get(i).setScaledShare(scaledshare.toString());
         }
    		  
  		  
    
				      
				       
				         
				         for(int i=0;i<object.size();i++){    
				        	   
				        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
						         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
						       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
						          object.get(i).setCount(numberFormat.format(count)); 
						       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
						          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
				          
						          Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
				                  object.get(i).setPosts(numberFormat.format(posts));
				         }        
				         
				         
				         
				         
			    return object;		
				
				
		    }
		  
		   
		    
			 if (queryfield.equals("cityOthers")) {
			        
			  	  AggregationModule module =  AggregationModule.getInstance();
			  	    try {
			  			module.setUp();
			  		} catch (Exception e1) {
			  			// TODO Auto-generated catch block
			  			e1.printStackTrace();
			  		}
					pubreport=module.countCityChannelFilter(startdate, enddate, channel_name, filter, filtermetric);
					  total = 0.0;
				        share =0.0;
				        maxTotal = 0.0; 
				        scaledshare = 0.0;
				        
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      	  
				      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	 	    	    }
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	        	 

				      	  pubreport.get(i).setShare(share.toString());
				      	  
				        }
					
				         for(int i=0;i<pubreport.size();i++){    
		  	              	  
		  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
		  	      	       
		  	           } 
					
					return pubreport;
			  }
		    
			 if (queryfield.equals("stateOthers")) {
			        
			  	  AggregationModule module =  AggregationModule.getInstance();
			  	    try {
			  			module.setUp();
			  		} catch (Exception e1) {
			  			// TODO Auto-generated catch block
			  			e1.printStackTrace();
			  		}
					pubreport=module.countStateChannelFilter(startdate, enddate, channel_name, filter, filtermetric);
				
					  total = 0.0;
				        share =0.0;
				        maxTotal = 0.0; 
				        scaledshare = 0.0;
				        
				        
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
				   	    	    {
				   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		 	    	    }
		 	    	    
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	    	    
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
				      	  pubreport.get(i).setShare(share.toString());
				      	  
				        }
					
					
				         for(int i=0;i<pubreport.size();i++){    
		  	              	  
		  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
		  	      	       
		  	           } 
					
					
					return pubreport;
			  }
		    
			 if (queryfield.equals("countryOthers")) {
			        
			  	  AggregationModule module =  AggregationModule.getInstance();
			  	    try {
			  			module.setUp();
			  		} catch (Exception e1) {
			  			// TODO Auto-generated catch block
			  			e1.printStackTrace();
			  		}
					pubreport=module.countCountryChannelFilter(startdate, enddate, channel_name, filter, filtermetric);
				
					  total = 0.0;
				        share =0.0;
				        maxTotal = 0.0; 
				        scaledshare = 0.0;
				        
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
				   	    	    {
				   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		 	    	    }
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
				      	  pubreport.get(i).setShare(share.toString());
				      	  
				        }
					
					
				              
				           for(int i=0;i<pubreport.size();i++){    
			  	              	  
			  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
			  	      	       
			  	           } 
				           
					
					return pubreport;
			  }
		    
			 
			 
			 if(queryfield.equals("gender"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getGender().compareTo(o2.getGender());
				        }
				    });	
	          
	           }        
	           
	           
	           
	           if(queryfield.equals("agegroup"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getAge().compareTo(o2.getAge());
				        }
				    });	
	          
	           }     
	           
	           
	           if(queryfield.equals("incomelevel"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getIncomelevel().compareTo(o2.getIncomelevel());
				        }
				    });	
	          
	           }        
			 
			 
		    
		    /*
			 if (queryfield.equals("referrerType")) {

	        	   String data0= null;
	               String data1= null;   
	        	   pubreport.clear();
	           
	           for (int i = 0; i < 3; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="Social";
			          data1 = "10007.0";
			          }
			          

			          if(i == 1){
			          data0="Search";
			          data1 = "3051.0";
			          }
			          
			          
			          if(i == 2){
				          data0="Direct";
				          data1 = "1056.0";
				      }
				    
			        
			          obj.setReferrerSource(data0);
			          if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							obj.setCount(data1);
							if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							obj.setEngagementTime(data1);
							if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
							obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);

			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
		    
			 }
		    
		    
		    
		    
		    
		    
		    
		    
		    if (queryfield.equals("reforiginal")) {

	        	   String data0= null;
	               String data1= null;   
	               String data2 = null;
	               String data3 = null;
	               String data4 = null;
	        	   String data5= null;
	               pubreport.clear();
	        	   
				
					PublisherReport obj = new PublisherReport();

					
						data0 = "http://m.facebook.com";
						data1 = "3026.0";
					    data2 = "Social";
					    data3 = "305";
					    data4 = "110";
					    data5 = "facebook.com";
					
					    obj.setReferrerMasterDomain(data0);
						
						obj.setReferrerType(data2);
					    obj.setShares(data3);
					    obj.setLikes(data4);
					    
					    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							{
					    	
					    	 obj.setCount(data1);
							  
							}
							if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							{
								
								obj.setEngagementTime(data1);
							}
							if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
							{
								
								obj.setVisitorCount(data1);
						
							}	    
					    
					    

			        PublisherReport obj1 = new PublisherReport();
						
					    data0 = "http://www.facebook.com";
						data1 = "1001.0";
					    data2 = "Social";
					    data3=  "207";
					    data4 = "53";
				        data5 = "facebook.com";
					
				        obj1.setReferrerMasterDomain(data0);
						
						obj1.setReferrerType(data2);
					    obj1.setShares(data3);
					    obj1.setLikes(data4);
					    
					    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							{
					    	
					    	 obj1.setCount(data1);
							  
							}
							if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							{
								
								obj1.setEngagementTime(data1);
							}
							if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
							{
								
								obj1.setVisitorCount(data1);
						
							}	
				        
				        
				        
				        
				        PublisherReport obj2 = new PublisherReport();
					
						data0 = "http://l.facebook.com";
					  	data1 = "360.0";
					    data2 = "Social";
					    data3 = "103";
					    data4 = "12";
				        data5 = "facebook.com";
					
				        
				        obj2.setReferrerMasterDomain(data0);
						
						obj2.setReferrerType(data2);
					    obj2.setShares(data3);
					    obj2.setLikes(data4);
					    
					    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							{
					    	
					    	 obj2.setCount(data1);
							  
							}
							if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							{
								
								obj2.setEngagementTime(data1);
							}
							if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
							{
								
								obj2.setVisitorCount(data1);
						
							}	
				        
				        
				        
				   PublisherReport obj3 = new PublisherReport();
						data0 = "http://www.google.co.pk";
						data1 = "396.0";
					    data2 = "Search";
					    data3 = "0";
					    data4 = "0";
					    data5 = "google.com";
					
					    obj3.setReferrerMasterDomain(data0);
						
						obj3.setReferrerType(data2);
					    obj3.setShares(data3);
					    obj3.setLikes(data4);
					    
					    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							{
					    	
					    	 obj3.setCount(data1);
							  
							}
							if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							{
								
								obj3.setEngagementTime(data1);
							}
							if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
							{
								
								obj3.setVisitorCount(data1);
						
							}	   
				
					
				   PublisherReport obj4 = new PublisherReport();	    
						data0 = "http://www.google.co.in";
						data1 = "2871.0";
					    data2 = "Search";
					    data3 = "0";
					    data4 = "0";
					    data5 = "google.com";
					
					
	                obj4.setReferrerMasterDomain(data0);
					
					obj4.setReferrerType(data2);
				    obj4.setShares(data3);
				    obj4.setLikes(data4);
				    
				    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
						{
				    	
				    	 obj4.setCount(data1);
						  
						}
						if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
						{
							
							obj4.setEngagementTime(data1);
						}
						if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
						{
							
							obj4.setVisitorCount(data1);
					
						}	
				
					
						PublisherReport obj5 = new PublisherReport();

						
					//	data0 = "http://m.facebook.com";
						data1 = "4387.0";
					    data2 = "Social";
					    data3 = "615";
					    data4 = "175";
					    data0 = "facebook.com";
						
					    obj5.setReferrerMasterDomain(data0);
						
						obj5.setReferrerType(data2);
					    obj5.setShares(data3);
					    obj5.setLikes(data4);
					    
					    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							{
					    	
					    	 obj5.setCount(data1);
							  
							}
							if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							{
								
								obj5.setEngagementTime(data1);
							}
							if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
							{
								
								obj5.setVisitorCount(data1);
						
							}	
					
					    
					    PublisherReport obj6 = new PublisherReport();

						
					   // data0 = "http://www.google.co.in";
						data1 = "3267.0";
					    data2 = "Search";
					    data3 = "0";
					    data4 = "0";
					    data0 = "google.com";
					
	                    obj6.setReferrerMasterDomain(data0);
						
						obj6.setReferrerType(data2);
					    obj6.setShares(data3);
					    obj6.setLikes(data4);
					    
					    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
							{
					    	
					    	 obj6.setCount(data1);
							  
							}
							if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
							{
								
								obj6.setEngagementTime(data1);
							}
							if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
							{
								
								obj6.setVisitorCount(data1);
						
							}	
						
					    
					String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);
					obj.setChannelName(channel_name1);
					obj1.setChannelName(channel_name1);
					obj2.setChannelName(channel_name1);
					obj3.setChannelName(channel_name1);
					obj4.setChannelName(channel_name1);
					obj5.setChannelName(channel_name1);
					obj6.setChannelName(channel_name1);
					
					obj5.getChildren().add(obj);
					obj5.getChildren().add(obj1);
					obj5.getChildren().add(obj2);
					
					obj6.getChildren().add(obj3);
					obj6.getChildren().add(obj4);
					
					
					
					pubreport.add(obj5);
					pubreport.add(obj6);

				

			}
			
			
			*/
			 
			 
		    
		    
		    
		    
		    
		    
		    
			 for(int i=0;i<pubreport.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(numberFormat.format(count)); 
		       
          }     
		    
		    
		    
		    
		    return pubreport;
		  }

  public List<PublisherReport> getQueryFieldChannelFilterLive(String queryfield,String startdate, String enddate, String channel_name, Map<String,String>filter, String filterMetric)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	  


	  
	  
	  
		if (queryfield.equals("Author")) {
          queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
          queryfield =  "sourceUrl";
	} 
	  
	  
	  
	        int size = filter.size();
	        String queryfilterbuilder = "";
	        String formattedString = "";
	        int j =0;
	        for (Map.Entry<String, String> entry : filter.entrySet())
	        {
	        	if (j==0){
	                formattedString = addCommaString(entry.getValue());
	        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
	        	
	        	}
	            else{
	            formattedString = addCommaString(entry.getValue());	
	            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
	       
	            }
	            j++;
	         
	        }
	  
	  
	        
          String query = "";
	        
	        if(filterMetric == null || filterMetric.isEmpty() || filterMetric.equals("pageviews"))
	        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
	        
	        if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("engagementTime"))
		    query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			    
	 
	        if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("visitorCount"))
		    query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		    
	        System.out.println(query);
	        CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    
		    
		//    if(filterMetric != null && !filterMetric.isEmpty()  && filterMetric.equals("visitorCount") )
		       // lines = processList(lines);
		    
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        try{
		    	  
		    	  PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		            if(queryfield.equals("gender")){
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	obj.setGender(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("device")){
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }
		        	if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e)
		        		{
		        			continue;
		        		}
		        		
		        		}
		        	
		        	
		        	if(queryfield.equals("audience_segment"))
		        	{
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		        	}
		        	
		        	if(queryfield.equals("sourceUrl")){
		        		String urlId = UrlMap1.get(data[0]);
		        		obj.setUrlId(urlId);
		        		obj.setReferrerMasterDomain(data[0]);
		        	}
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		
		        		 data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        	if(queryfield.equals("incomelevel")){
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
		        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
		        	
			        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
			        System.out.println(mobiledeviceproperties[2]);
			        obj.setDevicecode(mobiledeviceproperties[0]);
			        System.out.println(mobiledeviceproperties[0]);
		        	}
		         	
		        	if(queryfield.equals("brandName")){
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	

		            Random random = new Random();	
		            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
		            Integer max = (int)Double.parseDouble(data[1]);
		            Integer randomNumber1 = random.nextInt(max) + 1;
		            
		            if(queryfield.equals("audience_segment"))	
		            {
		            obj.setCount(data[1]); 	
		            obj.setExternalWorldCount(randomNumber.toString());	
		            obj.setVisitorCount(randomNumber1.toString());
		            obj.setAverageTime("0.0");	
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		            
		            else if(queryfield.equals("agegroup")==true) {
		            	
		            	if(data[0].contains("medium")==false){
		            	//	if(filterMetric == null || !filterMetric.isEmpty() || filterMetric.equals("pageviews"))
		        	         	obj.setCount(data[1]);
		        	        
		        	         //    if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("engagementTime") )
		        	          //   obj.setEngagementTime(data[1]);
		        	         
		        	         //    if(filterMetric != null && !filterMetric.isEmpty()  && filterMetric.equals("visitorCount") )
		        	         //    obj.setVisitorCount(data[1]);
		            		String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            
			            	
		    		        pubreport.add(obj);
		            	}
		            	
		            }
		            		            
		            else{
		            //	if(filterMetric == null || filterMetric.isEmpty() ||  filterMetric.equals("pageviews"))
	        	         	obj.setCount(data[1]);
	        	        
	        	          //   if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("engagementTime") )
	        	         //    obj.setEngagementTime(data[1]);
	        	         
	        	         //   if(filterMetric != null && !filterMetric.isEmpty()  && filterMetric.equals("visitorCount") )
	        	          //   obj.setVisitorCount(data[1]);
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		           
		        }
		        catch(Exception e){
		        	
		        	continue;
		        }
		        
		        
		        }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		 
		    
		    Double total = 0.0;
	        Double share = 0.0;
	        Double maxTotal = 0.0; 
	        Double scaledshare = 0.0;
	                 
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      	  
	      		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
   	    }
   	    
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		    
	         if(queryfield.equals("gender"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
				        }
				    });	
	          
	           }        
	           
	           
	           
	           if(queryfield.equals("agegroup"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getAge().compareTo(o2.getAge());
				        }
				    });	
	          
	           }     
	           
	           if(queryfield.equals("incomelevel"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
				        }
				    });	
	          
	           }                
		           
		              
	           for(int i=0;i<pubreport.size();i++){    
 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           }     
		    
		    
		    
		    return pubreport;
		  }


  
  
  /*
  public List<PublisherReport> getQueryFieldChannelFilterLive(String queryfield,String startdate, String enddate, String channel_name, Map<String,String>filter, String filterMetric)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	        int size = filter.size();
	        String queryfilterbuilder = "";
	        String formattedString = "";
	        int j =0;
	        for (Map.Entry<String, String> entry : filter.entrySet())
	        {
	        	if (j==0){
	                formattedString = addCommaString(entry.getValue());
	        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
	        	
	        	}
	            else{
	            formattedString = addCommaString(entry.getValue());	
	            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
	       
	            }
	            j++;
	         
	        }
	  
	  
	        
            String query = "";
	        
	        if(filterMetric == null || filterMetric.isEmpty() || filterMetric.equals("pageviews"))
	        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
	        
	        if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("engagementTime"))
		    query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			    
	 
	        if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("visitorCount"))
		    query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		    
	        System.out.println(query);
	        CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    
		    
		    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		       // lines = processList(lines);
		    
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        try{
		    	  
		    	  PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		            if(queryfield.equals("gender"))
		        	obj.setGender(capitalizeString(data[0]));
		        
		            if(queryfield.equals("device"))
		        	obj.setDevice_type(capitalizeString(data[0]));
		        	
		        	if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e)
		        		{
		        			continue;
		        		}
		        		
		        		}
		        	
		        	
		        	if(queryfield.equals("audience_segment"))
		        	{
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		        	}
		        	
		        	if(queryfield.equals("reforiginal"))
			             obj.setReferrerSource(data[0]);
		            	
		        	if(queryfield.equals("agegroup"))
		        	{
		        		 data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        	if(queryfield.equals("incomelevel"))
			          obj.setIncomelevel(capitalizeString(data[0]));
		     
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
		        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
		        	
			        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
			        System.out.println(mobiledeviceproperties[2]);
			        obj.setDevicecode(mobiledeviceproperties[0]);
			        System.out.println(mobiledeviceproperties[0]);
		        	}
		         	
		        	if(queryfield.equals("brandName")){
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	

		            Random random = new Random();	
		            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
		            Integer max = (int)Double.parseDouble(data[1]);
		            Integer randomNumber1 = random.nextInt(max) + 1;
		            
		            if(queryfield.equals("audience_segment"))	
		            {
		            obj.setCount(data[1]); 	
		            obj.setExternalWorldCount(randomNumber.toString());	
		            obj.setVisitorCount(randomNumber1.toString());
		            obj.setAverageTime("0.0");	
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		            
		            else if(queryfield.equals("agegroup")==true) {
		            	
		            	if(data[0].contains("medium")==false){
		            		if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	         	obj.setCount(data[1]);
		        	        
		        	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		        	             obj.setEngagementTime(data[1]);
		        	         
		        	             if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	             obj.setVisitorCount(data[1]);
		            		String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            
			            	
		    		        pubreport.add(obj);
		            	}
		            	
		            }
		            		            
		            else{
		            	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	        	         	obj.setCount(data[1]);
	        	        
	        	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	        	             obj.setEngagementTime(data[1]);
	        	         
	        	             if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        	             obj.setVisitorCount(data[1]);
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
	            	
			        pubreport.add(obj);
		            
		            }
		           
		        }
		        catch(Exception e){
		        	
		        	continue;
		        }
		        
		        
		        }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    return pubreport;
		  }
*/
  
  
  

  public static String convert(List<String> list) {
	    String res = "";
	    for (Iterator<String> iterator = list.iterator(); iterator.hasNext();) {
	        res += iterator.next() + (iterator.hasNext() ? "," : "");
	    }
	    return res;
	}
  
  public static String addCommaString(String value) {
	    String res = "";
	    String [] parts = value.split("~");
	    for(int i =0; i<parts.length; i++){
	    	
	    	res = res+"'"+parts[i]+"'"+",";
	    	
	    }
        res = res.substring(0,res.length()-1);
       return res;
  }
  
  
  public List<PublisherReport> getQueryFieldChannelGroupBy(String queryfield,String startdate, String enddate, String channel_name, List<String> groupby, String filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
	
	  

	  
	  
	  
		if (queryfield.equals("Author")) {
        queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
        queryfield =  "sourceUrl";
	} 
	  
	  String querygroupbybuilder = convert(groupby);
    String metric = querygroupbybuilder;
	  
	  
    List<PublisherReport> pubreport2a = new ArrayList();	  
    List<PublisherReport> pubreport = new ArrayList();
	  
	  if(queryfield.equals("visitorType")){
			
		    List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
		    List<PublisherReport> pubreportv2 = new ArrayList<PublisherReport>();
		    
		    if(groupby.get(0).equals("hourlyAverage")){
		    	querygroupbybuilder="hour";
		    
		     pubreport = countUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder, filter);
		  

			    Map<String,String> aggregationMap = new HashMap<String,String>();
			    String counttracker;
			    Double counttracker1 = 0.0;
			    String finalCounter;  
			  
	    		
	    		for(int i=0; i<pubreport.size();i++){
	    			
	    			String visitorType = pubreport.get(i).getVisitorType();
	    			String date =   pubreport.get(i).getDate();
	    			String count = pubreport.get(i).getCount();
	    	 		String [] parts = date.split("\\s+");
	    	 		String hour = parts[1];
	    	 		
	    	 		if(aggregationMap.containsKey(hour+"@"+visitorType)==false){
	    	 		aggregationMap.put(hour+"@"+visitorType,count);}
	    			else{
	    				
	    				counttracker = aggregationMap.get(hour+"@"+visitorType);
	    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
	    				aggregationMap.put(hour+"@"+visitorType,counttracker1.toString());
	    				
	    				
	    			}
	    		}
	    		
	    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
	    	 		    String key = entry.getKey();
	    	 		    String [] parts1 = key.split("@");	    	 		    
	    	 		    String value = entry.getValue();
	    	 		    PublisherReport obj = new PublisherReport();
	    	 		    obj.setVisitorType(parts1[1]);
	    	 		    obj.setDate(parts1[0].split(":")[0]);
	    	 		    obj.setCount(value);
	    	 		    pubreport1.add(obj);
	    	 		}
	    	
	    		    
	    		
	    	 		  for(int i=0;i<pubreport1.size();i++){    
	    	          	  
	    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
	    		          pubreport1.get(i).setCount(count.toString()); 
	    		       
	             }     
	    		return pubreport1;
		    }
	    	 		
	    		
		     
		     
		     pubreportv2 = countUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder, filter);
		     
		     for(int i=0;i<pubreportv2.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreportv2.get(i).getCount()));
		          pubreportv2.get(i).setCount(count.toString()); 
		       
      }     
		     
		     
		     
		     return pubreportv2;
		    		  
	 	   }
	  
	  
	  if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
		    
 	   List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();

 	 
		    ExecutorService executorService = Executors.newFixedThreadPool(2000);
	        
	        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
	    
	        List<String> Query = new ArrayList();
	     
	        queryfield = "audience_segment,subcategory";
	       
			String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
			    
				
		    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
				
				
		    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by audience_segment,subcategory";  
	       
		    
		    Query.add(query1);
	        Query.add(query2);
		    Query.add(query3);
		    Query.add("externalWorldQuery@"+startdate+"@"+enddate+"@"+channel_name);
	       
	       for(int j=0 ; j < Query.size(); j++ ){
	       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
	    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
	       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
	       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
	       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
	        
	       // returns a list of Futures holding their status and results when all complete
	    
	   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
	       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
	       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
	       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
	       }
	       
	       
	       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		

		    for (int k = 0; k < maps.size(); k++)
		    {
		    
		    	if(maps!=null && maps.get(k)!=null){
		        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        pubreport1.addAll(map);
		    	}
		
 }
	
		    executorService.shutdown();
		    
		    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		    
		    List<PublisherReport> object = new ArrayList<PublisherReport>();
		    
		    
		    for(int k=0; k< pubreport1.size(); k++)
		    {
	         try{ 
		    	String audiencesegment = pubreport1.get(k).getAudience_segment();
		    	
		    	String subcategory = pubreport1.get(k).getSubcategory();
		    	
		    	  String count =  pubreport1.get(k).getCount();
	        		
			        String engagementTime =  pubreport1.get(k).getEngagementTime();		
			        
			        String visitorCount = pubreport1.get(k).getVisitorCount();
		    	
			        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
			        
		    	    String key = audiencesegment+"@"+subcategory;
			        
			        
			        if(aggregatedmap.containsKey(key))
	        {
	       
	        PublisherReport obj = aggregatedmap.get(key);
	        obj.setAudience_segment(audiencesegment);
	        obj.setSubcategory(subcategory);
	      
	        
	        if(count!=null)
	        obj.setCount(count);
	        	
	        if(engagementTime!=null) 	
	        	obj.setEngagementTime(engagementTime);
	        	
	       if(visitorCount!=null) 	
	        	obj.setVisitorCount(visitorCount);
	        
	       if(externalWorldCount!=null)
	    	   obj.setExternalWorldCount(externalWorldCount);
	       else
	    	   obj.setExternalWorldCount("0");
	       
	       
	       
	       if(key !=null) {	
	    	obj.setAudience_segment(audiencesegment);
		        obj.setSubcategory(subcategory);
	       }
	       
	       
		    aggregatedmap.put(key, obj);
		    
	        }
	        else{
	        	       
	        	        PublisherReport obj = new PublisherReport();
	        	     
	        	        if(count !=null)
	        	        obj.setCount(count);
	        	        	
	        	        if(engagementTime !=null) 	
	        	        obj.setEngagementTime(engagementTime);
	        	        	
	        	       if(visitorCount !=null) 	
	        	        obj.setVisitorCount(visitorCount);
	        	
	        	       
	        	       if(externalWorldCount!=null)
				    	   obj.setExternalWorldCount(externalWorldCount);
	        	       else
	        	    	   obj.setExternalWorldCount("0");
	        	       
	        	       if(key!=null) {	
	        	    	obj.setAudience_segment(audiencesegment);
	   			        obj.setSubcategory(subcategory);
	        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
	        	      
	        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
	 		        	
	        	       
	        	       
	        	       }
	        	       aggregatedmap.put(key, obj);
	        
	        
	        }
	         }
	         catch(Exception e){
	        	 continue;
	         }
	      
		    }
		    
		     
		    
		    List<String> headers1 = new ArrayList<String>();
		    headers1.add("audience_segment");
		    headers1.add("subcategory");
		    headers1.add("count(*)");
		    headers1.add("SUM(engagementTime)");
		    headers1.add("COUNT(DISTINCT(cookiehash))");
		    headers1.add("ExternalWorldCount");
		    List<String> lines1= new ArrayList<String>();	
		    
		    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		    
		    	
		    	try{
		    	String key = entry.getKey();
		        PublisherReport obj = entry.getValue();
		        String [] parts1= key.split("@");
		        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
		      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
	        	lines1.add(line);
		        
		        
		       
		      }
		      catch(Exception e){
		    	  continue;
		      }
		    
		   
		    
		    
		    
		    
		    
		    
		    
		    }
		    
		    

		    List<List<String>> data = new ArrayList<List<String>>();
		    for (int i = 0; i < lines1.size(); i++) {
	            List<String> objects = new ArrayList<String>();
	            String [] parts = lines1.get(i).split(",");
	            for(int j =0; j< parts.length; j++)
	              objects.add(parts[j]);
	           
	            data.add(objects);
	        }
		    
		    
		    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
		    
		     queryfield = "audience_segment";
		//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
		 //   String s = json.toString();
		    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
		 //   System.out.println(nestedJson);
		    return pubreport;
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	/* 
 List<List<String>> data = new ArrayList<List<String>>();
 for (int i = 0; i < lines.size(); i++) {
     List<String> objects = new ArrayList<String>();
     String [] parts = lines.get(i).split(",");
     for(int j =0; j< parts.length; j++)
       objects.add(parts[j]);
    
     data.add(objects);
 }
 
 
 ResultSet obj = ListtoResultSet.getResultSet(headers, data);
 
 
//  JSONArray json = Convertor.convertResultSetIntoJSON(obj);
// String s = json.toString();
 pubreport= NestedJSON.getNestedJSONObject(obj, queryfield, groupby,filter); 
// System.out.println(nestedJson);
 return pubreport;
 
 
 */
 
 }
 
 

	  
	  
	  
	  
	      
	  
   
    String query = "";
    
    int  l=0;
    
    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	 	query = "Select count(*),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
  	    
  	    
  	    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime"))
  	     	query = "Select SUM(engagementTime),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
  	        
  	    
  	    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount"))
  	     	query = "Select "+queryfield+","+querygroupbybuilder+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+","+querygroupbybuilder+"";  
  	        

  	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
  	   
  	    	
  	    }
  	  
  	    if(querygroupbybuilder.equals("minute")){
  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	     	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
  	   		    
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("second")){
  	   // 	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    //	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
  	   		    
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
  	   
  	    	
  	    }
  	  
  	    if(querygroupbybuilder.equals("minute")){
  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
  	   		    
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("second")){
  	  //  	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
  	  //  	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
  	   		    
  	    } 	
  	    
  	   
  	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
  	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
  	   
  	    	
  	    }
  	  
  	    if(querygroupbybuilder.equals("minute")){
  	   	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
  	   	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
  	    	   
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("second")){
  	    //	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
  	    //	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
  	    	   
  	   		    
  	    } 	
  	    
  	    
  	    
  	    
  	    
  	    
  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
  	    {
  	    	
  	    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
  	    }
  	    
  	    	
  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("totalViews"))
  	    {
  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
  	    }
  	    	
  	    if(querygroupbybuilder.equals("second") && queryfield.equals("totalViews"))
  	    {
  	    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    //	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
  	    }
  	    
  	    	
  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
  	    {
  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
  	    	
  	    }
  	 		    
  			    	
  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("uniqueVisitors"))
  	    {
  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
  			      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
  	    	
  	    }
  	    	
  	    
  	    if(querygroupbybuilder.equals("second") && queryfield.equals("uniqueVisitors"))
  	    {
  	    //	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
  	    	
  	    }
  	    
  	    
  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("engagementTime") )
  	    {
  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where channel_name = '" + 
  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
  	    	
  	    }
  	 		    
  			    	
  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("engagementTime") )
  	    {
  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where channel_name = '" + 
  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
  	    	
  	    }
  	    	
  	    
  	    if(querygroupbybuilder.equals("second") && queryfield.equals("engagementTime") )
  	    {
  	    //	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where channel_name = '" + 
  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
  	    	
  	    }
		    	
		    
		    
		    
		    if(queryfield.equals("newVisitors")){
	    		
		    	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countNewUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder);
		    	return pubreport;
	    	}
	       

	    	if(queryfield.equals("returningVisitors")){
	    		
	    		 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countReturningUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				return pubreport;
	    	
	    	
	    	}
	    
	    

	    	if(queryfield.equals("LoyalVisitors")){
	    		
	    		 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countLoyalUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				return pubreport;
	    		
	    	}	
		    	
		   /* 
	    	if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
		    {
		    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    }
		    
	     	
		    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
		    {
		    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
					      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    	
		    }
		    */
	    	
	    	
	    	
		    System.out.println(query);
		    CSVResult csvResult = getCsvResult(false, query);
		   
		    
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    
		//    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			    //lines = processList1(lines);
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		 
		    if(queryfield.equals("audience_segment") && groupby.get(0).equals("gender")== true){
			    
			    
			    List<List<String>> data = new ArrayList<List<String>>();
			    for (int i = 0; i < lines.size(); i++) {
		           List<String> objects = new ArrayList<String>();
		           String [] parts = lines.get(i).split(",");
		           for(int j =0; j< parts.length; j++)
		             objects.add(parts[j]);
		          
		           data.add(objects);
		       }
			    
			    
			    ResultSet obj = ListtoResultSet.getResultSet(headers, data);
			    
			    
			//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
			 //   String s = json.toString();
			    pubreport= NestedJSON8.getNestedJSONObjectGender(obj, queryfield, groupby,filter); 
			 //   System.out.println(nestedJson);
			    return pubreport;
			    
			    }
			    
			    

			    if(queryfield.equals("audience_segment") && groupby.get(0).equals("agegroup")== true){
			    
			    
			    List<List<String>> data = new ArrayList<List<String>>();
			    for (int i = 0; i < lines.size(); i++) {
		           List<String> objects = new ArrayList<String>();
		           String [] parts = lines.get(i).split(",");
		           for(int j =0; j< parts.length; j++)
		             objects.add(parts[j]);
		          
		           data.add(objects);
		       }
			    
			    
			    ResultSet obj = ListtoResultSet.getResultSet(headers, data);
			    
			    
			//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
			 //   String s = json.toString();
			    pubreport= NestedJSON8.getNestedJSONObjectAgeGroup(obj, queryfield, groupby,filter); 
			 //   System.out.println(nestedJson);
			    return pubreport;
			    
			    }
			    
			    

			    if(queryfield.equals("audience_segment") && groupby.get(0).equals("incomelevel")== true){
			    
			    
			    List<List<String>> data = new ArrayList<List<String>>();
			    for (int i = 0; i < lines.size(); i++) {
		           List<String> objects = new ArrayList<String>();
		           String [] parts = lines.get(i).split(",");
		           for(int j =0; j< parts.length; j++)
		             objects.add(parts[j]);
		          
		           data.add(objects);
		       }
			    
			    
			    ResultSet obj = ListtoResultSet.getResultSet(headers, data);
			    
			    
			//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
			 //   String s = json.toString();
			    pubreport= NestedJSON8.getNestedJSONObjectIncomeLevel(obj, queryfield, groupby,filter); 
			 //   System.out.println(nestedJson);
			    return pubreport;
			    
			    }
			    
		   
			  
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		       
		    	 try{ 
		    	  PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		        
		            if(queryfield.equals("gender")){
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	obj.setGender(capitalizeString(data[0]));
		            }
		           
		            
		            
		            if(queryfield.equals("device")){
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("state"))
	            	{
	            	
	            	data[0]=data[0].replace("_", " ");
	            	String stateId = StateMap1.get(data[0]);
	                obj.setStateId(stateId);

	            	data[0] = capitalizeString(data[0]);
	            	obj.setState(data[0]);
	            	}
	            
	            
	            if(queryfield.equals("country"))
	        	  {
	        	
	            	data[0]=data[0].replace("_", " ");
	            	String countryId = CountryMap1.get(data[0]);
	                obj.setCountryId(countryId);
	            	data[0] = capitalizeString(data[0]);
	            	obj.setCountry(data[0]);
	             	}
	        
		            
		            
		            
		            if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e){
		        			
		        			continue;
		        		}
		        		
		        		}
		        	if(queryfield.equals("audience_segment"))
		             {
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		             }
		        	
		        	if(queryfield.equals("sourceUrl")){
		        		String urlId = UrlMap1.get(data[0]);
		        		obj.setUrlId(urlId);
		        		obj.setReferrerMasterDomain(data[0]);
		        	}
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		
		        		
		        		data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        			        		        	
		        	if(queryfield.equals("incomelevel")){
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
			          obj.setMobile_device_model_name(data[0]);
			          String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
			        	
				        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				        System.out.println(mobiledeviceproperties[2]);
				        obj.setDevicecode(mobiledeviceproperties[0]);
				        System.out.println(mobiledeviceproperties[0]);
		        	}
		        	
		        	
		        	if(queryfield.equals("brandName")){
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}
		        	

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	
		        	
		        	
		        	//   obj.setCode(code);
	            for(int k = 0; k < groupby.size(); k++)
	            {
	            	
	            	if(groupby.get(k).equals(queryfield)==false)
	            	{
	                try{
	            	if(groupby.get(k).equals("device"))
	            	obj.setDevice_type(capitalizeString(data[k+1]));
	            	
	            	 if(groupby.get(k).equals("state"))
	             	{
	             	
	             	data[k+1]=data[k+1].replace("_", " ");
	             	data[k+1] = capitalizeString(data[k+1]);
	             	obj.setState(data[k+1]);
	             	}
	             
	             
	             if(groupby.get(k).equals("country"))
	         	  {
	         	
	             	data[k+1]=data[k+1].replace("_", " ");
	             	data[k+1] = capitalizeString(data[k+1]);
	             	obj.setCountry(data[k+1]);
	              	}
	            	
	            	
	            	
	            	if(groupby.get(k).equals("city")){
	            		try{
	            		String locationproperties = citycodeMap.get(data[k+1]);
	    		        data[k+1]=data[k+1].replace("_"," ").replace("-"," ");
	    		        data[k+1]=capitalizeString(data[k+1]);
	    		        obj.setCity(data[k+1]);
	    		        System.out.println(data[k+1]);
	    		        obj.setLocationcode(locationproperties);
	            		}
	            		catch(Exception e)
	            		{
	            			continue;
	            		}
	            	}
	            	if(groupby.get(k).equals("audience_segment"))
		             {
	            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
	            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
	            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
	            		obj.setAudience_segment(audienceSegment);
	            		obj.setAudienceSegmentCode(audienceSegmentCode);
	            		}
	            		else
	            	    obj.setAudience_segment(data[k+1]);
	            		
		             }
	            	
	            	
	            	if(groupby.get(k).equals("gender")){
	            		String genderId = GenderMap1.get(data[0]);
	            		obj.setGenderId(genderId);
	            		obj.setGender(capitalizeString(data[k+1]));
	            	}
	            	
	            	
	            	
	            	if(groupby.get(k).equals("hour") || groupby.get(k).equals("hourlyAverage"))
			             obj.setDate(data[k+1]);
	            	
	            	if(groupby.get(k).equals("minute"))
			             obj.setDate(data[k+1]);
	            	
	            	
	            	//if(groupby.get(k).equals("gender"))
			           //  obj.setGender(capitalizeString(data[k+1]));
	            	
	            	
	            	if(groupby.get(k).equals("refcurrentoriginal"))
			             obj.setGender(capitalizeString(data[k+1]));
		            	
	            	if(groupby.get(k).equals("date")){
			         
	            		
	            		Date date = new Date(Long.parseLong(data[k+1])); // *1000 is to convert seconds to milliseconds
	            		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
	            		 // give a timezone reference for formating (see comment at the bottom
	            		String formattedDate = sdf.format(date);
	            		
	            		obj.setDate(formattedDate);
	            	}		            	
	            	if(groupby.get(k).equals("subcategory"))
			             {
	            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
	            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
	            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
	            		obj.setSubcategory(audienceSegment);
	            		obj.setSubcategorycode(audienceSegmentCode);
	            		}
	            		else
	            	    obj.setSubcategory(data[k+1]);
			             }
	            	
	            	if(groupby.get(k).equals("agegroup"))
	            	{
	            		
	            		
	            		String ageId = AgeMap1.get(data[k+1]);
	            		obj.setAgeId(ageId);
	            		
		        		 data[k+1]=data[k+1].replace("_","-");
		        		 data[k+1]=data[k+1]+ " Years";
		        		 if(data[k+1].contains("medium")==false)
		        		 obj.setAge(data[k+1]);
		        	}
		            	
		            	
	            	if(groupby.get(k).equals("incomelevel")){
	            		String incomelevelId = IncomeMap1.get(data[k+1]);
	            		obj.setIncomeId(incomelevelId);
	            		obj.setIncomelevel(capitalizeString(data[k+1]));
	            	}
                l++;
	                }
	                catch(Exception e){
	                	continue;
	                }
	                
	                }
	            }
	           
	            
	            	            
	            if(l!=0){
	            	//    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		            	obj.setCount(data[l+1]);
		             
			          //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		              //  obj.setVisitorCount(data[l+1]);
		         

			         //   if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime") )
		              //  obj.setEngagementTime(data[l+1]);
		         
	            
	            
	            }       
			    String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        pubreport.add(obj);
		        l=0;
		    	 }
		    	 catch(Exception e){
		    		 continue;
		    	 }
		    	 
		    	 }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    
		    
		    Map<String,String> aggregationMap = new HashMap<String,String>();
		    String counttracker;
		    Double counttracker1 = 0.0;
		    String finalCounter;  
		  
		    
		    if(queryfield.equals("gender") && groupby.get(0).equals("hourlyAverage")== true){
		    	
		    		
		    		List<PublisherReport> pubreport1 = new ArrayList();
		    		
		    		for(int i=0; i<pubreport.size();i++){
		    			
		    			String gender = pubreport.get(i).getGender();
		    			String date =   pubreport.get(i).getDate();
		    			String count = pubreport.get(i).getCount();
		    	 		String [] parts = date.split("\\s+");
		    	 		String hour = parts[1];
		    	 		
		    	 		if(aggregationMap.containsKey(hour+"@"+gender)==false){
		    	 		aggregationMap.put(hour+"@"+gender,count);}
		    			else{
		    				
		    				counttracker = aggregationMap.get(hour+"@"+gender);
		    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
		    				aggregationMap.put(hour+"@"+gender,counttracker1.toString());
		    				
		    				
		    			}
		    		}	
		    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
		    	 		    String key = entry.getKey();
		    	 		    String [] parts1 = key.split("@");	    	 		    
		    	 		    String value = entry.getValue();
		    	 		    PublisherReport obj = new PublisherReport();
		    	 		    obj.setGender(parts1[1]);
		    	 		    obj.setDate(parts1[0].split(":")[0]);
		    	 		    obj.setCount(value);
		    	 		    pubreport1.add(obj);
		    	 		}
		    	
		    		    

		    	 		  for(int i=0;i<pubreport1.size();i++){    
		    	          	  
		    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
		    		          pubreport1.get(i).setCount(count.toString()); 
		    		       
		             }     
		    		
		    		
		    		
		    		
		    		return pubreport1;
		    		
		    		
		    		
		    	}
			    
		    	  if(queryfield.equals("agegroup") && groupby.get(0).equals("hourlyAverage")== true){
				    	
				    		

				    		
		    		List<PublisherReport> pubreport1 = new ArrayList();
				    		for(int i=0; i<pubreport.size();i++){
				    			
				    			String agegroup = pubreport.get(i).getAge();
				    			String date =   pubreport.get(i).getDate();
				    			String count = pubreport.get(i).getCount();
				    	 		String [] parts = date.split("\\s+");
				    	 		String hour = parts[1];
				    	 		
				    	 		if(aggregationMap.containsKey(hour+"@"+agegroup)==false){
				    	 		aggregationMap.put(hour+"@"+agegroup,count);}
				    			else{
				    				
				    				counttracker = aggregationMap.get(hour+"@"+agegroup);
				    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
				    				aggregationMap.put(hour+"@"+agegroup,counttracker1.toString());
				    				
				    				
				    			}
				    		}	
				    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
				    	 		    String key = entry.getKey();
				    	 		    String [] parts1 = key.split("@");	    	 		    
				    	 		    String value = entry.getValue();
				    	 		    PublisherReport obj = new PublisherReport();
				    	 		    obj.setAge(parts1[1]);
				    	 		    obj.setDate(parts1[0].split(":")[0]);
				    	 		    obj.setCount(value);
				    	 		    if(parts1[1]!=null && parts1[1].contains("medium")==false)
				    	 		    pubreport1.add(obj);
				    	 		}
				    	
				    		    

				    	 		  for(int i=0;i<pubreport1.size();i++){    
				    	          	  
				    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
				    		          pubreport1.get(i).setCount(count.toString()); 
				    		       
				             }     
				    		
				    		
				    	 		return pubreport1;
				    		
				    		
				    		
				    		
				    	}
					    
				    	  if(queryfield.equals("incomelevel") && groupby.get(0).equals("hourlyAverage")== true){
						    	
						    		
						    		

						    		
		    		List<PublisherReport> pubreport1 = new ArrayList();
						    		
						    		for(int i=0; i<pubreport.size();i++){
						    			
						    			String incomelevel = pubreport.get(i).getIncomelevel();
						    			String date =   pubreport.get(i).getDate();
						    			String count = pubreport.get(i).getCount();
						    	 		String [] parts = date.split("\\s+");
						    	 		String hour = parts[1];
						    	 		
						    	 		if(aggregationMap.containsKey(hour+"@"+incomelevel)==false){
						    	 		aggregationMap.put(hour+"@"+incomelevel,count);
						    	 		}
						    			else{
						    				
						    				counttracker = aggregationMap.get(hour+"@"+incomelevel);
						    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
						    				aggregationMap.put(hour+"@"+incomelevel,counttracker1.toString());
						    				
						    				
						    			}
						    		}
						    		
						    		
						    		
						    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
						    	 		    String key = entry.getKey();
						    	 		    String [] parts1 = key.split("@");	    	 		    
						    	 		    String value = entry.getValue();
						    	 		    PublisherReport obj = new PublisherReport();
						    	 		    obj.setIncomelevel(parts1[1]);
						    	 		    obj.setDate(parts1[0].split(":")[0]);
						    	 		    obj.setCount(value);
						    	 		    pubreport1.add(obj);
						    	
						    		    }
						    		
						    		

						    	 		  for(int i=0;i<pubreport1.size();i++){    
						    	          	  
						    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
						    		          pubreport1.get(i).setCount(count.toString()); 
						    		       
						             }     
						    	 		return pubreport1;
						    		
						    		
						    		
						    		
						    	}
				
						    	
						    	  if(queryfield.equals("device") && groupby.get(0).equals("hourlyAverage")== true){
								    	
								    		
								    		

		    		                           List<PublisherReport> pubreport1 = new ArrayList();
								    		
								    		for(int i=0; i<pubreport.size();i++){
								    			
								    			String device = pubreport.get(i).getDevice_type();
								    			String date =   pubreport.get(i).getDate();
								    			String count = pubreport.get(i).getCount();
								    	 		String [] parts = date.split("\\s+");
								    	 		String hour = parts[1];
								    	 		
								    	 		if(aggregationMap.containsKey(hour+"@"+device)==false){
								    	 		aggregationMap.put(hour+"@"+device,count);}
								    			else{
								    				
								    				counttracker = aggregationMap.get(hour+"@"+device);
								    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
								    				aggregationMap.put(hour+"@"+device,counttracker1.toString());
								    				
								    				
								    			}
								    		}
								    		
								    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
								    	 		    String key = entry.getKey();
								    	 		    String [] parts1 = key.split("@");	    	 		    
								    	 		    String value = entry.getValue();
								    	 		    PublisherReport obj = new PublisherReport();
								    	 		    obj.setDevice_type(parts1[1]);
								    	 		    obj.setDate(parts1[0].split(":")[0]);
								    	 		    obj.setCount(value);
								    	 		    pubreport1.add(obj);
								    	 		}
								    	
								    		    

								    	 		  for(int i=0;i<pubreport1.size();i++){    
								    	          	  
								    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
								    		          pubreport1.get(i).setCount(count.toString()); 
								    		       
								             }     
								    		
								    		
								    	 		return pubreport1;
								    		
								    		
								    		
								    		
								    	}		    	
						    	
				    	
								    	  if(queryfield.equals("visitorType") && groupby.get(0).equals("hourlyAverage")== true){
										    	
										    		
										    		

										    	
		    		                               List<PublisherReport> pubreport1 = new ArrayList();
										    		
										    		for(int i=0; i<pubreport.size();i++){
										    			
										    			String visitorType = pubreport.get(i).getVisitorType();
										    			String date =   pubreport.get(i).getDate();
										    			String count = pubreport.get(i).getCount();
										    	 		String [] parts = date.split("\\s+");
										    	 		String hour = parts[1];
										    	 		
										    	 		if(aggregationMap.containsKey(hour+"@"+visitorType)==false){
										    	 		aggregationMap.put(hour+"@"+visitorType,count);}
										    			else{
										    				
										    				counttracker = aggregationMap.get(hour+"@"+visitorType);
										    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
										    				aggregationMap.put(hour+"@"+visitorType,counttracker1.toString());
										    				
										    				
										    			}
										    		}
										    		
										    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
										    	 		    String key = entry.getKey();
										    	 		    String [] parts1 = key.split("@");	    	 		    
										    	 		    String value = entry.getValue();
										    	 		    PublisherReport obj = new PublisherReport();
										    	 		    obj.setVisitorType(parts1[1]);
										    	 		    obj.setDate(parts1[0].split(":")[0]);
										    	 		    obj.setCount(value);
										    	 		    pubreport1.add(obj);
										    	 		}
										    	
										    		    
										    		
										    	 		  for(int i=0;i<pubreport1.size();i++){    
										    	          	  
										    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
										    		          pubreport1.get(i).setCount(count.toString()); 
										    		       
										             }     
										    		
										    		
										    	 		return pubreport1;
										    		
										    		
										    		
										    	}
		   		    
		    
		   
		    
		    for(int i=0;i<pubreport.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(count.toString()); 
		       
       }     
		    
		    
		    return pubreport;
		  }


  
  
  public List<PublisherReport> getQueryFieldChannelFilterGroupBy(String queryfield,String startdate, String enddate, String channel_name, List<String> groupby, String filter, Map<String,String>filter1)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	   

	  
	  
	  
		if (queryfield.equals("Author")) {
          queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
          queryfield =  "sourceUrl";
	}   
		 Map<String,String> TagAggregation = new FastMap<String,String>();   
	  
	  String querygroupbybuilder = convert(groupby);
    List<PublisherReport> pubreport = new ArrayList();
    String query = "";
    int size = filter1.size();
    String queryfilterbuilder = "";
    String formattedString = "";
   
    int l =0;
  
    for (Map.Entry<String, String> entry : filter1.entrySet())
    {
    	if (l==0){
            
    		if(entry.getKey().contains("tag"))
    	    queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";
    		else{
    		formattedString = addCommaString(entry.getValue());
    		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
    		}
    	}
        else{
        
        	if(entry.getKey().contains("tag"))
        	    queryfilterbuilder = queryfilterbuilder+" and "+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";	
        else{	
        formattedString = addCommaString(entry.getValue());	
        queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
        }
        }
        l++;
     
    }
    
    
    /*
    for (Map.Entry<String, String> entry : filter1.entrySet())
    {
    	if (l==0){
            formattedString = addCommaString(entry.getValue());
    		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
    	
    	}
        else{
        formattedString = addCommaString(entry.getValue());	
        queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
   
        }
        l++;
     
    }
   */
    /*
    if(queryfilterbuilder.contains("referrerType")){
    	
    	
        queryfilterbuilder = "device in ('mobile')";
    	
    	if(queryfield.equals("referrerType"))
    	{
    		
    		queryfield="device";
    	}
    
    }
    */
   
    
    if (queryfilterbuilder.contains("cookie") && queryfield.contains("refcurrentoriginal")) {

		List<PublisherReport> pubreportv2 = new ArrayList<PublisherReport>();

		pubreportv2 = getReportUserCookie(startdate, enddate,
					channel_name, queryfilterbuilder);

		

		return pubreportv2;

	}
    
    
    l=0;
    
    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	 	query = "Select count(*),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
  	    
  	    
  	    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime"))
  	     	query = "Select SUM(engagementTime),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
  	        
  	    
  	    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount"))
  	     	query = "Select "+queryfield+","+querygroupbybuilder+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+","+querygroupbybuilder+"";  
  	        

  	    if(querygroupbybuilder.equals("hour")){
  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
  	   
  	    	
  	    }
  	  
  	    if(querygroupbybuilder.equals("minute")){
  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	     	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
  	   		    
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("second")){
  	   // 	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    //	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
  	   		    
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("hour")){
  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
  	   
  	    	
  	    }
  	  
  	    if(querygroupbybuilder.equals("minute")){
  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
  	   		    
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("second")){
  	  //  	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
  	  //  	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
  	   		    
  	    } 	
  	    
  	   
  	    if(querygroupbybuilder.equals("hour")){
  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
  	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
  	   
  	    	
  	    }
  	  
  	    if(querygroupbybuilder.equals("minute")){
  	   	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
  	   	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
  	    	   
  	    } 	
  	    
  	    if(querygroupbybuilder.equals("second")){
  	    //	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
  	    //	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
  	    	   
  	   		    
  	    } 	
  	    
  	    
  	    
  	    
  	    
  	    
  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
  	    {
  	    	
  	    	query = "Select count(*) from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
  	    }
  	    
  	    	
  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("totalViews"))
  	    {
  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    	query = "Select count(*) from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
  	    }
  	    	
  	    if(querygroupbybuilder.equals("second") && queryfield.equals("totalViews"))
  	    {
  	    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
  	    //	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
  	    }
  	    
  	    	
  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
  	    {
  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
  	    	
  	    }
  	 		    
  			    	
  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("uniqueVisitors"))
  	    {
  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
  			      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
  	    	
  	    }
  	    	
  	    
  	    if(querygroupbybuilder.equals("second") && queryfield.equals("uniqueVisitors"))
  	    {
  	    //	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
  	    	
  	    }
  	    
  	    
  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("engagementTime") )
  	    {
  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
  	    	
  	    }
  	 		    
  			    	
  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("engagementTime") )
  	    {
  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
  	    	
  	    }
  	    	
  	    
  	    if(querygroupbybuilder.equals("second") && queryfield.equals("engagementTime") )
  	    {
  	    //	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where channel_name = '" + 
  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
  	    	
  	    }
		    	
		    
  	    if(queryfield.equals("visitorType")){
  			
  	        List<PublisherReport> pubreport1  = new ArrayList<PublisherReport>();
  	        List<PublisherReport> pubreport2  = new ArrayList<PublisherReport>();
  	        List<PublisherReport> pubreport3  = new ArrayList<PublisherReport>();
  	        
  		   
  	    	AggregationModule module =  AggregationModule.getInstance();
  	    	    try {
  	    			module.setUp();
  	    		} catch (Exception e1) {
  	    			// TODO Auto-generated catch block
  	    			e1.printStackTrace();
  	    		}
  			
  	    	pubreport1=module.countNewUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder);
  			
  	    
  			pubreport2=module.countReturningUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder); 
  			
  	   
  	 		pubreport3=module.countLoyalUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
  	 		
  	  
  	        pubreport1.addAll(pubreport2);
  	        pubreport1.addAll(pubreport3);
  	   
  	        
  	       for(int i=0;i<pubreport1.size();i++){    
	          	  
	          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
	          pubreport1.get(i).setCount(numberFormat.format(count)); 
	       
       } 
  	   
  	        return pubreport1;
  	   }
		    
		    
		    if(queryfield.equals("newVisitors")){
	    		
		    	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countNewUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder);
		    	return pubreport;
	    	}
	       

	    	if(queryfield.equals("returningVisitors")){
	    		
	    		 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countReturningUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				return pubreport;
	    	
	    	
	    	}
	    
	    

	    	if(queryfield.equals("LoyalVisitors")){
	    		
	    		 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countLoyalUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				return pubreport;
	    		
	    	}	
		    	
		   /* 
	    	if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
		    {
		    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    }
		    
	     	
		    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
		    {
		    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
					      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    	
		    }
		    */
	    	
	    	
	    	
		   
		    
		//    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			    //lines = processList1(lines);
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		 
		    if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
		    
		    
		    	 List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
		    	  
		       	 
				    ExecutorService executorService = Executors.newFixedThreadPool(2000);
			        
			        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
			    
			        List<String> Query = new ArrayList();
			     
			        queryfield = "audience_segment,subcategory";
			       
					String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
					    
					String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						
				    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+queryfield;
			       
				    
				    Query.add(query1);
			        Query.add(query2);
				    Query.add(query3);
				    Query.add("externalWorldQueryfilter@"+startdate+"@"+enddate+"@"+channel_name+"@"+queryfilterbuilder);
			       
			       for(int j=0 ; j < Query.size(); j++ ){
			       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
			    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
			        
			       // returns a list of Futures holding their status and results when all complete
			    
			   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
			       }
			       
			       
			       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				

				    for (int k = 0; k < maps.size(); k++)
				    {
				    
				    	if(maps!=null && maps.get(k)!=null){
				        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				        pubreport1.addAll(map);
				    	}
				
		   }
			
				    executorService.shutdown();
				    
				    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				    
				    List<PublisherReport> object = new ArrayList<PublisherReport>();
				    
				    
				    for(int k=0; k< pubreport1.size(); k++)
				    {
			         try{ 
				    	String audiencesegment = pubreport1.get(k).getAudience_segment();
				    	
				    	String subcategory = pubreport1.get(k).getSubcategory();
				    	
				    	  String count =  pubreport1.get(k).getCount();
			        		
					        String engagementTime =  pubreport1.get(k).getEngagementTime();		
					        
					        String visitorCount = pubreport1.get(k).getVisitorCount();
				    	
					        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
					        
				    	    String key = audiencesegment+"@"+subcategory;
					        
					        
					        if(aggregatedmap.containsKey(key))
			        {
			       
			        PublisherReport obj = aggregatedmap.get(key);
			        obj.setAudience_segment(audiencesegment);
			        obj.setSubcategory(subcategory);
			      
			        
			        if(count!=null)
			        obj.setCount(count);
			        	
			        if(engagementTime!=null) 	
			        	obj.setEngagementTime(engagementTime);
			        	
			       if(visitorCount!=null) 	
			        	obj.setVisitorCount(visitorCount);
			        
			       if(externalWorldCount!=null)
			    	   obj.setExternalWorldCount(externalWorldCount);
			       else
			    	   obj.setExternalWorldCount("0");
			       
			       
			       
			       if(key !=null) {	
			    	obj.setAudience_segment(audiencesegment);
				        obj.setSubcategory(subcategory);
			       }
			       
			       
				    aggregatedmap.put(key, obj);
				    
			        }
			        else{
			        	       
			        	        PublisherReport obj = new PublisherReport();
			        	     
			        	        if(count !=null)
			        	        obj.setCount(count);
			        	        	
			        	        if(engagementTime !=null) 	
			        	        obj.setEngagementTime(engagementTime);
			        	        	
			        	       if(visitorCount !=null) 	
			        	        obj.setVisitorCount(visitorCount);
			        	
			        	       
			        	       if(externalWorldCount!=null)
						    	   obj.setExternalWorldCount(externalWorldCount);
			        	       else
			        	    	   obj.setExternalWorldCount("0");
			        	       
			        	       if(key!=null) {	
			        	    	obj.setAudience_segment(audiencesegment);
			   			        obj.setSubcategory(subcategory);
			        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	      
			        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			 		        	
			        	       
			        	       
			        	       }
			        	       aggregatedmap.put(key, obj);
			        
			        
			        }
			         }
			         catch(Exception e){
			        	 continue;
			         }
			      
				    }
				    
				     
				    
				    List<String> headers1 = new ArrayList<String>();
				    headers1.add("audience_segment");
				    headers1.add("subcategory");
				    headers1.add("count(*)");
				    headers1.add("SUM(engagementTime)");
				    headers1.add("COUNT(DISTINCT(cookiehash))");
				    headers1.add("ExternalWorldCount");
				    List<String> lines1= new ArrayList<String>();	
				    
				    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				    
				    	
				    	try{
				    	String key = entry.getKey();
				        PublisherReport obj = entry.getValue();
				        String [] parts1= key.split("@");
				        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
				      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	lines1.add(line);
				        
				        
				       
				      }
				      catch(Exception e){
				    	  continue;
				      }
				    
				   
				    
				    
				    
				    
				    
				    
				    
				    }
				    
				    

				    List<List<String>> data = new ArrayList<List<String>>();
				    for (int i = 0; i < lines1.size(); i++) {
			            List<String> objects = new ArrayList<String>();
			            String [] parts = lines1.get(i).split(",");
			            for(int j =0; j< parts.length; j++)
			              objects.add(parts[j]);
			           
			            data.add(objects);
			        }
				    
				    
				    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
				    
				     queryfield = "audience_segment";
				//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
				 //   String s = json.toString();
				    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
				 //   System.out.println(nestedJson);
				    return pubreport;
				    
		    
		    }
		    
		    
		    System.out.println(query);
		    CSVResult csvResult = getCsvResult(false, query);
		   
		    
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    
		    
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		       
		    	 try{ 
		    	  PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		        
		            if(queryfield.equals("gender")){
		        	
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	
		            	obj.setGender(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("device")){
		        	
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("state"))
	            	{
	            	
	            	data[0]=data[0].replace("_", " ");
	            	String stateId = StateMap1.get(data[0]);
	                obj.setStateId(stateId);

	            	data[0] = capitalizeString(data[0]);
	            	obj.setState(data[0]);
	            	}
	            
	            
	            if(queryfield.equals("country"))
	        	  {
	        	
	            	data[0]=data[0].replace("_", " ");

	                String countryId = CountryMap1.get(data[0]);
	                obj.setCountryId(countryId);
	            	data[0] = capitalizeString(data[0]);
	            	obj.setCountry(data[0]);
	             	}
	        
		            
		            
		            
		            if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e){
		        			
		        			continue;
		        		}
		        		
		        		}
		        	if(queryfield.equals("audience_segment"))
		             {
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		             }
		        	
		        	if(queryfield.equals("sourceUrl")){
		        		String urlId = UrlMap1.get(data[0]);
		        		obj.setUrlId(urlId);
		        		obj.setReferrerMasterDomain(data[0]);
		        	}
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		
		        		 data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        			        		        	
		        	if(queryfield.equals("incomelevel")){
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
			          obj.setMobile_device_model_name(data[0]);
			          String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
			        	
				        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				        System.out.println(mobiledeviceproperties[2]);
				        obj.setDevicecode(mobiledeviceproperties[0]);
				        System.out.println(mobiledeviceproperties[0]);
		        	}
		        	
		        	
		        	if(queryfield.equals("brandName")){
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}
		        	

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	
		        	
		        	
		        	//   obj.setCode(code);
	            for(int k = 0; k < groupby.size(); k++)
	            {
	            	
	            	if(groupby.get(k).equals(queryfield)==false)
	            	{
	                try{
	            	if(groupby.get(k).equals("device")){
	            	
	            		String deviceId = deviceMap1.get(data[k+1]);
	            		obj.setDeviceId(deviceId);
	            		obj.setDevice_type(capitalizeString(data[k+1]));
	            	} 	
	            	 if(groupby.get(k).equals("state"))
	             	{
	             	
	             	data[k+1]=data[k+1].replace("_", " ");
	             	data[k+1] = capitalizeString(data[k+1]);
	             	obj.setState(data[k+1]);
	             	}
	             
	             
	             if(groupby.get(k).equals("country"))
	         	  {
	         	
	             	data[k+1]=data[k+1].replace("_", " ");
	             	data[k+1] = capitalizeString(data[k+1]);
	             	obj.setCountry(data[k+1]);
	              	}
	            	
	            	
	            	
	            	if(groupby.get(k).equals("city")){
	            		try{
	            		String locationproperties = citycodeMap.get(data[k+1]);
	    		        data[k+1]=data[k+1].replace("_"," ").replace("-"," ");
	    		        data[k+1]=capitalizeString(data[k+1]);
	    		        obj.setCity(data[k+1]);
	    		        System.out.println(data[k+1]);
	    		        obj.setLocationcode(locationproperties);
	            		}
	            		catch(Exception e)
	            		{
	            			continue;
	            		}
	            	}
	            	if(groupby.get(k).equals("audience_segment"))
		             {
	            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
	            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
	            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
	            		obj.setAudience_segment(audienceSegment);
	            		obj.setAudienceSegmentCode(audienceSegmentCode);
	            		}
	            		else
	            	    obj.setAudience_segment(data[k+1]);
	            		
		             }
	            	
	            	
	            	if(groupby.get(k).equals("gender")){
			         
	            		String genderId = GenderMap1.get(data[k+1]);
	            		obj.setGenderId(genderId);
	            		obj.setGender(capitalizeString(data[k+1]));
	            	}
	            	if(groupby.get(k).equals("hour"))
			             obj.setDate(data[k+1]);
	            	
	            	if(groupby.get(k).equals("minute"))
			             obj.setDate(data[k+1]);
	            	
	            	
	            	//if(groupby.get(k).equals("gender"))
			           //  obj.setGender(capitalizeString(data[k+1]));
	            	
	            	
	            	if(groupby.get(k).equals("refcurrentoriginal"))
			             obj.setGender(capitalizeString(data[k+1]));
		            	
	            	if(groupby.get(k).equals("date"))
			             obj.setDate(data[k+1]);
		            		            	
	            	if(groupby.get(k).equals("subcategory"))
			             {
	            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
	            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
	            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
	            		obj.setSubcategory(audienceSegment);
	            		obj.setSubcategorycode(audienceSegmentCode);
	            		}
	            		else
	            	    obj.setSubcategory(data[k+1]);
			             }
	            	
	            	if(groupby.get(k).equals("agegroup"))
	            	{
	            		String ageId = AgeMap1.get(data[k+1]);
	            		obj.setAgeId(ageId); 
	            		
	            		data[k+1]=data[k+1].replace("_","-");
		        		 data[k+1]=data[k+1]+ " Years";
		        		 if(data[k+1].contains("medium")==false)
		        		 obj.setAge(data[k+1]);
		        	}
		            	
		            	
	            	if(groupby.get(k).equals("incomelevel")){
	            		String incomelevelId = IncomeMap1.get(data[k+1]);
	            		obj.setIncomeId(incomelevelId);
	            		obj.setIncomelevel(capitalizeString(data[k+1]));
	            	}
                l++;
	                }
	                catch(Exception e){
	                	continue;
	                }
	                
	                }
	            }
	           
	            
	            	            
	            if(l!=0){
	            	 //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		            	obj.setCount(data[l+1]);
		             
			          //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             //   obj.setVisitorCount(data[l+1]);
		         

			         //  if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime") )
		             //   obj.setEngagementTime(data[l+1]);
		         
	            
	            
	            }       
			    String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        pubreport.add(obj);
		        l=0;
		    	 }
		    	 catch(Exception e){
		    		 continue;
		    	 }
		    	 
		    	 }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    
		    
		    for(int i=0;i<pubreport.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(count.toString()); 
		       
         }     
		    
		    
		    return pubreport;
		  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
/*
  public List<PublisherReport> getnestedList(List<PublisherReport> obj,String queryfield, List<String>groupby) {
	 
	  Map<PublisherReport,List<PublisherReport>> pubreport = new FastMap<PublisherReport,List<PublisherReport>>();
	  String key="";
	  
	  for(int i=0; i<obj.size(); i++ ){
		  if(queryfield.equals("gender")){
	        	key = obj.get(i).getGender();
	            
	     
	        	
	        	
		  }  	
	        	
	        	if(queryfield.equals("device"))
	            key = obj.get(i).getDevice_type();
	        	
	            if(queryfield.equals("state"))
          	{
          	
          
          
          if(queryfield.equals("country"))
      	  {
      	
           	}
      
	            
	            
	            
	            if(queryfield.equals("city")){
	        		
	        		
	        		}
	        	if(queryfield.equals("audience_segment"))
	             {
	        		
	             }
	        	
	        	if(queryfield.equals("reforiginal"))
		             obj.setReferrerSource(data[0]);
	            	
	        	if(queryfield.equals("agegroup"))
	        	{
	        		
	        		 obj.setAge(data[0]);
	        	}
	            	
	            	
	        			        		        	
	        	if(queryfield.equals("incomelevel"))
		          obj.setIncomelevel(capitalizeString(data[0]));
	     
	        	
	        	if(queryfield.equals("system_os")){
	        		
	        	}
	         	
	        	if(queryfield.equals("modelName")){
		          
	        	}
	        	
	        	
	        	if(queryfield.equals("brandName")){
	        		
	        	}
	        	

	        	if(queryfield.equals("refcurrentoriginal"))
	        	{
	        		
	        	}
		  
		  
	  }
	  
  }
   
 */ 
  


public List<PublisherReport> getQueryFieldChannelGroupByLive(String queryfield,String startdate, String enddate, String channel_name, List<String> groupby, String filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	      
	String querygroupbybuilder = convert(groupby);
    
    String query = "";
    
    
    int  l=0;
    
    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
 	query = "Select count(*),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
    
    
    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime"))
     	query = "Select SUM(engagementTime),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
        
    
    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount"))
     	query = "Select "+queryfield+","+querygroupbybuilder+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
        

    if(querygroupbybuilder.equals("hour")){
    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
   
    	
    }
  
    if(querygroupbybuilder.equals("minute")){
    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
   		    
    } 	
    
    if(querygroupbybuilder.equals("second")){
    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    //	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
   		    
    } 	
    
    
    
    if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
    {
    	
    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
    }
    
    	
    if(querygroupbybuilder.equals("minute") && queryfield.equals("totalViews"))
    {
    	
    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
    }
    	
    if(querygroupbybuilder.equals("second") && queryfield.equals("totalViews"))
    {
    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
    //	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
    }
    
    	
    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
    {
    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
			      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
    	
    }
 		    
		    	
    if(querygroupbybuilder.equals("minute") && queryfield.equals("uniqueVisitors"))
    {
    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
			      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
    	
    }
    	
    
    if(querygroupbybuilder.equals("second") && queryfield.equals("uniqueVisitors"))
    {
    //	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
		//	      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
    	
    }
    
    
    if(querygroupbybuilder.equals("hour") && queryfield.equals("engagementTime"))
    {
    	query = "SELECT count(*) FROM enhanceduserdatabeta1 where channel_name = '" + 
			      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
    	
    }
 		    
		    	
    if(querygroupbybuilder.equals("minute") && queryfield.equals("engagementTime"))
    {
    	query = "SELECT count(*) FROM enhanceduserdatabeta1 where channel_name = '" + 
			      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
    	
    }
    	
    
    if(querygroupbybuilder.equals("second") && queryfield.equals("engagementTime"))
    {
    //	query = "SELECT count(*) FROM enhanceduserdatabeta1 where channel_name = '" + 
		//	      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
    	
    }
    
    
    System.out.println(query);
         	CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    
		  
		 //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			    //lines = processList1(lines);
		   
		    if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
			    
		    	   List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
		   
		    	 
				    ExecutorService executorService = Executors.newFixedThreadPool(2000);
			        
			        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
			    
			        List<String> Query = new ArrayList();
			     
			        queryfield = "audience_segment,subcategory";
			       
					String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
					    
						
				    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
						
						
				    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by audience_segment,subcategory";  
			       
				    
				    Query.add(query1);
			        Query.add(query2);
				    Query.add(query3);
				    Query.add("externalWorldQueryLive@"+startdate+"@"+enddate+"@"+channel_name);
			       
			       for(int j=0 ; j < Query.size(); j++ ){
			       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
			    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
			        
			       // returns a list of Futures holding their status and results when all complete
			    
			   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
			       }
			       
			       
			       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				

				    for (int k = 0; k < maps.size(); k++)
				    {
				    
				    	if(maps!=null && maps.get(k)!=null){
				        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				        pubreport1.addAll(map);
				    	}
				
		    }
			
				    executorService.shutdown();
				    
				    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				    
				    List<PublisherReport> object = new ArrayList<PublisherReport>();
				    
				    
				    for(int k=0; k< pubreport1.size(); k++)
				    {
			         try{ 
				    	String audiencesegment = pubreport1.get(k).getAudience_segment();
				    	
				    	String subcategory = pubreport1.get(k).getSubcategory();
				    	
				    	  String count =  pubreport1.get(k).getCount();
			        		
					        String engagementTime =  pubreport1.get(k).getEngagementTime();		
					        
					        String visitorCount = pubreport1.get(k).getVisitorCount();
				    	
					        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
					        
				    	    String key = audiencesegment+"@"+subcategory;
					        
					        
					        if(aggregatedmap.containsKey(key))
			        {
			       
			        PublisherReport obj = aggregatedmap.get(key);
			        obj.setAudience_segment(audiencesegment);
			        obj.setSubcategory(subcategory);
			      
			        
			        if(count!=null)
			        obj.setCount(count);
			        	
			        if(engagementTime!=null) 	
			        	obj.setEngagementTime(engagementTime);
			        	
			       if(visitorCount!=null) 	
			        	obj.setVisitorCount(visitorCount);
			        
			       if(externalWorldCount!=null)
			    	   obj.setExternalWorldCount(externalWorldCount);
			       else
     	    	   obj.setExternalWorldCount("0");
			       
			       
			       
			       if(key !=null) {	
			    	obj.setAudience_segment(audiencesegment);
			        obj.setSubcategory(subcategory);
			       }
			       
			       
				    aggregatedmap.put(key, obj);
				    
			        }
			        else{
			        	       
			        	        PublisherReport obj = new PublisherReport();
			        	     
			        	        if(count !=null)
			        	        obj.setCount(count);
			        	        	
			        	        if(engagementTime !=null) 	
			        	        obj.setEngagementTime(engagementTime);
			        	        	
			        	       if(visitorCount !=null) 	
			        	        obj.setVisitorCount(visitorCount);
			        	
			        	       
			        	       if(externalWorldCount!=null)
						    	   obj.setExternalWorldCount(externalWorldCount);
			        	       else
			        	    	   obj.setExternalWorldCount("0");
			        	       
			        	       if(key!=null) {	
			        	    	obj.setAudience_segment(audiencesegment);
			   			        obj.setSubcategory(subcategory);
			        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	      
			        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			 		        	
			        	       
			        	       
			        	       }
			        	       aggregatedmap.put(key, obj);
			        
			        
			        }
			         }
			         catch(Exception e){
			        	 continue;
			         }
			      
				    }
				    
				     
				    
				    List<String> headers1 = new ArrayList<String>();
				    headers1.add("audience_segment");
				    headers1.add("subcategory");
				    headers1.add("count(*)");
				    headers1.add("SUM(engagementTime)");
				    headers1.add("COUNT(DISTINCT(cookiehash))");
				    headers1.add("ExternalWorldCount");
				    List<String> lines1= new ArrayList<String>();	
				    
				    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				    
				    	
				    	try{
				    	String key = entry.getKey();
				        PublisherReport obj = entry.getValue();
				        String [] parts1= key.split("@");
				        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
				      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	lines1.add(line);
				        
				        
				       
				      }
				      catch(Exception e){
				    	  continue;
				      }
				    
				   
				    
				    
				    
				    
				    
				    
				    
				    }
				    
				    

				    List<List<String>> data = new ArrayList<List<String>>();
				    for (int i = 0; i < lines1.size(); i++) {
			            List<String> objects = new ArrayList<String>();
			            String [] parts = lines1.get(i).split(",");
			            for(int j =0; j< parts.length; j++)
			              objects.add(parts[j]);
			           
			            data.add(objects);
			        }
				    
				    
				    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
				    
				     queryfield = "audience_segment";
				//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
				 //   String s = json.toString();
				    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
				 //   System.out.println(nestedJson);
				    return pubreport;
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	/* 
		    List<List<String>> data = new ArrayList<List<String>>();
		    for (int i = 0; i < lines.size(); i++) {
	            List<String> objects = new ArrayList<String>();
	            String [] parts = lines.get(i).split(",");
	            for(int j =0; j< parts.length; j++)
	              objects.add(parts[j]);
	           
	            data.add(objects);
	        }
		    
		    
		    ResultSet obj = ListtoResultSet.getResultSet(headers, data);
		    
		    
		//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
		 //   String s = json.toString();
		    pubreport= NestedJSON.getNestedJSONObject(obj, queryfield, groupby,filter); 
		 //   System.out.println(nestedJson);
		    return pubreport;
		    
		    
		    */
		    
		    } 
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    if(queryfield.equals("totalViews"))
		    {
		    	if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
			    {
			      for (int i = 0; i < lines.size(); i++)
			      {
			       
			    	 try{ 
			    	  PublisherReport obj = new PublisherReport();
			    	  String[] data = ((String)lines.get(i)).split(",");
			    	  obj.setDate(data[0]);
			    	  obj.setCount(data[1]);
			    	  pubreport.add(obj);
			    	 
			    	 }
			    	 catch(Exception e) 
			    	 {
			    		 continue;
			    	 }
			      
			      }
			      
			    } 
		    
		    	for(int i=0;i<pubreport.size();i++){    
	 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		    	
		    	
		       return pubreport;
		    }
		    	
		    if(queryfield.equals("uniqueVisitors"))
		    {
		    	if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
			    {
			      for (int i = 0; i < lines.size(); i++)
			      {
			       
			    	 try{ 
			    	  PublisherReport obj = new PublisherReport();
			    	  String[] data = ((String)lines.get(i)).split(",");
			    	  obj.setDate(data[0]);
			    	  obj.setCount(data[1]);
			    	  pubreport.add(obj);
			    	 
			    	 }
			    	 catch(Exception e) 
			    	 {
			    		 continue;
			    	 }
			      
			      }
			      
			    } 
		    
		    	for(int i=0;i<pubreport.size();i++){    
	 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		    	
		    	
		       return pubreport;
		    	
		    	
		    }
		    //System.out.println(headers);
		    //System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		       
		    	 try{ 
		    	  PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		        
		            if(queryfield.equals("gender")){
		        	
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	
		            	
		            	obj.setGender(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("state"))
	            	{
	            	
	            	data[0]=data[0].replace("_", " ");
	            	String stateId = StateMap1.get(data[0]);
	                obj.setStateId(stateId);

	            	data[0] = capitalizeString(data[0]);
	            	obj.setState(data[0]);
	            	}
	            
	            
	            if(queryfield.equals("country"))
	        	  {
	        	
	            	data[0]=data[0].replace("_", " ");

	                String countryId = CountryMap1.get(data[0]);
	                obj.setCountryId(countryId);
	            	data[0] = capitalizeString(data[0]);
	            	obj.setCountry(data[0]);
	             	}
	        
		            
		            
		            
		            if(queryfield.equals("device")){
		        	
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }
		        	
		            
		            if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e){
		        			
		        			continue;
		        		}
		        		
		        		}
		        	
		        	if(queryfield.equals("audience_segment"))
		             {
		        		
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		        		
		             }
		        	
		        	if(queryfield.equals("reforiginal"))
			             obj.setReferrerMasterDomain(data[0]);
		            	
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		
		        		data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        	if(queryfield.equals("incomelevel")){
			         
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
			          obj.setMobile_device_model_name(data[0]);
			          String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
			        	
				        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				        System.out.println(mobiledeviceproperties[2]);
				        obj.setDevicecode(mobiledeviceproperties[0]);
				        System.out.println(mobiledeviceproperties[0]);
		        	}
		        	
		        	
		        	if(queryfield.equals("brandName"))
		        	{ 
		        		data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}
		        	

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	
		        	
		        	
		        	//   obj.setCode(code);
	            for(int k = 0; k < groupby.size(); k++)
	            {
	            	
	            	if(groupby.get(k).equals(queryfield)==false)
	            	{
	                try{
	            	if(groupby.get(k).equals("device")){
	            	
	            		
	            		String deviceId = deviceMap1.get(data[k+1]);
	            		obj.setDeviceId(deviceId);
	            		obj.setDevice_type(capitalizeString(data[k+1]));
	            	}
	            	if(groupby.get(k).equals("city")){
	            		try{
	            		String locationproperties = citycodeMap.get(data[k+1]);
	    		        data[k+1]=data[k+1].replace("_"," ").replace("-"," ");
	    		        data[k+1] = capitalizeString(data[k+1]);
	    		        obj.setCity(data[k+1]);
	    		        System.out.println(data[k+1]);
	    		        obj.setLocationcode(locationproperties);
	            		}
	            		catch(Exception e)
	            		{
	            			continue;
	            		}
	            	}
	            	
	            	if(groupby.get(k).equals("audience_segment"))
		             {
	            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
	            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
	            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
	            		obj.setAudience_segment(audienceSegment);
	            		obj.setAudienceSegmentCode(audienceSegmentCode);
	            		}
	            		else
	            	    obj.setAudience_segment(data[k+1]);
	            		
	            		
		             }
	            	
	            	
	            	if(groupby.get(k).equals("gender")){
			         
	            		String genderId = GenderMap1.get(data[k+1]);
	            		obj.setGenderId(genderId);
	            		
	            		
	            		obj.setGender(capitalizeString(data[k+1]));
	            	}
	            	 if(groupby.get(k).equals("state"))
		             	{
		             	
		             	data[k+1]=data[k+1].replace("_", " ");
		             	data[k+1] = capitalizeString(data[k+1]);
		             	obj.setState(data[k+1]);
		             	}
		             
		             
		             if(groupby.get(k).equals("country"))
		         	  {
		         	
		             	data[k+1]=data[k+1].replace("_", " ");
		             	data[k+1] = capitalizeString(data[k+1]);
		             	obj.setCountry(data[k+1]);
		              	}
	            	
	            	
	            	if(groupby.get(k).equals("hour"))
			             obj.setDate(data[k+1]);
	            	
	            	if(groupby.get(k).equals("minute"))
			             obj.setDate(data[k+1]);
	            	
	            	
	            	
	            	if(groupby.get(k).equals("refcurrentoriginal"))
			             obj.setGender(capitalizeString(data[k+1]));
		           
	            	if(groupby.get(k).equals("date"))
			             obj.setDate(data[k+1]);
		            	
	            	
	            	
	            	if(groupby.get(k).equals("subcategory"))
	            	 {
	            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
	            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
	            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
	            		obj.setSubcategory(audienceSegment);
	            		obj.setSubcategorycode(audienceSegmentCode);
	            		}
	            		else
	            	    obj.setSubcategory(data[k+1]);
			             
	                }
	                
	            	if(groupby.get(k).equals("agegroup"))
	            	{
	            		String ageId = AgeMap1.get(data[k+1]);
	            		obj.setAgeId(ageId);
	            		
	            		
	            		 data[k+1]=data[k+1].replace("_","-");
		        		 data[k+1]=data[k+1]+ " Years";
		        		 if(data[k+1].contains("medium")==false)
		        		 obj.setAge(data[k+1]);
		        	}
		            	
		            	
	            	if(groupby.get(k).equals("incomelevel")){
	            		String incomelevelId = IncomeMap1.get(data[k+1]);
	            		obj.setIncomeId(incomelevelId);
	            		
	            		obj.setIncomelevel(capitalizeString(data[k+1]));
	            	}
                    l++;
	                }
	                catch(Exception e){
	                	continue;
	                }
	                
	                }
	            }
	           
	            if(l!=0){
	            
	            	    //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			            	obj.setCount(data[l+1]);
			             
				         //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             //   obj.setVisitorCount(data[l+1]);
			         

				        //    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime") )
			            //    obj.setEngagementTime(data[l+1]);
	            }
	 		    String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        pubreport.add(obj);
		        l=0;
		    	 }
		    	 catch(Exception e){
		    		 continue;
		    	 }
		    	 
		    	 }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    
		    
		    
		    for(int i=0;i<pubreport.size();i++){    
	          	  
		          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		          pubreport.get(i).setCount(count.toString()); 
		       
         }     
		    
		    
		    return pubreport;
		  }
  
  
  
  public List<PublisherReport> getQueryFieldChannelArticle(String queryfield,String startdate, String enddate, String channel_name,String articlename, String filter,String filtertype)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
	 
	  

		if (queryfield.equals("Author")) {
          queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
          queryfield =  "sourceUrl";
	} 
	  
		List<PublisherReport> pubreport1 = new ArrayList();
		
		if(queryfield.equals("visitorTypecombined"))
	    {

			 
			 
			 List<PublisherReport> object = new ArrayList();
			 pubreport1 = countCombinedUsersChannelArticleDatewise(startdate, enddate, channel_name,articlename, filter);
		    
		    for (PublisherReport value : pubreport1) {
		        
		      
		      
		        
	            Double averageTime = 0.0;
		        
		        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        
		        
		        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        
		        
		        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        
		     
	       	       object.add(value); 
		    
		    
		    }
		    
	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
			    
	            Collections.sort(object, new Comparator<PublisherReport>() {
	 				
	 				@Override
	 		        public int compare(PublisherReport o1, PublisherReport o2) {
	 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
	 		        }
	 		    });	
			    
			    }
			    
			    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
			    	

		            Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		 		        }
		 		    });	
			    	
			    	
			    }
			    
			    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
			    	
	                    Collections.sort(object, new Comparator<PublisherReport>() {
		 				
		 				@Override
		 		        public int compare(PublisherReport o1, PublisherReport o2) {
		 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		 		        }
		 		    });	
			    	
			    	
			    }
			    
			    
			    
			    
			   
			    
			    
	            Double total2 = 0.0;
	Double totalvisits = 0.0;
	Double totaleT = 0.0;
	Double totalvisitor = 0.0;
	Double share1 = 0.0;
	Double sharevisits = 0.0;
	Double shareeT = 0.0;
	Double sharevisitor = 0.0;
	Double maxTotal = 0.0; 
	Double scaledshare = 0.0;	 
	Double share = 0.0;
	Double scaledsharevisits = 0.0;
	Double scaledshareeT = 0.0;
	Double scaledsharevisitor = 0.0;
	Double maxsharevisits = 0.0;
	Double maxshareeT = 0.0;
	Double maxsharevisitor = 0.0;

	for(int i=0;i<object.size();i++){
	  
	      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		  { 
	    	  total2=total2+Double.parseDouble(object.get(i).getCount());

		      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
	 	    	    }
		  
		  
		  
		  }
	      
	      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
	    	 
	    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		    	    {
		    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
	   }
	      
	      
	      }
	      
	      
	      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
	    
	    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		    	    {
		    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
	   }
	      
	      
	      }  	  
	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
	   

	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
	    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
	    
	    
	    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
	 	    {
	  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
	}
	    
	    
	    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
	 	    {
	  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
	}
	    
	    
	    
	    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
	 	    {
	  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
	}
	    
	    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	  
	   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	  
	  
	}
	       
	for(int i=0;i<object.size();i++){
	             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
	             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
	             
	             }
	             
	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
	                 
	             }
	            	 
	            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
	            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
	            }
	            	 
	            	 
	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      
	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
	           
	           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
	           
	           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
	       //  object.get(i).setScaledShare(scaledshare.toString());	             
	             
	  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
	  object.get(i).setScaledshareeT(scaledshareeT.toString());
	  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
	  object.get(i).setShare(share.toString());
	  object.get(i).setSharetotalvisits(sharevisits.toString());
	  object.get(i).setShareeT(shareeT.toString());
	  object.get(i).setSharevisitorCount(sharevisitor.toString());
	object.get(i).setScaledShare(scaledshare.toString());
	}
		  
		  

			    		  
			    		  
			      
			       
			         for(int i=0;i<object.size();i++){    
			        	   
			        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
					         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
					       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
					          object.get(i).setCount(numberFormat.format(count)); 
					       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
					          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
			           
					          
			         }   
		    return object;		
			
			
	    }
		
		
	  
	  
	  String query= "";
      
      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	    query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	    
      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
      query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	    
      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		   
      
      
      
            CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		  //  List<PublisherReport> pubreport1 = new ArrayList();
		    Integer accumulatedcount = 0;
		    Integer flag = 0;
		    //System.out.println(headers);
		    //System.out.println(lines);
		 //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		       // lines = processList(lines);
		    
		    
		    
		    
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		    	try{  
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		            
		            if(queryfield.equals("gender")){
		        	  
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	
		            	obj.setGender(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("device")){
		        	
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }
		            
		            if(queryfield.equals("state"))
	            	{
	            	
	            	data[0]=data[0].replace("_", " ");
	            	String stateId = StateMap1.get(data[0]);
	                obj.setStateId(stateId);

	            	data[0] = capitalizeString(data[0]);
	            	obj.setState(data[0]);
	            	}
	            
	            
	               if(queryfield.equals("country"))
	        	  {
	        	
	            	data[0]=data[0].replace("_", " ");
	            	  String countryId = CountryMap1.get(data[0]);
	                  obj.setCountryId(countryId);
	            	data[0] = capitalizeString(data[0]);
	            	obj.setCountry(data[0]);
	             	}
		            
		            
		            
		            
		            if(queryfield.equals("city")){
		        		
		            	
		            	try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e)
		        		{
		        			continue;
		        		}
		        		
		        		
		            
		            
		            }
		        	
		        	if(queryfield.equals("audience_segment"))
		        	{
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		        		
		        	}
		        	
		        	if(queryfield.equals("sourceUrl")){
			         
		        		
		        		String urlId = UrlMap1.get(data[0]);
		        		obj.setUrlId(urlId);
		        		
		        		obj.setReferrerMasterDomain(data[0]);
		        	}
		        	
		        	if(queryfield.equals("referrerType")){
			         
		        		String referrerTypeId = referrerTypeMap1.get(data[0]);
		        		obj.setReferrerTypeId(referrerTypeId);
		        		obj.setReferrerSource(data[0]);	            	
		        	}
		        	
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		
		        		data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        	if(queryfield.equals("incomelevel")){
			         
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		        	
		        	if(queryfield.equals("ISP")){
		        		if(data[0].trim().toLowerCase().equals("_ltd")==false){
		        			data[0]=data[0].replace("_"," ");
		        			obj.setISP(capitalizeString(data[0]));
		        		}
		        	}
		        		
		            if(queryfield.equals("organisation")){
		        
		            	if((!data[0].trim().toLowerCase().contains("broadband")) && (!data[0].trim().toLowerCase().contains("communication")) && (!data[0].trim().toLowerCase().contains("cable")) && (!data[0].trim().toLowerCase().contains("telecom")) && (!data[0].trim().toLowerCase().contains("network")) && (!data[0].trim().toLowerCase().contains("isp")) && (!data[0].trim().toLowerCase().contains("hathway")) && (!data[0].trim().toLowerCase().contains("internet")) && (!data[0].trim().toLowerCase().equals("_ltd")) && (!data[0].trim().toLowerCase().contains("googlebot")) && (!data[0].trim().toLowerCase().contains("sify")) && (!data[0].trim().toLowerCase().contains("bsnl")) && (!data[0].trim().toLowerCase().contains("reliance")) && (!data[0].trim().toLowerCase().contains("broadband")) && (!data[0].trim().toLowerCase().contains("tata")) && (!data[0].trim().toLowerCase().contains("nextra")))
		            	{
		            		data[0]=data[0].replace("_"," ");
		            		obj.setOrganisation(capitalizeString(data[0]));
		            	}
		            
		            }
		        	
		            
		            if(queryfield.equals("screen_properties")){
		        		
		        		obj.setScreen_properties(data[0]);
		        		
		        	}
		        	
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
		        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
			        	
				        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				        System.out.println(mobiledeviceproperties[2]);
				        obj.setDevicecode(mobiledeviceproperties[0]);
				        System.out.println(mobiledeviceproperties[0]);
		        
		        	}
		        	if(queryfield.equals("brandName"))
		        	{
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}
		        
		        	

		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	
		        	

		            Random random = new Random();	
		            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
		            Integer max = (int)Double.parseDouble(data[1]);
		            Integer randomNumber1 = random.nextInt(max) + 1;
		            
		            if(queryfield.equals("audience_segment"))	
		            {
		            obj.setCount(data[1]); 	
		            obj.setExternalWorldCount(randomNumber.toString());	
		            obj.setVisitorCount(randomNumber1.toString());
		            obj.setAverageTime("0.0");	
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
		            
			        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			     //   Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(articleAuthor);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        pubreport.add(obj);
		            
		            }
		           
		            else if(queryfield.equals("agegroup")==true) {
		            	
		            	if(data[0].contains("medium")==false){
		            		  //  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				            	 obj.setCount(data[1]);
				               
				               //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				               //  obj.setEngagementTime(data[1]);
				        

				              //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				              //   obj.setVisitorCount(data[1]);
				            
		            		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		 		            
		 		            
		     		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		     		        pubreport.add(obj);
		            	}
		            }
		            
		            else{
		            	 //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			            	 obj.setCount(data[1]);
			               
			              
			            	 
			            	 if(queryfield.equals("sourceUrl") || queryfield.equals("referrerType")){
	        	            	 
	        	            	 if(data[0].contains("Social")){
	        	           			obj.setLikes("45");
	        	           		    obj.setShares("10");
	        	           		}		
	        	            	 
	        	            	 else if(data[0].contains("facebook")){
	        	            		 
	        	            		 obj.setLikes("45");
	         	           		     obj.setShares("10");
	        	            	 }
	        	            	 
	        	            	 
	        	            	  else{	
	        	           			
	        	           			obj.setLikes("0");
	        	           			obj.setShares("0");
	        	           			
	        	           		}		 
	        	            	 
	        	             }
			            	 
			            	 
			            	 
			            	 //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //   obj.setEngagementTime(data[1]);
			        

			              //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			              //   obj.setVisitorCount(data[1]);
			            
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
		            
			        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			        pubreport.add(obj);
		            
		            
		            }
		           
		    	}
		    	catch(Exception e){
		    		continue;
		    	}
		    	
		    	
		    	}
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    
		    
		    Double total = 0.0;
	        Double share =0.0;
	        Double maxTotal = 0.0; 
	        Double scaledshare = 0.0;
	        
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
   	    	    {
   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
 	    }
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	    	    
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	      	        	 
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		    
		    
		    
		    
		    
		    if (queryfield.equals("LatLong")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countLatLongChannelArticle(startdate, enddate, channel_name, articlename,filter);
		
		  		
		  		for(int i=0;i<pubreport.size();i++){    
	 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		  		
		  		
		  		return pubreport;
		    }
		    
		    if (queryfield.equals("postalcode")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countPinCodeChannelArticle(startdate, enddate, channel_name, articlename);
		  		
		  		for(int i=0;i<pubreport.size();i++){    
	 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		  		
		  		
		  		
		  		return pubreport;
		    }
		    
		    
		    if (queryfield.equals("cityOthers")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countCityChannelArticle(startdate, enddate, channel_name, articlename,filter);
		  		
		  		
		  	  total = 0.0;
		        share =0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;  
		        
		        
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	    	    
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		  		
		         for(int i=0;i<pubreport.size();i++){    
	 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		  		return pubreport;
		    }
		    
		    
		    if (queryfield.equals("stateOthers")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countStateChannelArticle(startdate, enddate, channel_name, articlename,filter);
		  		
		  	  total = 0.0;
		        share =0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;    
		      
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	 
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		  		
		  		
		         for(int i=0;i<pubreport.size();i++){    
	 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		  		return pubreport;
		    }
		    
		    if (queryfield.equals("countryOthers")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		  		pubreport=module.countCountryChannelArticle(startdate, enddate, channel_name, articlename,filter);
		  		
		  	    total = 0.0;
		        share = 0.0;

		   	 maxTotal = 0.0; 
		        scaledshare = 0.0;
		        
		        
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		  		
		  		
		         for(int i=0;i<pubreport.size();i++){    
	 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		  		
		  		return pubreport;
		    }
		    
		    
		    if (queryfield.equals("newVisitors")) {
		        
		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
				pubreport=module.countNewUsersChannelArticleDatewise(startdate, enddate, channel_name, articlename,filter); 
		        return pubreport;
		    }
		    
		    
		    if (queryfield.equals("returningVisitors")) {
		        
		    	 AggregationModule module =  AggregationModule.getInstance();
		 	    try {
		 			module.setUp();
		 		} catch (Exception e1) {
		 			// TODO Auto-generated catch block
		 			e1.printStackTrace();
		 		}
				pubreport=module.countReturningUsersChannelArticleDatewise(startdate, enddate, channel_name, articlename,filter); 
		        return pubreport;
		    }
		    
		    if (queryfield.equals("LoyalVisitors")) {
		        
		    	 AggregationModule module =  AggregationModule.getInstance();
		  	    try {
		  			module.setUp();
		  		} catch (Exception e1) {
		  			// TODO Auto-generated catch block
		  			e1.printStackTrace();
		  		}
		 		pubreport=module.countLoyalUsersChannelArticleDatewise(startdate, enddate, channel_name, articlename,filter); 
		        return pubreport;
		    }
		    
		    

		    if (queryfield.equals("benchmarktotalViews")) {
		        
		      	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		   		pubreport=module.countbenchmarktotalvisitorsChannelArticle(startdate, enddate, channel_name,articlename);
		   		
		   		for(int i=0;i<pubreport.size();i++){    
	 	          	  
		   		 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
		   		pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
			       
	           } 
		   		
		   		
		   		return pubreport;
		      }
		      
		      if (queryfield.equals("benchmarktotalViewsDatewise")) {
		              
		           	 AggregationModule module =  AggregationModule.getInstance();
		         	    try {
		         			module.setUp();
		         		} catch (Exception e1) {
		         			// TODO Auto-generated catch block
		         			e1.printStackTrace();
		         		}
		        		pubreport=module.countbenchmarktotalvisitorsChannelArticleDatewise(startdate, enddate, channel_name, articlename);
		        	
		        		
		        		for(int i=0;i<pubreport.size();i++){    
		   	          	  
		        			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
		        			 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
					       
			           } 
		        		
		        		
		        		
		        		return pubreport;
		           }
		   
		   
		    if (queryfield.equals("benchmarktotalViewsHourwise")) {
		           
		       	 AggregationModule module =  AggregationModule.getInstance();
		     	    try {
		     			module.setUp();
		     		} catch (Exception e1) {
		     			// TODO Auto-generated catch block
		     			e1.printStackTrace();
		     		}
		    		pubreport=module.countbenchmarktotalvisitorsChannelArticleHourwise(startdate, enddate, channel_name, articlename);
		    		
		    		for(int i=0;i<pubreport.size();i++){    
		 	          	  
		    			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
		    			 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
				       
		           } 
		    		
		    		
		    		
		    		return pubreport;
		       } 
		    
		    
		    
		    if (queryfield.equals("benchmarkuniqueVisitorsDatewise")) {
		            
		         	 AggregationModule module =  AggregationModule.getInstance();
		       	    try {
		       			module.setUp();
		       		} catch (Exception e1) {
		       			// TODO Auto-generated catch block
		       			e1.printStackTrace();
		       		}
		      		pubreport=module.countbenchmarkfingerprintChannelArticleDatewise(startdate, enddate, channel_name, articlename);
		      		
		      		
		      		for(int i=0;i<pubreport.size();i++){    
		 	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
				          pubreport.get(i).setReach(numberFormat.format(count)); 
				       
		           } 
		      		
		      		
		      		
		      		
		      		return pubreport;
		         }
		    
		    
		     if (queryfield.equals("benchmarkuniqueVisitorsHourwise")) {
		            
		         	 AggregationModule module =  AggregationModule.getInstance();
		       	    try {
		       			module.setUp();
		       		} catch (Exception e1) {
		       			// TODO Auto-generated catch block
		       			e1.printStackTrace();
		       		}
		      		pubreport=module.countbenchmarkfingerprintChannelArticleHourwise(startdate, enddate, channel_name, articlename);
		      		
		      		for(int i=0;i<pubreport.size();i++){    
		 	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
				          pubreport.get(i).setReach(numberFormat.format(count)); 
				       
		           } 
		      		
		      		
		      		
		      		
		      		return pubreport;
		     }
		     
		      if (queryfield.equals("benchmarkuniquevisitors")) {
		             
		          	 AggregationModule module =  AggregationModule.getInstance();
		        	    try {
		        			module.setUp();
		        		} catch (Exception e1) {
		        			// TODO Auto-generated catch block
		        			e1.printStackTrace();
		        		}
		       		pubreport=module.countbenchmarkfingerprintChannelArticle(startdate, enddate, channel_name, articlename);
		       		
		       		
		       		for(int i=0;i<pubreport.size();i++){    
		 	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
				          pubreport.get(i).setReach(numberFormat.format(count)); 
				       
		           } 
		       		
		       		
		       		
		       		
		       		
		       		return pubreport;
		     }
		     
		     
		       if(queryfield.equals("benchmarkengagementTime"))	
		                {
		             	   
		             	   AggregationModule module =  AggregationModule.getInstance();
		               	    try {
		               			module.setUp();
		               		} catch (Exception e1) {
		               			// TODO Auto-generated catch block
		               			e1.printStackTrace();
		               		}
		              		pubreport=module.benchmarkEngagementTimeChannelArticle(startdate, enddate, channel_name, articlename);
		              		
		              		
		              		for(int i=0;i<pubreport.size();i++){    
		       	          	  
		  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
		  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
		  			       
		  	           } 
		              		
		              		return pubreport;
		           }
		           
		           
		            
			              if(queryfield.equals("benchmarkengagementTimeDatewise"))	
			              {
			           	   
			           	   AggregationModule module =  AggregationModule.getInstance();
			             	    try {
			             			module.setUp();
			             		} catch (Exception e1) {
			             			// TODO Auto-generated catch block
			             			e1.printStackTrace();
			             		}
			            		pubreport=module.benchmarkEngagementTimeChannelArticleDatewise(startdate, enddate, channel_name, articlename);
			            		

			              		for(int i=0;i<pubreport.size();i++){    
			       	          	  
			  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
			  			       
			  	           } 
			            		
			            		
			            		return pubreport;
			              }
		           
		           
		            if(queryfield.equals("benchmarkengagementTimeHourwise"))	
			              {
			           	   
			           	   
			           	   AggregationModule module =  AggregationModule.getInstance();
			          	    try {
			          			module.setUp();
			          		} catch (Exception e1) {
			          			// TODO Auto-generated catch block
			          			e1.printStackTrace();
			          		}
			         		pubreport=module.benchmarkEngagementTimeChannelArticleHourwise(startdate, enddate, channel_name, articlename);
			         		

		              		for(int i=0;i<pubreport.size();i++){    
		       	          	  
		  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
		  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
		  			       
		  	           } 
			         		
			         		
			         		return pubreport;
			              
		           }
		           

		           
		        	
		        	
		            if(queryfield.equals("modelcombined"))
		            {
		        		 pubreport1.clear();

		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "modelName";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		        	    
		        		
		        	    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }
		        	    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getMobile_device_model_name()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getMobile_device_model_name());
		                obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
		          	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
		                   	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        
		        	    	String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		                   

		                    Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        try{
		        	        String modelName = devicecodeMap.get(value.getMobile_device_model_name());
		        	        String[] mobiledeviceproperties = modelName.split(",");
		                	
		        	        value.setMobile_device_model_name(mobiledeviceproperties[2]);
		        	        System.out.println(mobiledeviceproperties[2]);
		        	        value.setDevicecode(mobiledeviceproperties[0]);
		        	        System.out.println(mobiledeviceproperties[0]);
		        	        if(modelName.toLowerCase().contains("tablet")==false)
		        	        object.add(value); 
		                    }
		                    catch(Exception e){
		                    	continue;
		                    }
		        	     
		        	    }
		        	    
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		    		  
		        		      
		        		      
		        		 
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }        
		        		         
		        		         
		        	    return object;		
		        		
		        		
		            }
		          /*  
		        	if(queryfield.equals("reforiginalcombined"))
		            {
		        		 pubreport1.clear();

		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "reforiginal";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		        	    
		        		
		        	    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		           /*  }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }
		        	    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getMobile_device_model_name()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getMobile_device_model_name());
		                obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
		          	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
		                   	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        
		        	    	String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		                   

		                    Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        try{
		        	        String modelName = devicecodeMap.get(value.getMobile_device_model_name());
		        	        String[] mobiledeviceproperties = modelName.split(",");
		                	
		        	        value.setMobile_device_model_name(mobiledeviceproperties[2]);
		        	        System.out.println(mobiledeviceproperties[2]);
		        	        value.setDevicecode(mobiledeviceproperties[0]);
		        	        System.out.println(mobiledeviceproperties[0]);
		        	        if(modelName.toLowerCase().contains("tablet")==false)
		        	        object.add(value); 
		                    }
		                    catch(Exception e){
		                    	continue;
		                    }
		        	     
		        	    }
		        	   
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		        		    
		        		      Double total2 = 0.0;
		        		      Double totalvisits = 0.0;
		        		      Double totaleT = 0.0;
		        		      Double totalvisitor = 0.0;
		        		      Double share1 = 0.0;
		        		      Double sharevisits = 0.0;
		        		      Double shareeT = 0.0;
		        		      Double sharevisitor = 0.0;
		        		    		 
		        		    		  
		        		    		  
		        		      
		        		        for(int i=0;i<object.size();i++){
		        		      	  
		        		      	      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        		      		  total2=total2+Double.parseDouble(object.get(i).getCount());
		        		              
		        		      	      
		        		      	      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		        		      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		        		              

		        		      	      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") )
		        		      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		        		      	    	  
		        		      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		        		             

		        		      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		        		              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		        		              
		        		              
		        		              
		        		              
		        		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		        		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		        		            
		        		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		        		      	  
		        		      	  
		        		        }
		        		                 
		        		         for(int i=0;i<object.size();i++){
		        		      	             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        		      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		        		      	          
		        		      	             
		        		      	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		        		      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		        		      	            
		        		      	            	 
		        		      	            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        		      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		        		      	            	 
		        		      	            	 
		        		      	            	 
		        		      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		        		      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		        		      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		        		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		        		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		        		      	      
		        		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		        		      	
		        		      	  object.get(i).setShare(share.toString());
		        		      	  object.get(i).setSharetotalvisits(sharevisits.toString());
		        		      	  object.get(i).setShareeT(shareeT.toString());
		        		      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
		        		        
		        		         }
		        		 
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }        
		        		         
		        		         
		        	    return object;		
		        		
		        		
		            }
		            
		        	*/
		        	
		        	
		        	
		        	if(queryfield.equals("oscombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "system_os";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		              String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getOs()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOs());
		                obj.setOs(pubreport1.get(k).getOs());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getOs()!=null) 	
		          	        obj.setOs(pubreport1.get(k).getOs());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getOs(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getOs()!=null) 	
		                   	        obj.setOs(pubreport1.get(k).getOs());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getOs(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	     

		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        try{
		        	        String os = value.getOs();
		        	        String osproperties = oscodeMap.get(os);
		        	        os=os.replace("_"," ").replace("-", " ");
		        	        os = AggregationModule.capitalizeFirstLetter(os);
		        	        String [] osParts = oscodeMap1.get(osproperties).split(",");
		        	        value.setOs(osParts[0]);
		        	        value.setOSversion(osParts[1]);
		        	        value.setOscode(osproperties);
		        	        
		        	        object.add(value); 
		        	      }
		        	      catch(Exception e){
		        	    	  continue;
		        	      }
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		    		  
		        		      
		        		       
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }        
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }


		        	if(queryfield.equals("brandcombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "brandName";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		              String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getBrandname()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getBrandname());
		                obj.setBrandname(pubreport1.get(k).getBrandname());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getBrandname()!=null) 	
		          	        obj.setBrandname(pubreport1.get(k).getBrandname());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getBrandname()!=null) 	
		                   	        obj.setBrandname(pubreport1.get(k).getBrandname());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        

		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        String brand = value.getBrandname();
		        	        brand = AggregationModule.capitalizeFirstLetter(brand);
		            		value.setBrandname(brand);
		        	        object.add(value); 
		        	    
		        	    
		        	    }
		        	    
		        	    
		        	    
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		    		  
		        		      
		        		      
		        		    
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	
		        	
		        	
		        	if(queryfield.equals("screenresolutioncombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "resolution_properties";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		              String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getScreen_properties()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getScreen_properties());
		                obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getScreen_properties()!=null) 	
		          	        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getScreen_properties(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getScreen_properties()!=null) 	
		                   	        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getScreen_properties(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        

		                    Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        String resolution = value.getScreen_properties();
		        	        resolution= resolution.replace("_","-");
		            		value.setScreen_properties(resolution);
		        	        object.add(value); 
		        	    
		        	    
		        	    }
		        	    
		        	    
		        	    
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		    		  
		        		      
		        		      
		        		    
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	
		        	

		        	if(queryfield.equals("postalcodecombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "postalcode";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		              String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getPostalcode()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getPostalcode());
		                obj.setPostalcode(pubreport1.get(k).getPostalcode());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getPostalcode()!=null) 	
		          	        obj.setPostalcode(pubreport1.get(k).getPostalcode());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getPostalcode(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getPostalcode()!=null) 	
		                   	        obj.setPostalcode(pubreport1.get(k).getPostalcode());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getPostalcode(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        

		                    Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        String postalcode = value.getPostalcode();
		        	        postalcode= postalcode.replace("_","-");
		            		value.setPostalcode(postalcode);
		        	        object.add(value); 
		        	    
		        	    
		        	    }
		        	    
		        	    
		        	    
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		    		  
		        		      
		        		      
		        		    
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	
		        	

		        	if(queryfield.equals("ISPcombined"))
		            {

		        		pubreport1.clear();
		        	   
		        		ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "ISP";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		              String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getISP()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getISP());
		                obj.setISP(pubreport1.get(k).getISP());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getISP()!=null) 	
		          	        obj.setISP(pubreport1.get(k).getISP());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getISP(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getISP()!=null) 	
		                   	        obj.setISP(pubreport1.get(k).getISP());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getISP(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	     
		        	        

		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        
		        	        String isp = value.getISP();
		        	        if(isp.trim().toLowerCase().equals("_ltd")==false && isp.trim().toLowerCase().equals("limited")==false ){
		            	        isp = isp.replace("_", " ").replace("-", " ");
		            			value.setISP(capitalizeString(isp));
		        	        
		        	        object.add(value); 
		        	        }
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    	 
		        		    		  
		        		    		  
		        		      
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }        
		        		         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }


		        	if(queryfield.equals("organisationcombined"))
		            {
		        		 pubreport1.clear();

		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "organisation";
		             
		              String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        	    
		              String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
		               
		        	    
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getOrganisation()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOrganisation());
		                obj.setOrganisation(pubreport1.get(k).getOrganisation());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getOrganisation()!=null) 	
		          	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getOrganisation()!=null) 	
		                   	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        
		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        
		        	        
		        	        String organisation = value.getOrganisation();
		        	        if((!organisation.trim().toLowerCase().equals("limited")) && (!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("communication")) && (!organisation.trim().toLowerCase().contains("cable")) && (!organisation.trim().toLowerCase().contains("telecom")) && (!organisation.trim().toLowerCase().contains("network")) && (!organisation.trim().toLowerCase().contains("isp")) && (!organisation.trim().toLowerCase().contains("hathway")) && (!organisation.trim().toLowerCase().contains("internet")) && (!organisation.trim().toLowerCase().equals("_ltd")) && (!organisation.trim().toLowerCase().contains("googlebot")) && (!organisation.trim().toLowerCase().contains("sify")) && (!organisation.trim().toLowerCase().contains("bsnl")) && (!organisation.trim().toLowerCase().contains("reliance")) && (!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("tata")) && (!organisation.trim().toLowerCase().contains("nextra"))){
		        	        	organisation = organisation.replace("_", " ").replace("-", " ");
		                	    value.setOrganisation(capitalizeString(organisation));
		                	
		        	        object.add(value); 
		        	        }
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		         String queryv1 = "Select ISP from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' group by ISP";
		        		         CSVResult csvResultv1 = getCsvResult(false, queryv1);
		        		         List<String> headersv1 = csvResultv1.getHeaders();
		        		         List<String> linesv1 = csvResultv1.getLines();  
		        		      

		        		         String queryv2 = "Select organisation from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' group by organisation";
		        		         CSVResult csvResultv2 = getCsvResult(false, queryv2);
		        		         List<String> headersv2 = csvResultv2.getHeaders();
		        		         List<String> linesv2 = csvResultv2.getLines();
		        		         
		        		         linesv2.removeAll(linesv1);
		        		         
		        		         Set<String> set = new HashSet<String>();
		        		         set.addAll(linesv2);
		        		          
		        		         
		        		         
		        		        for(int i=0; i<object.size();i++){ 
		        		         if(!set.contains(object.get(i).getOrganisation().toLowerCase().replace(" ","_")))
		        		          {
		        		        	  
		        		        	  object.remove(i);
		        		          }
		        		        }
		        		         
		        		         
		        		         
		        		         
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	  
		        		        	 
		        		        	 
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           
		        		             
		        				         
		        		         
		        		         
		        		         }         
		        		         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	
		        		
		        	
		        	
		        	
		        	
		        	if(queryfield.equals("gendercombined"))
		            {
		        		 pubreport1.clear();

		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "gender";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getGender()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getGender());
		                obj.setGender(pubreport1.get(k).getGender());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getGender()!=null) 	
		          	        obj.setGender(pubreport1.get(k).getGender());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getGender(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getGender()!=null) 	
		                   	        obj.setGender(pubreport1.get(k).getGender());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getGender(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	       

		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        String gender = value.getGender();
		        	        
		        	        String genderId = GenderMap1.get(gender);
		            		value.setGenderId(genderId);
		        	        
		        	        value.setGender(capitalizeString(gender));
		        	        object.add(value); 
		        	    
		        	    
		        	    }
		        	    
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    	 
		        		    		  
		        		    		  
		        		      
		        		    
		        	  
		        		         
		        		          
		        		        	   Collections.sort(object, new Comparator<PublisherReport>() {
		        							
		        							@Override
		        					        public int compare(PublisherReport o1, PublisherReport o2) {
		        								return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
		        					        }
		        					    });	
		        		          
		        		                
		        		         
		        		         
		        		        	   for(int i=0;i<object.size();i++){    
		        			        	   
		        			        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        					         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        					       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        					          object.get(i).setCount(numberFormat.format(count)); 
		        					       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        					          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        			           }
		        		         
		        		         
		        		         return object;		
		        		
		        		
		        		
		        		
		            }

		        	
		        	

		        	if(queryfield.equals("agegroupcombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "agegroup";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getAge()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getAge());
		                obj.setAge(pubreport1.get(k).getAge());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getArticleAuthor()!=null) 	
		          	        obj.setAge(pubreport1.get(k).getAge());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getAge(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getAge()!=null) 	
		                   	        obj.setArticleAuthor(pubreport1.get(k).getAge());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getAge(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        
		        	        

		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        
		        	        
		        	        String age = value.getAge();
		        	        
		        	        String ageId = AgeMap1.get(age);
		            		value.setAgeId(ageId);
		        	        
		        	        age=age.replace("_","-");
		           		     age=age+ " Years";
		           		     if(age.contains("medium")==false){
		           		     value.setAge(age);
		        	         object.add(value); 
		           		     }
		        	    
		        	    }
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		      
		        		     
		        		    
		        	    
		        		         Collections.sort(object, new Comparator<PublisherReport>() {
		        						
		        						@Override
		        				        public int compare(PublisherReport o1, PublisherReport o2) {
		        							return  o1.getAge().compareTo(o2.getAge());
		        				        }
		        				    });	
		        		 
		        		         
		        		         
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }


		        	if(queryfield.equals("incomelevelcombined"))
		            {
		        		 pubreport1.clear();

		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "incomelevel";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getIncomelevel()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getIncomelevel());
		                obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getIncomelevel()!=null) 	
		          	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getIncomelevel()!=null) 	
		                   	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	       

		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        String incomelevel = value.getIncomelevel();
		        	        value.setIncomelevel(capitalizeString(incomelevel));
		        	        object.add(value); 
		        	    
		        	    
		        	    }
		        	    
		        	    
		                  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		      
		        		      

		        	        	   Collections.sort(object, new Comparator<PublisherReport>() {
		        						
		        						@Override
		        				        public int compare(PublisherReport o1, PublisherReport o2) {
		        							return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
		        				        }
		        				    });	
		        	          
		                           for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }
		        	   
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	
		        	
		        	
		        	if(queryfield.equals("citycombined"))
		            {
		        		 pubreport1.clear();

		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "city";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getCity()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCity());
		                obj.setCity(pubreport1.get(k).getCity());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getCity()!=null) 	
		          	        obj.setCity(pubreport1.get(k).getCity());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getCity(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getCity()!=null) 	
		                   	        obj.setCity(pubreport1.get(k).getCity());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getCity(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        
		                    Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        String city = value.getCity();
		        	       
		        	    	if(!city.equals("undetermined")){
		        	        try{
		        	        
		        	        	String locationproperties = citycodeMap.get(city);
		        		        city=city.replace("_"," ").replace("-"," ");
		        		        if(citylatlongMap1.get(city)!=null && !citylatlongMap1.get(city).isEmpty())
		        		        value.setCitylatlong(citylatlongMap1.get(city));
		        		        city=capitalizeString(city);
		        		        value.setCity(city);
		        		        System.out.println(city);
		        		        value.setLocationcode(locationproperties);
		        	        	}
		        	        	
		        	        	
		                		catch(Exception e){
		                			continue;
		                		}
		        	        object.add(value); 
		        	    	}
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		      
		        		  
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }        
		        		         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	

		        	if(queryfield.equals("statecombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "state";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getState()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getState());
		                obj.setState(pubreport1.get(k).getState());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getState()!=null) 	
		          	        obj.setState(pubreport1.get(k).getState());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getState(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getState()!=null) 	
		                   	        obj.setState(pubreport1.get(k).getState());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getState(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        

		                    Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        String state  = value.getState();
		        	        
		        	        if(!state.equals("undetermined")){
		        	        state=state.replace("_", " ");
		        	        String stateId = StateMap1.get(state);
		    	        	if(stateId!=null && !stateId.isEmpty())
		    	        	value.setStateId(stateId);
		        	        state = capitalizeString(state);
		                	value.setState(state);
		        	        
		        	        object.add(value); 
		        	        }
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    	 
		        		    		  
		        		    		  
		        		      
		        		   
		        		         
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }       
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	

		        	
		        	
		        	
		        	
		        	
		        	if(queryfield.equals("countrycombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "country";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getCountry()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCountry());
		                obj.setCountry(pubreport1.get(k).getCountry());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getArticleAuthor()!=null) 	
		          	        obj.setCountry(pubreport1.get(k).getCountry());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getCountry()!=null) 	
		                   	        obj.setCountry(pubreport1.get(k).getCountry());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	        

		                    Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        
		        	        String country = value.getCountry();
		        	        if(!country.equals("undetermined")){
		        	        country=country.replace("_", " ");
		        	        String countryId = CountryMap1.get(country);
				            if(countryId !=null && !countryId.isEmpty())
					        value.setCountryId(countryId);
		        	        country = capitalizeString(country);
		                	value.setCountry(country);
		        	        
		        	        object.add(value); 
		        	        }
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    	 
		        		    		  
		        		    		  
		        		      
		        		      
		        		
		        		         
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }        
		        		         
		        		         
		        		         
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	

		        	
		        	
		        	
		        	
		        	

		        	if(queryfield.equals("devicecombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "device";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		             
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }

		                Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getDevice_type()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getDevice_type());
		                obj.setDevice_type(pubreport1.get(k).getDevice_type());
		                
		                
		                
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		        	   
		               if(pubreport1.get(k).getArticleAuthor()!=null) 	
		          	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getDevice_type()!=null) 	
		                   	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	       

		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		        	        
		        	        
		        	        String deviceType = value.getDevice_type();
		        	        value.setDevice_type(capitalizeString(deviceType));
		        	        object.add(value); 
		        	    
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		      
		        		       
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           }   
		        	    return object;		
		        		
		        		
		        		
		        		
		            }

		        	
		        	
		        	
		        		
		        	
		        	if(queryfield.equals("topiccombined"))
		            {

		        		 pubreport1.clear();
		        	    ExecutorService executorService = Executors.newFixedThreadPool(2000);
		              
		              List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
		          
		              List<String> Query = new ArrayList();
		           
		              queryfield = "tag";
		             
		        		String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        		    
		        			
		        	    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		        			
		        			
		        	    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		        	   
		        	    String query5= "Select "+queryfield+",COUNT(DISTINCT(refcurrentoriginal))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		        	    
		        	    
		        	    Query.add(query1);
		        	    Query.add(query2);
		        	    Query.add(query3);
		        	    Query.add(query5);
		             
		             for(int j=0 ; j < Query.size(); j++ ){
		             lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
		          /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		             lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		              
		             // returns a list of Futures holding their status and results when all complete
		          
		         /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		             lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		             }
		             
		             
		             List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
		        	

		        	    for (int k = 0; k < maps.size(); k++)
		        	    {
		        	    
		        	    	if(maps!=null && maps.get(k)!=null){
		        	        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
		        	        pubreport1.addAll(map);
		        	    	}
		        	
		        }
		        	    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
		        	    
		        	    List<PublisherReport> object = new ArrayList<PublisherReport>();
		        	    
		        	    
		        	    for(int k=0; k< pubreport1.size(); k++)
		        	    {
		                if(aggregatedmap.containsKey(pubreport1.get(k).getArticleTags()))
		                {
		               
		                PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getArticleTags());
		                obj.setArticleTags(pubreport1.get(k).getArticleTags());
		                if(pubreport1.get(k).getCount()!=null)
		                obj.setCount(pubreport1.get(k).getCount());
		                	
		                if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	
		               if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                
		               if(pubreport1.get(k).getPosts()!=null) 	
		                  	obj.setPosts(pubreport1.get(k).getPosts());
		               
		        	   
		               if(pubreport1.get(k).getArticleTags()!=null) 	
		          	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
		          	
		               
		               
		        	    aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
		        	    
		                }
		                else{
		                	       
		                	        PublisherReport obj = new PublisherReport();
		                	     
		                	        if(pubreport1.get(k).getCount()!=null)
		                	        obj.setCount(pubreport1.get(k).getCount());
		                	        	
		                	        if(pubreport1.get(k).getEngagementTime()!=null) 	
		                	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
		                	        	
		                	       if(pubreport1.get(k).getVisitorCount()!=null) 	
		                	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
		                	
		                	       if(pubreport1.get(k).getPosts()!=null) 	
		                	          	obj.setPosts(pubreport1.get(k).getPosts());
		                	       
		                	       
		                	       if(pubreport1.get(k).getArticleTags()!=null) 	
		                   	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
		                   	
		                	       aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
		                
		                
		                }
		           
		              
		        	    }
		        	    
		        	    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
		        	        String key = entry.getKey();
		        	        PublisherReport value = entry.getValue();
		        	      
		        	        
		        Double averageTime = 0.0;
		        	        
		        	        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
		        	        
		        	        
		        	        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        	        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
		        	        
		        	        
		        	        value.setAverageTime(MinutestoSecond(averageTime.toString()));
		        	        
		        	        
		                    Integer pageViewsperPost = 0;
		        	        
		        	        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
		        	        
		        	        
		        	        value.setPageViewsPost(pageViewsperPost.toString());
		        	        
		        	        
		        	        if(value.getArticleTags().toLowerCase().equals("hindibollywood"))	
		               		   value.setArticleTags("Bollywood");
		               	 
		               	    if(value.getArticleTags().toLowerCase().equals("womenlifestyle"))	
		               		   value.setArticleTags("Women's Fashion");
		               	
		               	 if(value.getArticleTags().toLowerCase().equals("hindimusic"))	
		               		 value.setArticleTags("Hindi Music");
		               	 
		               	 if(value.getArticleTags().toLowerCase().equals("healthfitness"))	
		               		 value.setArticleTags("Health & Fitness");
		               	 
		               	 if(value.getArticleTags().toLowerCase().equals("englishhollywood"))	
		               		 value.setArticleTags("Hollywood");
		               	 
		               	 if(value.getArticleTags().toLowerCase().contains("technews"))	
		               		 value.setArticleTags("Technology News");
		               	 
		               	 if(value.getArticleTags().toLowerCase().contains("mcdonald"))	
		               		 value.setArticleTags("Fast Food");
		               	    
		               	    
		               	 if(value.getArticleTags().toLowerCase().contains("international"))	
		               		 value.setArticleTags("International News");
		               	    
		               	 
		               	 
		               	 
		               	 
		               	 if(AggregationModule.tagMap3.get(value.getArticleTags()) != null){
		               	 String tagId = AggregationModule.tagMap3.get(value.getArticleTags());
		            	 value.setTagId(tagId);
		               	
		               	 
		               	 
		               	 }   
		               	   
		               	if(capitalizeFirstLetter(value.getArticleTags())!=null)
		                  	 value.setArticleTags(capitalizeFirstLetter(value.getArticleTags()));
		               	 
		               	 
		               	 
		               	 
		               	 if(!value.getArticleTags().isEmpty())
		               	       object.add(value); 
		        	    
		        	    
		        	    }
		        	    
		         if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		        		    
		                    Collections.sort(object, new Comparator<PublisherReport>() {
		         				
		         				@Override
		         		        public int compare(PublisherReport o1, PublisherReport o2) {
		         					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
		         		        }
		         		    });	
		        		    
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		        		    	

		        	            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		        		    	
		                            Collections.sort(object, new Comparator<PublisherReport>() {
		        	 				
		        	 				@Override
		        	 		        public int compare(PublisherReport o1, PublisherReport o2) {
		        	 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
		        	 		        }
		        	 		    });	
		        		    	
		        		    	
		        		    }
		        		    
		        		    
		        		    
		        		    
		        		    
		        		    executorService.shutdown();
		        		 
		        		    
		        		    
		                    Double total2 = 0.0;
		        Double totalvisits = 0.0;
		        Double totaleT = 0.0;
		        Double totalvisitor = 0.0;
		        Double share1 = 0.0;
		        Double sharevisits = 0.0;
		        Double shareeT = 0.0;
		        Double sharevisitor = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;	 
		        Double scaledsharevisits = 0.0;
		        Double scaledshareeT = 0.0;
		        Double scaledsharevisitor = 0.0;
		        Double maxsharevisits = 0.0;
		        Double maxshareeT = 0.0;
		        Double maxsharevisitor = 0.0;

		        for(int i=0;i<object.size();i++){
		          
		              if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        	  { 
		            	  total2=total2+Double.parseDouble(object.get(i).getCount());

		        	      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
		        		   	    	    {
		        		   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
		         	    	    }
		        	  
		        	  
		        	  
		        	  }
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
		            	 
		            	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
		           }
		              
		              
		              }
		              
		              
		              if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
		            	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
		            
		            	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
		        	    	    {
		        	    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
		           }
		              
		              
		              }  	  
		              totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
		           

		              totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
		            totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
		            
		            
		            if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
		         	    {
		          	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
		        }
		            
		            
		            if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
		         	    {
		          	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
		        }
		            
		            
		            
		            if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
		         	    {
		          	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
		        }
		            
		            //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		            //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		          
		           //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		           // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		          
		          
		        }
		               
		        for(int i=0;i<object.size();i++){
		                     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
		                	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
		                     scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
		                     
		                     }
		                     
		                     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
		                         
		                     }
		                    	 
		                    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
		                    	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
		                    	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
		                    }
		                    	 
		                    	 
		                     sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
		                     shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
		                     sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
		               //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		              
		               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		                   scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
		                   
		                   scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
		                   
		                   scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
		               //  object.get(i).setScaledShare(scaledshare.toString());	             
		                     
		          object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
		          object.get(i).setScaledshareeT(scaledshareeT.toString());
		          object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
		          object.get(i).setShare(share.toString());
		          object.get(i).setSharetotalvisits(sharevisits.toString());
		          object.get(i).setShareeT(shareeT.toString());
		          object.get(i).setSharevisitorCount(sharevisitor.toString());
		        object.get(i).setScaledShare(scaledshare.toString());
		        }
		        	  
		        	  

		        		    		  
		        		    		  
		        		      
		        		       
		        		         for(int i=0;i<object.size();i++){    
		        		        	   
		        		        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
		        				         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
		        				       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
		        				          object.get(i).setCount(numberFormat.format(count)); 
		        				       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
		        				          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
		        		           
		        				          Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
		        		                  object.get(i).setPosts(numberFormat.format(posts));
		        		         }   
		        	    return object;		
		        		
		        		
		            }
		            
		            
		            
		            
		        	
		        	
		        
		        	
		        			            
		            
		            
		              
		    
		    
		    
		    
		    
		    if(queryfield.equals("visitorType")){
		    
		    	
		       pubreport1.clear();
		       List<PublisherReport> pubreport2 = new ArrayList<PublisherReport>();
		       List<PublisherReport> pubreport3 = new ArrayList<PublisherReport>();
		    	

		    	  AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		    	
		    	
				pubreport1=module.countUsersChannelArticleDatewise(startdate, enddate, channel_name, articlename,filter); 
		        
		   
		    
		    
		    	 
				
		       
		 		
		        total = 0.0;
		        share =0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;
		        
		        for(int i=0;i<pubreport1.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport1.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		 if(Double.parseDouble(pubreport1.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport1.get(i).getCount());
	    	    }
	    	    
		      	  
		        }
		                 
		         for(int i=0;i<pubreport1.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport1.get(i).setScaledShare(scaledshare.toString());
		      	  
		      	        	pubreport1.get(i).setShare(share.toString());
		      	  
		        }
		        
		        
		        

           		for(int i=0;i<pubreport1.size();i++){    
    	          	  
			          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
			          pubreport1.get(i).setCount(numberFormat.format(count)); 
			       
	           } 
		        
		        
		        return pubreport1;
		 		
		    }   
		    
		    
		    if(queryfield.equals("engagementTime"))	
	        {
		    	 AggregationModule module =  AggregationModule.getInstance();
			  	    try {
			  			module.setUp();
			  		} catch (Exception e1) {
			  			// TODO Auto-generated catch block
			  			e1.printStackTrace();
			  		}
			 		pubreport=module.EngagementTimeChannelArticle(startdate, enddate, channel_name, articlename);
			        
			 		

              		for(int i=0;i<pubreport.size();i++){    
       	          	  
  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
  			       
  	           } 
			 		
			 		
			 		
			 		return pubreport;
	        
	        }
	        	
	        	
	        if(queryfield.equals("minutesVisitor"))	
	        {
	        	/*  
	        	pubreport.clear();
	        	PublisherReport obj1 = new PublisherReport();
	        	Random random = new Random();	
	            Integer randomNumber = random.nextInt(10) + 1;
	           String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
	            String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj1.setArticleTitle(articleTitle);obj1.setArticle(articlename);
	            obj1.setMinutesperVisitor(randomNumber.toString());
	        	pubreport.add(obj1);
	            return pubreport;
	            */
	        	
	        	
	        	
	        	
	        	   pubreport.clear();
	        	   PublisherReport obj1 = new PublisherReport();
	        	   
	        	   AggregationModule module =  AggregationModule.getInstance();
	         	    
	        	   List<PublisherReport> pubreport1a = new ArrayList();
	        	   List<PublisherReport> pubreport2 = new ArrayList();
	        	   Double minutesVisitor = 0.0;
	         	   
	        	   try {
	         			module.setUp();
	         		} catch (Exception e1) {
	         			// TODO Auto-generated catch block
	         			e1.printStackTrace();
	         		}
	        		pubreport1a=module.EngagementTimeChannelArticle(startdate, enddate, channel_name,articlename);
	        		
	        		 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						{
				    	
	        			 pubreport2=module.counttotalvisitorsChannelArticle(startdate, enddate, channel_name,articlename); 
	        			 minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getTotalvisits()),2);
						}
						
				   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						{
							
							pubreport2 = module.countfingerprintChannelArticle(startdate, enddate, channel_name,articlename);
							minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getReach()),2);
						}	
	        		
				   String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
					
				   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj1.setArticleTitle(articleTitle);obj1.setArticle(articlename);
				   
				   obj1.setMinutesperVisitor(MinutestoSecond(minutesVisitor.toString()));
				   pubreport.add(obj1);
				   return pubreport;	
	        }
		    
		    
		    if (queryfield.equals("totalViews")) {
		        
		   	 AggregationModule module =  AggregationModule.getInstance();
		 	    try {
		 			module.setUp();
		 		} catch (Exception e1) {
		 			// TODO Auto-generated catch block
		 			e1.printStackTrace();
		 		}
				pubreport=module.counttotalvisitorsChannelArticle(startdate, enddate, channel_name, articlename);
		       
				

          		for(int i=0;i<pubreport.size();i++){    
   	          	  
          			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
          			pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
			       
	           } 
				
				return pubreport;
		   }
		    
		    
		    
		    if (queryfield.equals("totalViewsDatewise")) {
		        
			   	 AggregationModule module =  AggregationModule.getInstance();
			 	    try {
			 			module.setUp();
			 		} catch (Exception e1) {
			 			// TODO Auto-generated catch block
			 			e1.printStackTrace();
			 		}
					pubreport=module.counttotalvisitorsChannelArticleDatewise(startdate, enddate, channel_name, articlename);
			        
					for(int i=0;i<pubreport.size();i++){    
		   	          	  
						 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
						 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
				       
		           }
					
					
					return pubreport;
		    }
			
		    
		    if (queryfield.equals("totalViewsHourwise")) {
		        
			   	 AggregationModule module =  AggregationModule.getInstance();
			 	    try {
			 			module.setUp();
			 		} catch (Exception e1) {
			 			// TODO Auto-generated catch block
			 			e1.printStackTrace();
			 		}
					pubreport=module.counttotalvisitorsChannelArticleHourwise(startdate, enddate, channel_name, articlename);
			       
					for(int i=0;i<pubreport.size();i++){    
		   	          	  
						 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
						 pubreport.get(i).setTotalvisits(numberFormat.format(count));  
				       
		           }
					
					
					
					
					return pubreport;
		    }
		    
		    
			           
		    if (queryfield.equals("uniqueVisitors")) {
		        
		      	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		   		pubreport=module.countfingerprintChannelArticle(startdate, enddate, channel_name, articlename);
		        
		   		
		   		for(int i=0;i<pubreport.size();i++){    
	   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
			          pubreport.get(i).setReach(numberFormat.format(count)); 
			       
	           }
		   		
		   		
		   		
		   		
		   		
		   		
		   		return pubreport; 
		    } 
		    		    
		           
		    if (queryfield.equals("uniqueVisitorsDatewise")) {
		        
		      	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		   		pubreport=module.countfingerprintChannelArticleDatewise(startdate, enddate, channel_name, articlename);
		       
		   		for(int i=0;i<pubreport.size();i++){    
	   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
			          pubreport.get(i).setReach(numberFormat.format(count)); 
			       
	           }
		   		
		   		
		   		return pubreport;  
		    }
		    
		   
		    if (queryfield.equals("uniqueVisitorsHourwise")) {
		        
		      	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		   		pubreport=module.countfingerprintChannelArticleHourwise(startdate, enddate, channel_name, articlename);
		        
		   		for(int i=0;i<pubreport.size();i++){    
	   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
			          pubreport.get(i).setReach(numberFormat.format(count)); 
			       
	           }
		   		
		   		
		   		return pubreport;  
		    }
		    
		    
	           if(queryfield.equals("engagementTimeDatewise"))	
	           {
	        	   
	        	   
	        	   AggregationModule module =  AggregationModule.getInstance();
	       	    try {
	       			module.setUp();
	       		} catch (Exception e1) {
	       			// TODO Auto-generated catch block
	       			e1.printStackTrace();
	       		}
	      		pubreport=module.EngagementTimeChannelArticleDatewise(startdate, enddate, channel_name, articlename);
	      		

               for(int i=0;i<pubreport.size();i++){    
   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
			       
	           }
	      		
	      		
	      		
	      		return pubreport;
	           
	           }
	           
	           if(queryfield.equals("engagementTimeHourwise"))	
	           {
	        	   
	        	   
	        	   AggregationModule module =  AggregationModule.getInstance();
	       	    try {
	       			module.setUp();
	       		} catch (Exception e1) {
	       			// TODO Auto-generated catch block
	       			e1.printStackTrace();
	       		}
	      		pubreport=module.EngagementTimeChannelArticleHourwise(startdate, enddate, channel_name, articlename);
	      		

                   for(int i=0;i<pubreport.size();i++){    
   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
			       
	           }
	      		
	      		
	      		
	      		return pubreport;
	           
	           }
	           
	           
	           
		    
		    if (queryfield.equals("clickedArticles")) {
		        
		      	 AggregationModule module =  AggregationModule.getInstance();
		    	    try {
		    			module.setUp();
		    		} catch (Exception e1) {
		    			// TODO Auto-generated catch block
		    			e1.printStackTrace();
		    		}
		   		pubreport=module.getChannelArticleReferredPostsListInternal(startdate, enddate, channel_name, articlename, filter, filtertype);
		       
		   	    total = 0.0;
		        share = 0.0;
		        maxTotal = 0.0; 
		        scaledshare = 0.0;
		        
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	    	    
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	        	 

		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		   		
		         for(int i=0;i<pubreport.size();i++){    
	   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           }
 
		         
		         
		   		return pubreport;  
		      }
		    
		    
		    
/*
	           if (queryfield.equals("reforiginal")) {

	        	   String data0= null;
	               String data1= null;   
	               String data2 = null;
	        	   pubreport.clear();
	        	   
				for (int i = 0; i < 5; i++) {
					PublisherReport obj = new PublisherReport();

					if (i == 0) {
						data0 = "http://m.facebook.com";
						data1 = "107";
					    data2 = "Social";
					   }

					if (i == 1) {
						data0 = "http://www.facebook.com";
						data1 = "51";
					    data2 = "Social";
					}

					if (i == 2) {
						data0 = "http://l.facebook.com";
						data1 = "17";
					    data2 = "Social";
					}

					if (i == 3) {
						data0 = "http://www.google.co.pk";
						data1 = "12";
					    data2 = "Search";
					}

					if (i == 4) {
						data0 = "http://www.google.co.in";
						data1 = "101";
					    data2 = "Search";
					}

					obj.setReferrerSource(data0);
					obj.setReferrerType(data2);
					
				//	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					obj.setCount(data1);
				//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				//	obj.setEngagementTime(data1);
				//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				//	obj.setVisitorCount(data1);
					
					String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					pubreport.add(obj);

				}

			}
	    */
	           /*
	           
	           if (queryfield.equals("device")) {

	        	   String data0= null;
	               String data1= null;   
	        	   pubreport.clear();
	        	   
	        	   for (int i = 0; i < 3; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="Mobile";
				          data1 = "202.0";
				          }
				          

				          if(i == 1){
				          data0="Tablet";
				          data1 = "19.0";
				          }
				          
				          
				          if(i == 2){
					          data0="Desktop";
					          data1 = "137.0";
					      }
					    
				        
				          obj.setDevice_type(data0);
				          obj.setCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				   }
	    
	           }
	    
	           if (queryfield.equals("incomelevel")) {

	        	   String data0= null;
	               String data1= null;   
	        	   pubreport.clear();
	           
	           for (int i = 0; i < 3; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="Medium";
			          data1 = "79.0";
			          }
			          

			          if(i == 1){
			          data0="High";
			          data1 = "55.0";
			          }
			          
			          
			          if(i == 2){
				          data0="Low";
				          data1 = "15.0";
				      }
				    
			        
			          obj.setIncomelevel(data0);
			          obj.setCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
	           }
	          */
	           /*
	           
	           if (queryfield.equals("referrerType")) {

	        	   String data0= null;
	               String data1= null;   
	        	   pubreport.clear();
	           
	           for (int i = 0; i < 3; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="Social";
			          data1 = "95.0";
			          }
			          

			          if(i == 1){
			          data0="Search";
			          data1 = "125.0";
			          }
			          
			          
			          if(i == 2){
				          data0="Direct";
				          data1 = "67.0";
				      }
				    
			        
			          obj.setReferrerSource(data0);
			                if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							obj.setEngagementTime(data1);
							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
	           }       
		    
		    */
	           if(queryfield.equals("sourceUrl")){
	           	
	       		
	           	List<PublisherReport> pubreporta1 = NestedJSON5.getNestedReffererJSON(pubreport,filter);
	           		return pubreporta1;  		
	           		
	           	}
	           
	           
		    
	           if (queryfield.equals("trafficType")) {

	        	   String data0= null;
	               String data1= null;   
	        	   pubreport.clear();
	           
	           for (int i = 0; i < 3; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="Site";
			          data1 = "495";
			          }
			          

			          if(i == 1){
			          data0="FB Instant Article";
			          data1 = "125";
			          }
			          
			          
			          if(i == 2){
				          data0="Mobile App";
				          data1 = "367";
				      }
				    
			        
			          obj.setTrafficType(data0);
			             //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(data1);
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
	          
	           total = 0.0;
	           share =0.0;
	           maxTotal = 0.0; 
	           scaledshare = 0.0;
	           
	           for(int i=0;i<pubreport.size();i++){
	         	  
	         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	              
	                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	               
	                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	         		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	    	    
	         	  
	           }
	                    
	            for(int i=0;i<pubreport.size();i++){
	         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	         	        
	         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	         	      
	         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	          	    	    
	         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	         	        	 
	         	        	pubreport.get(i).setScaledShare(scaledshare.toString());
	         	  pubreport.get(i).setShare(share.toString());
	         	  
	           }
	           
	           
	           
	           
	           }       
		    
		     
	           if (queryfield.equals("siteExperience")) {

	        	   String data0= null;
	               String data1= null;   
	        	   pubreport.clear();
	           
	           for (int i = 0; i < 2; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			          if(i == 0){
			          data0="Standard";
			          data1 = "1595";
			          }
			          

			          if(i == 1){
			          data0="AMP";
			          data1 = "263";
			          }
			         			    
			        
			          obj.setSiteExperience(data0);
			       //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(data1);
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
	       
	           total = 0.0;
	           share =0.0;
	           maxTotal = 0.0; 
	           scaledshare = 0.0;
	           
	           for(int i=0;i<pubreport.size();i++){
	         	  
	         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	              
	                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	               
	                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	         		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	         	  
	           }
	                    
	            for(int i=0;i<pubreport.size();i++){
	         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	         	        
	         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	         	      
	         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	         	        	 
	         	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
	         	 
	         	        	pubreport.get(i).setShare(share.toString());
	         	  
	           }
	           
	           
	           
	           
	           
	           }       
		    
		    
	           if (queryfield.equals("retention")) {

	        	   String data0= null;
	               String data1= null;   
	        	   pubreport.clear();
	           
	           for (int i = 0; i < 4; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			        
			          if(i == 0){
			          data0="Other Post";
			          data1 = "85";
			          }
			          

			          if(i == 1){
			          data0="Section Page";
			          data1 = "155";
			          }
			          
			          
			          if(i == 2){
				          data0="Home Page";
				          data1 = "567";
				      }
			        
			          
			          if(i == 3){
				          data0="Exit";
				          data1 = "67";
				      }
			          
			          
			          
			          obj.setRetention(data0);
			       //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(data1);
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(data1);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
	           
	           total = 0.0;
	           share =0.0;
	           maxTotal = 0.0; 
	           scaledshare = 0.0;
	           
	           for(int i=0;i<pubreport.size();i++){
	         	  
	         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	              
	                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	               
	                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	        	      if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	         	  
	           }
	                    
	            for(int i=0;i<pubreport.size();i++){
	         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	         	        
	         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	         	      
	         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	         	        	 
	         	        	pubreport.get(i).setScaledShare(scaledshare.toString());	  
	         	  pubreport.get(i).setShare(share.toString());
	         	  
	           }
	           
	           
	           
	           }       
	           
	           if (queryfield.equals("pageVersion")) {

	        	   String data0= null;
	               String data1= null;   
	        	   String data2 = null;
	        	   String data3 = null;
	               pubreport.clear();
	           
	           for (int i = 0; i < 4; i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			       // String[] data1 = ((String)lines1.get(i)).split(",");
			       
			          //if(data1[0].equals()) 
			         
			        
			          if(i == 0){
			          data0="Main Page/2345";
			          data1 = "385";
			          data2="1347";
			          data3="127";
			          }
			          

			          if(i == 1){
			          data0="/2346";
			          data1 = "165";
			          data2="457";
			          data3="68";
			          }
			          
			          
			          if(i == 2){
				          data0="/2347";
				          data1 = "167";
				          data2="345";
			              data3="51";
			          } 
			        
			          
			          if(i == 3){
				          data0="/2348";
				          data1 = "87";
				          data2="245";
			              data3="28";
			          }
			          
			          
			          
			          obj.setArticleVersion(data0);
			        //  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data1);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							obj.setEngagementTime(data2);
							//if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							obj.setVisitorCount(data3);
			          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			          pubreport.add(obj);
			        
			   //   }
			    //  System.out.println(headers1);
			    //  System.out.println(lines1);
			      }
	         
	           total = 0.0;
	           share =0.0;
	           maxTotal = 0.0; 
	           scaledshare = 0.0;
	           
	           for(int i=0;i<pubreport.size();i++){
	         	  
	         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
	              
	                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	               
	                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	         		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	         	  
	           }
	                    
	            for(int i=0;i<pubreport.size();i++){
	         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	         	        
	         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	         	      
	         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	         	        	 
	         	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	  
	         	  pubreport.get(i).setShare(share.toString());
	         	  
	           }
	           
	           
	           
	           
	           }       
	           
	           
	           
               if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
   			    
Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
     public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
     }
 });	

}

if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
	

Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
     public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
     }
 });	
	
	
}

if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
	
Collections.sort(pubreport, new Comparator<PublisherReport>() {
		
		@Override
     public int compare(PublisherReport o1, PublisherReport o2) {
			return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
     }
 });	
	
}
	           
	          
	           if(queryfield.equals("gender"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
				        }
				    });	
	          
	           }        
	           
	           
	           
	           if(queryfield.equals("agegroup"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getAge().compareTo(o2.getAge());
				        }
				    });	
	          
	           }     
	           
	           if(queryfield.equals("incomelevel"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
				        }
				    });	
	          
	           }                
		           
	           for(int i=0;i<pubreport.size();i++){    
 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           }            
	           
		    return pubreport;
		  }
		  
  
  public List<PublisherReport> getQueryFieldChannelArticleFilter(String queryfield,String startdate, String enddate, String channel_name,String articlename, Map<String,String>filter, String filterMetric, String filtertype)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
	  
	  
	  
	  if (queryfield.equals("Author")) {
          queryfield =  "authorName";
	} 

		  
		if (queryfield.equals("reforiginal")) {
          queryfield =  "sourceUrl";
	} 
		 Map<String,String> TagAggregation = new FastMap<String,String>();   
		    
	        int size = filter.size();
	        String queryfilterbuilder = "";
	        String formattedString = "";
	        int j =0;
	        for (Map.Entry<String, String> entry : filter.entrySet())
	        {
	        	if (j==0){
	                formattedString = addCommaString(entry.getValue());
	        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
	        	
	        	}
	            else{
	            formattedString = addCommaString(entry.getValue());	
	            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
	       
	            }
	            j++;
	         
	        }
	  
	        
	        if(queryfield.equals("visitorType")){
			    
		    	
			       
			       List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
			       List<PublisherReport> pubreport3 = new ArrayList<PublisherReport>();
			    	

			    	  AggregationModule module =  AggregationModule.getInstance();
			    	    try {
			    			module.setUp();
			    		} catch (Exception e1) {
			    			// TODO Auto-generated catch block
			    			e1.printStackTrace();
			    		}
			    	
			    	
					pubreport1=module.countUsersChannelArticleDatewiseFilter(startdate, enddate, channel_name, articlename, filterMetric, queryfilterbuilder);
			   
			    
			    
			    	 
					
			       
			 		
			       Double total = 0.0;
			       Double share =0.0;
			       Double maxTotal = 0.0; 
			       Double scaledshare = 0.0;
			        
			        for(int i=0;i<pubreport1.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  total=total+Double.parseDouble(pubreport1.get(i).getCount());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      		 if(Double.parseDouble(pubreport1.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport1.get(i).getCount());
		    	    }
		    	    
			      	  
			        }
			                 
			         for(int i=0;i<pubreport1.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/maxTotal)*100,2);
			      	        	 
			      	        	pubreport1.get(i).setScaledShare(scaledshare.toString());
			      	  
			      	        	pubreport1.get(i).setShare(share.toString());
			      	  
			        }
			        
			        
			        

	           		for(int i=0;i<pubreport1.size();i++){    
	    	          	  
				          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
				          pubreport1.get(i).setCount(numberFormat.format(count)); 
				       
		           } 
			        
			        
			        return pubreport1;
			 		
			    }   
	        
	        
	        
	        
	        
	        String query = "";
	        
	        if(filterMetric == null || filterMetric.isEmpty() ||  filterMetric.equals("pageviews"))
	         query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
		    
	        if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("engagementTime"))
		     query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
	        
	        if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("visitorCount"))
		     query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+"";
	        
	        
	        
	        System.out.println(query);
	        CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    
		 //   if(filterMetric != null && !filterMetric.isEmpty()  && filterMetric.equals("visitorCount") )
		       // lines = processList(lines);
		    
		    
		    
		    //System.out.println(headers);
		    //System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        
		    	try{
		    	  
		    	PublisherReport obj = new PublisherReport();
		    	 List<PublisherReport> obj1 = new ArrayList<PublisherReport>();
		        String[] data = ((String)lines.get(i)).split(",");
		     //   String demographicproperties = demographicmap.get(data[0]);
		            if(queryfield.equals("gender")){
		        	
		            	String genderId = GenderMap1.get(data[0]);
		        		obj.setGenderId(genderId);
		            	
		            	obj.setGender(capitalizeString(data[0]));
		            }
		            if(queryfield.equals("device")){
		        	
		            	
		            	String deviceId = deviceMap1.get(data[0]);
		        		obj.setDeviceId(deviceId);
		            	
		            	obj.setDevice_type(capitalizeString(data[0]));
		            }
		        	if(queryfield.equals("city")){
		        		try{
		        		String locationproperties = citycodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-"," ");
				        data[0] = capitalizeString(data[0]);
				        obj.setCity(capitalizeString(data[0]));
				        System.out.println(data[0]);
				        obj.setLocationcode(locationproperties);
		        		}
		        		catch(Exception e){
		        			continue;
		        		}
		        		
		        		}
		        	
		        	if(queryfield.equals("audience_segment"))
		        	{
		        		String audienceSegment = audienceSegmentMap.get(data[0]);
		        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
		        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
		        		obj.setAudience_segment(audienceSegment);
		        		obj.setAudienceSegmentCode(audienceSegmentCode);
		        		}
		        		else
		        	    obj.setAudience_segment(data[0]);
		        		
		        	}
		        	
		        	if(queryfield.equals("referrerType")){
				         
		        		String referrerTypeId = referrerTypeMap1.get(data[0]);
		        		obj.setReferrerTypeId(referrerTypeId);
		        		obj.setReferrerSource(data[0]);	            	
		        	}
		        	
		        		
		        	 if(queryfield.equals("tag")){
			        		
			        		
		        		 if(data[0].toLowerCase().equals("hindibollywood"))	
			        		 data[0]="Bollywood";
			        	 
			        	 if(data[0].toLowerCase().equals("womenlifestyle"))	
			        		 data[0]="Women's Fashion";
			        	        
			        	 
			        	 if(data[0].toLowerCase().equals("hindimusic"))	
			        		 data[0]="Hindi Music";
			        	 
			        	 if(data[0].toLowerCase().equals("healthfitness"))	
			        		 data[0]="Health & Fitness";
			        	 
			        	 if(data[0].toLowerCase().equals("englishhollywood"))	
			        		 data[0]="Hollywood";
			        	 
			        	 if(data[0].toLowerCase().contains("technews"))	
			        		 data[0]="Technology News";
			        	 
			        	 if(data[0].toLowerCase().contains("mcdonald"))	
			        		 data[0]="Fast Food";
			        	 
			        	 if(data[0].toLowerCase().contains("international"))	
			        		 data[0]="International News";
			        	 
			        	
			        	 if(data.length > 2){
			        	 	 
			        		 for(int q=0; q<data.length-1; q++){
			        		      PublisherReport obj2 = new PublisherReport();
			        			 obj2.setArticleTags(data[q]);
			        			 if(AggregationModule.tagMap3.get(data[q])!=null){
			                    	 String tagId = AggregationModule.tagMap3.get(data[q]);
			        	        	 obj2.setTagId(tagId);
			        			 
			        			 }
			        		 
			        		     obj1.add(obj2);
			        		 }
			        	 }
			        	 else{
			        	 obj.setArticleTags(data[0]);
			        	
		            	 if(AggregationModule.tagMap3.get(data[0])!=null){
		            	 String tagId = AggregationModule.tagMap3.get(data[0]);
			        	 obj.setTagId(tagId);
		            	 }
		              
		             }
			            
			            
			            }
		        	
		        	
		        	
		        	if(queryfield.equals("sourceUrl")){
			         
		        		String urlId = UrlMap1.get(data[0]);
		        		obj.setUrlId(urlId);
		        		
		        		obj.setReferrerMasterDomain(data[0]);
		        	}
		        	if(queryfield.equals("agegroup"))
		        	{
		        		String ageId = AgeMap1.get(data[0]);
		        		obj.setAgeId(ageId);
		        		 
		        		 data[0]=data[0].replace("_","-");
		        		 data[0]=data[0]+ " Years";
		        		 if(data[0].contains("medium")==false)
		        		 obj.setAge(data[0]);
		        	}
		            	
		            	
		        	if(queryfield.equals("incomelevel")){
			                 
		        		String incomelevelId = IncomeMap1.get(data[0]);
		        		obj.setIncomeId(incomelevelId);
		        		
		        		obj.setIncomelevel(capitalizeString(data[0]));
		        	}
		        	
		        	if(queryfield.equals("system_os")){
		        		String osproperties = oscodeMap.get(data[0]);
				        data[0]=data[0].replace("_"," ").replace("-", " ");
				        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        String [] osParts = oscodeMap1.get(osproperties).split(",");
				        obj.setOs(osParts[0]);
				        obj.setOSversion(osParts[1]);
				        obj.setOscode(osproperties);
		        	}
		         	
		        	if(queryfield.equals("modelName")){
		        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
			        	
				        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				        System.out.println(mobiledeviceproperties[2]);
				        obj.setDevicecode(mobiledeviceproperties[0]);
				        System.out.println(mobiledeviceproperties[0]);
		        
		        	}
		        	if(queryfield.equals("brandName")){
		        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
		        		obj.setBrandname(data[0]);
		        	}
		        
		        	if(queryfield.equals("refcurrentoriginal"))
		  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
		        	
		        	
		        	
		        	
		        	
		        	Integer max = 0;	
		        Random random = new Random();	
		        Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
		        if(queryfield.equals("tag")==true)
		            max = (int)Double.parseDouble(data[data.length-1]);
		            else
		            max = (int)Double.parseDouble(data[1]);
		        Integer randomNumber1 = random.nextInt(max) + 1;
		            
		            if(queryfield.equals("audience_segment"))	
		            {
		            obj.setCount(data[1]); 	
		            obj.setExternalWorldCount(randomNumber.toString());	
		            obj.setVisitorCount(randomNumber1.toString());
		            obj.setAverageTime("0.0");	
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
		            
			        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			        pubreport.add(obj);
		            
		            }
		           
		            else if(queryfield.equals("agegroup")==true) {
		            	
		            	if(data[0].contains("medium")==false){
		            	//	if(filterMetric == null || filterMetric.isEmpty() ||  filterMetric.equals("pageviews"))
				            	obj.setCount(data[1]);
				            
				             //   if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("engagementTime") )
				             //   obj.setEngagementTime(data[1]);
				           
				             //   if(filterMetric != null && !filterMetric.isEmpty()  && filterMetric.equals("visitorCount") )
				             //   obj.setVisitorCount(data[1]);
		            		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					            
					            
						        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
						        pubreport.add(obj);
		            	}
		            }
		            	
		            else if(queryfield.equals("tag")==true) {
		            	
		            	if(!data[0].isEmpty())
		            	{
		            		for(int q1=0; q1<obj1.size(); q1++){
		            		 obj1.get(q1).setCount(data[data.length-1]);
		            		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.get(q1).setChannelName(channel_name1);
		            		}
		                     
		            		
		            		
		                     pubreport.addAll(obj1);
		            		
		            	}
		            
		            
		            
		            }
		            
		            
		            
		            
		            else{
		            //	if(filterMetric == null || filterMetric.isEmpty() ||  filterMetric.equals("pageviews"))
			            	obj.setCount(data[1]);
			            
			             //   if(filterMetric != null && !filterMetric.isEmpty() && filterMetric.equals("engagementTime") )
			              //  obj.setEngagementTime(data[1]);
			           
			              //  if(filterMetric != null && !filterMetric.isEmpty()  && filterMetric.equals("visitorCount") )
			              //  obj.setVisitorCount(data[1]);
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            
		            
			        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			        pubreport.add(obj);
		            
		            
		            }
		           
		    	}
		    	catch(Exception e)
		    	{
		    		continue;
		    	}
		    	
		    	}
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    
		    
if(queryfield.equals("tag")){
		    	
		    	Double valuev1 = 0.0;
		    	
		    	for(int i=0; i<pubreport.size(); i++){
		    		
		    		if(TagAggregation.containsKey(pubreport.get(i).getArticleTags())==false){
			        	
			        	
			        //	valuev1 = TagAggregation.get(pubreport.get(i).getArticleTags());
			        	TagAggregation.put(pubreport.get(i).getArticleTags(),pubreport.get(i).getCount());
			        	
			        	}
			        	
			        
			        else{
			        	
			        	valuev1 = Double.parseDouble(TagAggregation.get(pubreport.get(i).getArticleTags()));
			        	TagAggregation.put(pubreport.get(i).getArticleTags(),new Double(valuev1+(Double.parseDouble(pubreport.get(i).getCount()))).toString());
			        	pubreport.get(i).setCount(new Double(valuev1+(Double.parseDouble(pubreport.get(i).getCount()))).toString());
			        	
				        }	
			        }
		    
		    	
		    	    pubreport.clear();
		    
		    	 for (Map.Entry<String, String> entry : TagAggregation.entrySet())
				    {
				        System.out.println(entry.getKey() + "," + entry.getValue());
				        PublisherReport obj5 = new PublisherReport();
				        obj5.setArticleTags(entry.getKey());
				        obj5.setCount(entry.getValue());
				        if(AggregationModule.tagMap3.get(entry.getKey())!=null){
			            	 String tagId = AggregationModule.tagMap3.get(entry.getKey());
				        	 obj5.setTagId(tagId);
			            	 }
				        pubreport.add(obj5);
				    }
		    	
		    	
		    	
		    	
		    	}
		    
		    
		    
		    
		     Double  total = 0.0;
		     Double  share =0.0;
		     Double maxTotal = 0.0; 
		     Double scaledshare = 0.0;
		     	                  
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
	   	    	    {
	   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	 	    }
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	 
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
		    
	         if(queryfield.equals("gender"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
				        }
				    });	
	          
	           }        
	           
	           
	           
	           if(queryfield.equals("agegroup"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getAge().compareTo(o2.getAge());
				        }
				    });	
	          
	           }     
	           
	           if(queryfield.equals("incomelevel"))
	           {   
	        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
				        }
				    });	
	          
	           }                
		    
	           
	           
			    if(queryfield.equals("engagementTime"))	
		        {
			    	 AggregationModule module =  AggregationModule.getInstance();
				  	    try {
				  			module.setUp();
				  		} catch (Exception e1) {
				  			// TODO Auto-generated catch block
				  			e1.printStackTrace();
				  		}
				 		pubreport=module.EngagementTimeChannelArticlefilter(startdate, enddate, channel_name, articlename, queryfilterbuilder);
				        
				 		

	              		for(int i=0;i<pubreport.size();i++){    
	       	          	  
	  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
	  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
	  			       
	  	           } 
				 		
				 		
				 		
				 		return pubreport;
		        
		        }
		        	
			    if (queryfield.equals("trafficType")) {

		        	   String data0= null;
		               String data1= null;   
		        	   pubreport.clear();
		           
		           for (int i = 0; i < 3; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				       // String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="Site";
				          data1 = "405";
				          }
				          

				          if(i == 1){
				          data0="FB Instant Article";
				          data1 = "125";
				          }
				          
				          
				          if(i == 2){
					          data0="Mobile App";
					          data1 = "367";
					      }
					    
				        
				          obj.setTrafficType(data0);
				             //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(data1);
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(data1);
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				      }
		          
		           total = 0.0;
		           share =0.0;
		           maxTotal = 0.0; 
		           scaledshare = 0.0;
		           
		           for(int i=0;i<pubreport.size();i++){
		         	  
		         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		              
		                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		               
		                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		         		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		    	    }
		    	    
		         	  
		           }
		                    
		            for(int i=0;i<pubreport.size();i++){
		         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		         	        
		         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		         	      
		         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		          	    	    
		         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		         	        	 
		         	        	pubreport.get(i).setScaledShare(scaledshare.toString());
		         	  pubreport.get(i).setShare(share.toString());
		         	  
		           }
		           
		           
		           
		           
		           }       
			    
			     
		           if (queryfield.equals("siteExperience")) {

		        	   String data0= null;
		               String data1= null;   
		        	   pubreport.clear();
		           
		           for (int i = 0; i < 2; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				       // String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="Standard";
				          data1 = "1095";
				          }
				          

				          if(i == 1){
				          data0="AMP";
				          data1 = "263";
				          }
				         			    
				        
				          obj.setSiteExperience(data0);
				       //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(data1);
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(data1);
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				      }
		       
		           total = 0.0;
		           share =0.0;
		           maxTotal = 0.0; 
		           scaledshare = 0.0;
		           
		           for(int i=0;i<pubreport.size();i++){
		         	  
		         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		              
		                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		               
		                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		         		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		    	    }
		         	  
		           }
		                    
		            for(int i=0;i<pubreport.size();i++){
		         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		         	        
		         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		         	      
		         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		         	        	 
		         	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
		         	 
		         	        	pubreport.get(i).setShare(share.toString());
		         	  
		           }
		           
		           
		           
		           
		           
		           }       
			    
			    
		           if (queryfield.equals("retention")) {

		        	   String data0= null;
		               String data1= null;   
		        	   pubreport.clear();
		           
		           for (int i = 0; i < 4; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				       // String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				        
				          if(i == 0){
				          data0="Other Post";
				          data1 = "85";
				          }
				          

				          if(i == 1){
				          data0="Section Page";
				          data1 = "105";
				          }
				          
				          
				          if(i == 2){
					          data0="Home Page";
					          data1 = "517";
					      }
				        
				          
				          if(i == 3){
					          data0="Exit";
					          data1 = "67";
					      }
				          
				          
				          
				          obj.setRetention(data0);
				       //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(data1);
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(data1);
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				      }
		           
		           total = 0.0;
		           share =0.0;
		           maxTotal = 0.0; 
		           scaledshare = 0.0;
		           
		           for(int i=0;i<pubreport.size();i++){
		         	  
		         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		              
		                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		               
		                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		        	      if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		    	    }
		         	  
		           }
		                    
		            for(int i=0;i<pubreport.size();i++){
		         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		         	        
		         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		         	      
		         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		         	        	 
		         	        	pubreport.get(i).setScaledShare(scaledshare.toString());	  
		         	  pubreport.get(i).setShare(share.toString());
		         	  
		           }
		           
		           
		           
		           }       
		           
		           if (queryfield.equals("pageVersion")) {

		        	   String data0= null;
		               String data1= null;   
		        	   String data2 = null;
		        	   String data3 = null;
		               pubreport.clear();
		           
		           for (int i = 0; i < 4; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				       // String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				        
				          if(i == 0){
				          data0="Main Page/2345";
				          data1 = "385";
				          data2="1247";
				          data3="127";
				          }
				          

				          if(i == 1){
				          data0="/2346";
				          data1 = "165";
				          data2="407";
				          data3="68";
				          }
				          
				          
				          if(i == 2){
					          data0="/2347";
					          data1 = "167";
					          data2="305";
				              data3="51";
				          } 
				        
				          
				          if(i == 3){
					          data0="/2348";
					          data1 = "87";
					          data2="205";
				              data3="28";
				          }
				          
				          
				          
				          obj.setArticleVersion(data0);
				        //  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(data1);
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setEngagementTime(data2);
								//if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setVisitorCount(data3);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				      }
		         
		           total = 0.0;
		           share =0.0;
		           maxTotal = 0.0; 
		           scaledshare = 0.0;
		           
		           for(int i=0;i<pubreport.size();i++){
		         	  
		         	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         		  total=total+Double.parseDouble(pubreport.get(i).getCount());
		              
		                 //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		                 //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		               
		                //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		                // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		         		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		    	    }
		         	  
		           }
		                    
		            for(int i=0;i<pubreport.size();i++){
		         	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		         	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		         	        
		         	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		         	      
		         	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		         	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		         	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		         	        	 
		         	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	  
		         	  pubreport.get(i).setShare(share.toString());
		         	  
		           }
		           
		           
		           
		           
		           }       
		           
			    
		        	
			    if (queryfield.equals("cityOthers")) {
			        
				  	  AggregationModule module =  AggregationModule.getInstance();
				  	    try {
				  			module.setUp();
				  		} catch (Exception e1) {
				  			// TODO Auto-generated catch block
				  			e1.printStackTrace();
				  		}
						pubreport=module.countCityChannelArticlefilter(startdate, enddate, channel_name,articlename,filterMetric,queryfilterbuilder);
						  total = 0.0;
					        share =0.0;
					        maxTotal = 0.0; 
					        scaledshare = 0.0;
					        
					        for(int i=0;i<pubreport.size();i++){
					      	  
					      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
					           
					              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					            
					             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					      	  
					      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
				   	    	    {
				   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		 	    	    }
					        }
					                 
					         for(int i=0;i<pubreport.size();i++){
					      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
					      	        
					      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					      	      
					      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
					      	        	 
					      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	        	 

					      	  pubreport.get(i).setShare(share.toString());
					      	  
					        }
						
					         for(int i=0;i<pubreport.size();i++){    
			  	              	  
			  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
			  	      	       
			  	           } 
						
						return pubreport;
				  }
			    
				 if (queryfield.equals("stateOthers")) {
				        
				  	  AggregationModule module =  AggregationModule.getInstance();
				  	    try {
				  			module.setUp();
				  		} catch (Exception e1) {
				  			// TODO Auto-generated catch block
				  			e1.printStackTrace();
				  		}
						pubreport=module.countStateChannelArticlefilter(startdate, enddate, channel_name, articlename, filterMetric,queryfilterbuilder);
					
						  total = 0.0;
					        share =0.0;
					        maxTotal = 0.0; 
					        scaledshare = 0.0;
					        
					        
					        for(int i=0;i<pubreport.size();i++){
					      	  
					      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
					           
					              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					            
					             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
					   	    	    {
					   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
			 	    	    }
			 	    	    
					      	  
					        }
					                 
					         for(int i=0;i<pubreport.size();i++){
					      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
					      	        
					      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					      	      
					      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					      	    	    
					      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
					      	        	 
					      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
					      	  pubreport.get(i).setShare(share.toString());
					      	  
					        }
						
						
					         for(int i=0;i<pubreport.size();i++){    
			  	              	  
			  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
			  	      	       
			  	           } 
						
						
						return pubreport;
				  }
			    
				 if (queryfield.equals("countryOthers")) {
				        
				  	  AggregationModule module =  AggregationModule.getInstance();
				  	    try {
				  			module.setUp();
				  		} catch (Exception e1) {
				  			// TODO Auto-generated catch block
				  			e1.printStackTrace();
				  		}
						pubreport=module.countCountryChannelArticlefilter(startdate, enddate, channel_name, articlename, filterMetric,queryfilterbuilder);
					
						  total = 0.0;
					        share =0.0;
					        maxTotal = 0.0; 
					        scaledshare = 0.0;
					        
					        for(int i=0;i<pubreport.size();i++){
					      	  
					      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
					           
					              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					            
					             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					      		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
					   	    	    {
					   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
			 	    	    }
					      	  
					        }
					                 
					         for(int i=0;i<pubreport.size();i++){
					      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
					      	        
					      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					      	      
					      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
					      	        	 
					      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
					      	  pubreport.get(i).setShare(share.toString());
					      	  
					        }
						
						
					              
					           for(int i=0;i<pubreport.size();i++){    
				  	              	  
				  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
				  	      	       
				  	           } 
					           
						
						return pubreport;
				  }
			    
				 
				 
				  if(queryfield.equals("visitorType")){
			  			
			  	        List<PublisherReport> pubreport1a  = new ArrayList<PublisherReport>();
			  	        List<PublisherReport> pubreport2  = new ArrayList<PublisherReport>();
			  	        List<PublisherReport> pubreport3  = new ArrayList<PublisherReport>();
			  	        
			  		   
			  	    	AggregationModule module =  AggregationModule.getInstance();
			  	    	    try {
			  	    			module.setUp();
			  	    		} catch (Exception e1) {
			  	    			// TODO Auto-generated catch block
			  	    			e1.printStackTrace();
			  	    		}
			  			
			  	    	pubreport1a=module.countNewUsersChannelArticleDatewiseFilter(startdate, enddate, channel_name,articlename, filterMetric,queryfilterbuilder); 
			  			
			  	    
			  			pubreport2=module.countReturningUsersChannelArticleDatewiseFilter(startdate, enddate, channel_name,articlename, filterMetric,queryfilterbuilder); 
			  			
			  	   
			  	 		pubreport3=module.countLoyalUsersChannelArticleDatewiseFilter(startdate, enddate, channel_name, articlename, filterMetric,queryfilterbuilder);
			  	 		
			  	  
			  	        pubreport1a.addAll(pubreport2);
			  	        pubreport1a.addAll(pubreport3);
			  	   
			  	   
			  	  total = 0.0;
			      share =0.0;
			      maxTotal = 0.0; 
			      scaledshare = 0.0;
			     	                   
			          for(int i=0;i<pubreport1a.size();i++){
			        	  
			        	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			        		  total=total+Double.parseDouble(pubreport1a.get(i).getCount());
			             
			                //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			                //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			              
			               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			               // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			        		  if(Double.parseDouble(pubreport1a.get(i).getCount())> maxTotal)
				   	    	    {
				   	    	    	maxTotal = Double.parseDouble(pubreport1a.get(i).getCount());
			    	    }
			    	      
			        	  
			          }
			                   
			           for(int i=0;i<pubreport1a.size();i++){
			        	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			        	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/total)*100,2);
			        	        
			        	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			        	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			        	      
			        	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			        	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			        	        	 scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/maxTotal)*100,2);
			        	        	 
			        	        	 pubreport1a.get(i).setScaledShare(scaledshare.toString());	
			        	  pubreport1a.get(i).setShare(share.toString());
			        	  
			          }
			  	        
			           for(int i=0;i<pubreport1a.size();i++){    
			              	  
			      	          Integer count = (int) (Double.parseDouble(pubreport1a.get(i).getCount()));
			      	          pubreport1a.get(i).setCount(numberFormat.format(count)); 
			      	       
			           } 
			  	        
			  	        
			  	        return pubreport1a;
			  	   }
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
			    
				 if (queryfield.equals("clickedArticles")) {
				        
			      	 AggregationModule module =  AggregationModule.getInstance();
			    	    try {
			    			module.setUp();
			    		} catch (Exception e1) {
			    			// TODO Auto-generated catch block
			    			e1.printStackTrace();
			    		}
			   		pubreport=module.getChannelArticleReferredPostsListInternalFilter(startdate, enddate, channel_name, articlename, filterMetric, filtertype, queryfilterbuilder);
			       
			   	    total = 0.0;
			        share = 0.0;
			        maxTotal = 0.0; 
	                scaledshare = 0.0;
			        
			        for(int i=0;i<pubreport.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		    	    }
		    	    
			      	  
			        }
			                 
			         for(int i=0;i<pubreport.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
			      	        	 
			      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	        	 

			      	  pubreport.get(i).setShare(share.toString());
			      	  
			        }
			   		
			         for(int i=0;i<pubreport.size();i++){    
		   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				          pubreport.get(i).setCount(numberFormat.format(count)); 
				       
		           }
	 
			         
			         
			   		return pubreport;  
			      }
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
			    
			    
		        if(queryfield.equals("minutesVisitor"))	
		        {
		        	/*  
		        	pubreport.clear();
		        	PublisherReport obj1 = new PublisherReport();
		        	Random random = new Random();	
		            Integer randomNumber = random.nextInt(10) + 1;
		           String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
		            String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj1.setArticleTitle(articleTitle);obj1.setArticle(articlename);
		            obj1.setMinutesperVisitor(randomNumber.toString());
		        	pubreport.add(obj1);
		            return pubreport;
		            */
		        	
		        	
		        	
		        	
		        	   pubreport.clear();
		        	   PublisherReport obj1 = new PublisherReport();
		        	   
		        	   AggregationModule module =  AggregationModule.getInstance();
		         	    
		        	   List<PublisherReport> pubreport1a = new ArrayList();
		        	   List<PublisherReport> pubreport2 = new ArrayList();
		        	   Double minutesVisitor = 0.0;
		         	   
		        	   try {
		         			module.setUp();
		         		} catch (Exception e1) {
		         			// TODO Auto-generated catch block
		         			e1.printStackTrace();
		         		}
		        		pubreport1a=module.EngagementTimeChannelArticlefilter(startdate, enddate, channel_name,articlename,queryfilterbuilder);
		        		
		        		 if(filterMetric == null || filterMetric.isEmpty() ||  filterMetric.equals("pageviews"))
							{
					    	
		        			 pubreport2=module.counttotalvisitorsChannelArticlefilter(startdate, enddate, channel_name,articlename,queryfilterbuilder); 
		        			 minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getTotalvisits()),2);
							}
							
					   if(filterMetric != null && !filterMetric.isEmpty()  && filterMetric.equals("visitorCount") )
							{
								
								pubreport2 = module.countfingerprintChannelArticlefilter(startdate, enddate, channel_name,articlename,queryfilterbuilder);
								minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getReach()),2);
							}	
		        		
					   String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
						
					   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj1.setArticleTitle(articleTitle);obj1.setArticle(articlename);
					   
					   obj1.setMinutesperVisitor(MinutestoSecond(minutesVisitor.toString()));
					   pubreport.add(obj1);
					   return pubreport;	
		        }
			    
			    
			    if (queryfield.equals("totalViews")) {
			        
			   	 AggregationModule module =  AggregationModule.getInstance();
			 	    try {
			 			module.setUp();
			 		} catch (Exception e1) {
			 			// TODO Auto-generated catch block
			 			e1.printStackTrace();
			 		}
					pubreport=module.counttotalvisitorsChannelArticlefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
			       
					

	          		for(int i=0;i<pubreport.size();i++){    
	   	          	  
	          			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
	          			pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
				       
		           } 
					
					return pubreport;
			   }
			    
			    
			    
			    if (queryfield.equals("totalViewsDatewise")) {
			        
				   	 AggregationModule module =  AggregationModule.getInstance();
				 	    try {
				 			module.setUp();
				 		} catch (Exception e1) {
				 			// TODO Auto-generated catch block
				 			e1.printStackTrace();
				 		}
						pubreport=module.counttotalvisitorsChannelArticleDatewisefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
				        
						for(int i=0;i<pubreport.size();i++){    
			   	          	  
							 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
							 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
					       
			           }
						
						
						return pubreport;
			    }
				
			    
			    if (queryfield.equals("totalViewsHourwise")) {
			        
				   	 AggregationModule module =  AggregationModule.getInstance();
				 	    try {
				 			module.setUp();
				 		} catch (Exception e1) {
				 			// TODO Auto-generated catch block
				 			e1.printStackTrace();
				 		}
						pubreport=module.counttotalvisitorsChannelArticleHourwisefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
				       
						for(int i=0;i<pubreport.size();i++){    
			   	          	  
							 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
							 pubreport.get(i).setTotalvisits(numberFormat.format(count));  
					       
			           }
						
						
						
						
						return pubreport;
			    }
			    
			    
				           
			    if (queryfield.equals("uniqueVisitors")) {
			        
			      	 AggregationModule module =  AggregationModule.getInstance();
			    	    try {
			    			module.setUp();
			    		} catch (Exception e1) {
			    			// TODO Auto-generated catch block
			    			e1.printStackTrace();
			    		}
			   		pubreport=module.countfingerprintChannelArticlefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
			        
			   		
			   		for(int i=0;i<pubreport.size();i++){    
		   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
				          pubreport.get(i).setReach(numberFormat.format(count)); 
				       
		           }
			   		
			   		
			   		
			   		
			   		
			   		
			   		return pubreport; 
			    } 
			    		    
			           
			    if (queryfield.equals("uniqueVisitorsDatewise")) {
			        
			      	 AggregationModule module =  AggregationModule.getInstance();
			    	    try {
			    			module.setUp();
			    		} catch (Exception e1) {
			    			// TODO Auto-generated catch block
			    			e1.printStackTrace();
			    		}
			   		pubreport=module.countfingerprintChannelArticleDatewisefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
			       
			   		for(int i=0;i<pubreport.size();i++){    
		   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
				          pubreport.get(i).setReach(numberFormat.format(count)); 
				       
		           }
			   		
			   		
			   		return pubreport;  
			    }
			    
			   
			    if (queryfield.equals("uniqueVisitorsHourwise")) {
			        
			      	 AggregationModule module =  AggregationModule.getInstance();
			    	    try {
			    			module.setUp();
			    		} catch (Exception e1) {
			    			// TODO Auto-generated catch block
			    			e1.printStackTrace();
			    		}
			   		pubreport=module.countfingerprintChannelArticleHourwisefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
			        
			   		for(int i=0;i<pubreport.size();i++){    
		   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
				          pubreport.get(i).setReach(numberFormat.format(count)); 
				       
		           }
			   		
			   		
			   		return pubreport;  
			    }
			    
			    
		           if(queryfield.equals("engagementTimeDatewise"))	
		           {
		        	   
		        	   
		        	   AggregationModule module =  AggregationModule.getInstance();
		       	    try {
		       			module.setUp();
		       		} catch (Exception e1) {
		       			// TODO Auto-generated catch block
		       			e1.printStackTrace();
		       		}
		      		pubreport=module.EngagementTimeChannelArticleDatewisefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
		      		

	               for(int i=0;i<pubreport.size();i++){    
	   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
				          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
				       
		           }
		      		
		      		
		      		
		      		return pubreport;
		           
		           }
		           
		           if(queryfield.equals("engagementTimeHourwise"))	
		           {
		        	   
		        	   
		        	   AggregationModule module =  AggregationModule.getInstance();
		       	    try {
		       			module.setUp();
		       		} catch (Exception e1) {
		       			// TODO Auto-generated catch block
		       			e1.printStackTrace();
		       		}
		      		pubreport=module.EngagementTimeChannelArticleHourwisefilter(startdate, enddate, channel_name, articlename,queryfilterbuilder);
		      		

	                   for(int i=0;i<pubreport.size();i++){    
	   	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
				          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
				       
		           }
		      		
		      		
		      		
		      		return pubreport;
		           
		           }
		           
	           
	           
	           
	           
	           
	           
	           
	           
	           for(int i=0;i<pubreport.size();i++){    
 	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	           }           
		    
		    
		    return pubreport;
		  }
  

		 
  
  /* 
		  public List<PublisherReport> getQueryFieldChannelArticleFilter(String queryfield,String startdate, String enddate, String channel_name,String articlename, Map<String,String>filter)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    
			        int size = filter.size();
			        String queryfilterbuilder = "";
			        String formattedString = "";
			        int j =0;
			        for (Map.Entry<String, String> entry : filter.entrySet())
			        {
			        	if (j==0){
			                formattedString = addCommaString(entry.getValue());
			        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
			        	
			        	}
			            else{
			            formattedString = addCommaString(entry.getValue());	
			            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
			       
			            }
			            j++;
			         
			        }
			  
			        String query = "";
			        
			        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			         query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
				     query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			        
			        if(filter != null && !filter.isEmpty() && filter.equals("visitorCount"))
				     query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			        
			        
			        
			        System.out.println(query);
			        CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    
				    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				       // lines = processList(lines);
				    
				    
				    
				    //System.out.println(headers);
				    //System.out.println(lines);
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        
				    	try{
				    	  
				    	PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				     //   String demographicproperties = demographicmap.get(data[0]);
				            if(queryfield.equals("gender"))
				        	obj.setGender(capitalizeString(data[0]));
				        
				            if(queryfield.equals("device"))
				        	obj.setDevice_type(capitalizeString(data[0]));
				        	
				        	if(queryfield.equals("city")){
				        		try{
				        		String locationproperties = citycodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-"," ");
						        data[0] = capitalizeString(data[0]);
						        obj.setCity(capitalizeString(data[0]));
						        System.out.println(data[0]);
						        obj.setLocationcode(locationproperties);
				        		}
				        		catch(Exception e){
				        			continue;
				        		}
				        		
				        		}
				        	
				        	if(queryfield.equals("audience_segment"))
				        	{
				        		String audienceSegment = audienceSegmentMap.get(data[0]);
				        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
				        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				        		obj.setAudience_segment(audienceSegment);
				        		obj.setAudienceSegmentCode(audienceSegmentCode);
				        		}
				        		else
				        	    obj.setAudience_segment(data[0]);
				        		
				        	}
				        	
				        	
				        	if(queryfield.equals("reforiginal"))
					             obj.setReferrerSource(data[0]);
				            	
				        	if(queryfield.equals("agegroup"))
				        	{
				        		 data[0]=data[0].replace("_","-");
				        		 data[0]=data[0]+ " Years";
				        		 if(data[0].contains("medium")==false)
				        		 obj.setAge(data[0]);
				        	}
				            	
				            	
				        	if(queryfield.equals("incomelevel"))
					          obj.setIncomelevel(capitalizeString(data[0]));
				    
				        	
				        	if(queryfield.equals("system_os")){
				        		String osproperties = oscodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-", " ");
						        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
						        String [] osParts = oscodeMap1.get(osproperties).split(",");
						        obj.setOs(osParts[0]);
						        obj.setOSversion(osParts[1]);
						        obj.setOscode(osproperties);
				        	}
				         	
				        	if(queryfield.equals("modelName")){
				        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
					        	
						        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
						        System.out.println(mobiledeviceproperties[2]);
						        obj.setDevicecode(mobiledeviceproperties[0]);
						        System.out.println(mobiledeviceproperties[0]);
				        
				        	}
				        	if(queryfield.equals("brandName")){
				        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        		obj.setBrandname(data[0]);
				        	}
				        
				        	if(queryfield.equals("refcurrentoriginal"))
				  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
				        	
				        	
				        	
				        	

				            Random random = new Random();	
				            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
				            Integer max = (int)Double.parseDouble(data[1]);
				            Integer randomNumber1 = random.nextInt(max) + 1;
				            
				            if(queryfield.equals("audience_segment"))	
				            {
				            obj.setCount(data[1]); 	
				            obj.setExternalWorldCount(randomNumber.toString());	
				            obj.setVisitorCount(randomNumber1.toString());
				            obj.setAverageTime("0.0");	
				            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            
				            
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
				            
				            }
				           
				            else if(queryfield.equals("agegroup")==true) {
				            	
				            	if(data[0].contains("medium")==false){
				            		if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						            	obj.setCount(data[1]);
						            
						                if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						                obj.setEngagementTime(data[1]);
						           
						                if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						                obj.setVisitorCount(data[1]);
				            		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							            
							            
								        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
								        pubreport.add(obj);
				            	}
				            }
				            				            
				            else{
				            	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					            	obj.setCount(data[1]);
					            
					                if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					                obj.setEngagementTime(data[1]);
					           
					                if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					                obj.setVisitorCount(data[1]);
				            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            
				            
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
				            
				            
				            }
				           
				    	}
				    	catch(Exception e)
				    	{
				    		continue;
				    	}
				    	
				    	}
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
		  */

	
		  

		  public List<PublisherReport> getQueryFieldChannelArticleGroupBy(String queryfield,String startdate, String enddate, String channel_name, String articlename, List<String> groupby, String filter)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    
			      
			    
		      String querygroupbybuilder = convert(groupby);
		      List<PublisherReport> pubreport = new ArrayList();
		      
		      if(queryfield.equals("visitorType")){
					
				    List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
				    List<PublisherReport> pubreportv2 = new ArrayList<PublisherReport>();
				    
				    if(groupby.get(0).equals("hourlyAverage")){
				    	querygroupbybuilder="hour";
				    
				     pubreport = countUsersChannelDatewiseArticlegroupby(startdate, enddate, channel_name, querygroupbybuilder,articlename, filter);
				  

					    Map<String,String> aggregationMap = new HashMap<String,String>();
					    String counttracker;
					    Double counttracker1 = 0.0;
					    String finalCounter;  
					  
			    		
			    		for(int i=0; i<pubreport.size();i++){
			    			
			    			String visitorType = pubreport.get(i).getVisitorType();
			    			String date =   pubreport.get(i).getDate();
			    			String count = pubreport.get(i).getCount();
			    	 		String [] parts = date.split("\\s+");
			    	 		String hour = parts[1];
			    	 		
			    	 		if(aggregationMap.containsKey(hour+"@"+visitorType)==false){
			    	 		aggregationMap.put(hour+"@"+visitorType,count);}
			    			else{
			    				
			    				counttracker = aggregationMap.get(hour+"@"+visitorType);
			    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
			    				aggregationMap.put(hour+"@"+visitorType,counttracker1.toString());
			    				
			    				
			    			}
			    		}
			    		
			    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
			    	 		    String key = entry.getKey();
			    	 		    String [] parts1 = key.split("@");	    	 		    
			    	 		    String value = entry.getValue();
			    	 		    PublisherReport obj = new PublisherReport();
			    	 		    obj.setVisitorType(parts1[1]);
			    	 		    obj.setDate(parts1[0].split(":")[0]);
			    	 		    obj.setCount(value);
			    	 		    pubreport1.add(obj);
			    	 		}
			    	
			    		    
			    		
			    	 		  for(int i=0;i<pubreport1.size();i++){    
			    	          	  
			    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
			    		          pubreport1.get(i).setCount(count.toString()); 
			    		       
			             }     
			    		return pubreport1;
				    }
			    	 		
			    		
				     
				     
				     pubreportv2 = countUsersChannelDatewiseArticlegroupby(startdate, enddate, channel_name, querygroupbybuilder, articlename, filter);
				     
				     for(int i=0;i<pubreportv2.size();i++){    
			          	  
				          Integer count = (int) (Double.parseDouble(pubreportv2.get(i).getCount()));
				          pubreportv2.get(i).setCount(count.toString()); 
				       
		      }     
				     
				     
				     
				     return pubreportv2;
				    		  
			 	   }
			  
		      
		      if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
				    
				    

		    	   List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
		   
		    	 
				    ExecutorService executorService = Executors.newFixedThreadPool(2000);
			        
			        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
			    
			        List<String> Query = new ArrayList();
			     
			        queryfield = "audience_segment,subcategory";
			       
					String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
					    
						
				    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
						
						
				    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by audience_segment,subcategory";  
			       
				    
				    Query.add(query1);
			        Query.add(query2);
				    Query.add(query3);
				    Query.add("externalWorldQueryArticle@"+startdate+"@"+enddate+"@"+channel_name+"@"+articlename);
			       
			       for(int j=0 ; j < Query.size(); j++ ){
			       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
			    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
			       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
			        
			       // returns a list of Futures holding their status and results when all complete
			    
			   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
			       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
			       }
			       
			       
			       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				

				    for (int k = 0; k < maps.size(); k++)
				    {
				    
				    	if(maps!=null && maps.get(k)!=null){
				        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				        pubreport1.addAll(map);
				    	}
				
		    }
			
				    executorService.shutdown();
				    
				    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				    
				    List<PublisherReport> object = new ArrayList<PublisherReport>();
				    
				    
				    for(int k=0; k< pubreport1.size(); k++)
				    {
			         try{ 
				    	String audiencesegment = pubreport1.get(k).getAudience_segment();
				    	
				    	String subcategory = pubreport1.get(k).getSubcategory();
				    	
				    	  String count =  pubreport1.get(k).getCount();
			        		
					        String engagementTime =  pubreport1.get(k).getEngagementTime();		
					        
					        String visitorCount = pubreport1.get(k).getVisitorCount();
				    	
					        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
					        
				    	    String key = audiencesegment+"@"+subcategory;
					        
					        
					        if(aggregatedmap.containsKey(key))
			        {
			       
			        PublisherReport obj = aggregatedmap.get(key);
			        obj.setAudience_segment(audiencesegment);
			        obj.setSubcategory(subcategory);
			      
			        
			        if(count!=null)
			        obj.setCount(count);
			        	
			        if(engagementTime!=null) 	
			        	obj.setEngagementTime(engagementTime);
			        	
			       if(visitorCount!=null) 	
			        	obj.setVisitorCount(visitorCount);
			        
			       if(externalWorldCount!=null)
			    	   obj.setExternalWorldCount(externalWorldCount);
			       else
       	    	   obj.setExternalWorldCount("0");
			       
			       
			       
			       if(key !=null) {	
			    	obj.setAudience_segment(audiencesegment);
 			        obj.setSubcategory(subcategory);
			       }
			       
			       
				    aggregatedmap.put(key, obj);
				    
			        }
			        else{
			        	       
			        	        PublisherReport obj = new PublisherReport();
			        	     
			        	        if(count !=null)
			        	        obj.setCount(count);
			        	        	
			        	        if(engagementTime !=null) 	
			        	        obj.setEngagementTime(engagementTime);
			        	        	
			        	       if(visitorCount !=null) 	
			        	        obj.setVisitorCount(visitorCount);
			        	
			        	       
			        	       if(externalWorldCount!=null)
						    	   obj.setExternalWorldCount(externalWorldCount);
			        	       else
			        	    	   obj.setExternalWorldCount("0");
			        	       
			        	       if(key!=null) {	
			        	    	obj.setAudience_segment(audiencesegment);
			   			        obj.setSubcategory(subcategory);
			        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	      
			        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			 		        	
			        	       
			        	       
			        	       }
			        	       aggregatedmap.put(key, obj);
			        
			        
			        }
			         }
			         catch(Exception e){
			        	 continue;
			         }
			      
				    }
				    
				     
				    
				    List<String> headers1 = new ArrayList<String>();
				    headers1.add("audience_segment");
				    headers1.add("subcategory");
				    headers1.add("count(*)");
				    headers1.add("SUM(engagementTime)");
				    headers1.add("COUNT(DISTINCT(cookiehash))");
				    headers1.add("ExternalWorldCount");
				    List<String> lines1= new ArrayList<String>();	
				    
				    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				    
				    	
				    	try{
				    	String key = entry.getKey();
				        PublisherReport obj = entry.getValue();
				        String [] parts1= key.split("@");
				        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
				      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
			        	lines1.add(line);
				        
				        
				       
				      }
				      catch(Exception e){
				    	  continue;
				      }
				    
				   
				    
				    
				    
				    
				    
				    
				    
				    }
				    
				    

				    List<List<String>> data = new ArrayList<List<String>>();
				    for (int i = 0; i < lines1.size(); i++) {
			            List<String> objects = new ArrayList<String>();
			            String [] parts = lines1.get(i).split(",");
			            for(int j =0; j< parts.length; j++)
			              objects.add(parts[j]);
			           
			            data.add(objects);
			        }
				    
				    
				    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
				    
				     queryfield = "audience_segment";
				//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
				 //   String s = json.toString();
				    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
				 //   System.out.println(nestedJson);
				    return pubreport;
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	
		    	/* 
		    List<List<String>> data = new ArrayList<List<String>>();
		    for (int i = 0; i < lines.size(); i++) {
	            List<String> objects = new ArrayList<String>();
	            String [] parts = lines.get(i).split(",");
	            for(int j =0; j< parts.length; j++)
	              objects.add(parts[j]);
	           
	            data.add(objects);
	        }
		    
		    
		    ResultSet obj = ListtoResultSet.getResultSet(headers, data);
		    
		    
		//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
		 //   String s = json.toString();
		    pubreport= NestedJSON.getNestedJSONObject(obj, queryfield, groupby,filter); 
		 //   System.out.println(nestedJson);
		    return pubreport;
		    
		    
		    */
		    
			    
			    }
		      
		      String query = "";
		      
		      int  l=0;
		      
		      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		    	 	query = "Select count(*),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
		    	    
		    	    
		    	    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime"))
		    	     	query = "Select SUM(engagementTime),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
		    	        
		    	    
		    	    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount"))
		    	     	query = "Select "+queryfield+","+querygroupbybuilder+",count(distinct(cookiehash)) from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder+"";
		    	        

		    	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
		    	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		    	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
		    	   
		    	    	
		    	    }
		    	  
		    	    if(querygroupbybuilder.equals("minute")){
		    	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		    	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
		    	   		    
		    	    } 	
		    	    
		    	    if(querygroupbybuilder.equals("second")){
		    	    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		    	    //	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
		    	   		    
		    	    } 	
		    	    
		    	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
		    	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
		    	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
		    	   
		    	    	
		    	    }
		    	  
		    	    if(querygroupbybuilder.equals("minute")){
		    	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
		    	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
		    	   		    
		    	    } 	
		    	    
		    	    if(querygroupbybuilder.equals("second")){
		    	    //	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
		    	    	//query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
		    	   		    
		    	    } 	
		    	    
		    	   
		    	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
		    	    	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
		    	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
		    	   
		    	    	
		    	    }
		    	  
		    	    if(querygroupbybuilder.equals("minute")){
		    	   	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
		    	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
		    	   		    
		    	    } 	
		    	    
		    	    if(querygroupbybuilder.equals("second")){
		    	    //	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
		    	    	//query = "Select "
		    	    	//		+ queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
		    	   		    
		    	    } 	
		    	    
		    	    
		    	    
		    	    
		    	    
		    	    
		    	    if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
		    	    {
		    	    	
		    	    	query = "Select count(*) from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    	    }
		    	    
		    	    	
		    	    if(querygroupbybuilder.equals("minute") && queryfield.equals("totalViews"))
		    	    {
		    	   	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		    	    	query = "Select count(*) from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
		    	    }
		    	    	
		    	    if(querygroupbybuilder.equals("second") && queryfield.equals("totalViews"))
		    	    {
		    	    	//if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		    	    	//query = "Select count(*) from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
		    	    }
		    	    
		    	    	
		    	    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
		    	    {
		    	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + 
		    				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    	    	
		    	    }
		    	 		    
		    			    	
		    	    if(querygroupbybuilder.equals("minute") && queryfield.equals("uniqueVisitors"))
		    	    {
		    	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + 
		    			      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +  " GROUP BY date_histogram(field='request_time','interval'='1m')";
		    	    
		    	    }
		    	    	
		    	    
		    	    if(querygroupbybuilder.equals("second") && queryfield.equals("uniqueVisitors"))
		    	    {
		    	    //	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + 
		    			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
		    	    	
		    	    }
		    	    
		    	    
		    	    if(querygroupbybuilder.equals("hour") && queryfield.equals("engagementTime"))
		    	    {
		    	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + 
		    				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    	    	
		    	    }
		    	 		    
		    			    	
		    	    if(querygroupbybuilder.equals("minute") && queryfield.equals("engagementTime") )
		    	    {
		    	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + 
		    			      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
		    	    	
		    	    }
		    	    	
		    	    
		    	    if(querygroupbybuilder.equals("second") && queryfield.equals("engagementTime") )
		    	    {
		    	    //	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and  channel_name = '" + 
		    			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
		    	    	
		    	    }
				    	
				    
	         	 
	         	
	         	System.out.println(query);
		         	CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				  
				    
				 //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					    //lines = processList1(lines);
				    
				    
				  
				    
				    
				    //System.out.println(headers);
				    //System.out.println(lines);
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				       try{
				    	  
				    	PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				     //   String demographicproperties = demographicmap.get(data[0]);
				        
				            if(queryfield.equals("gender")){
				        
				            	String genderId = GenderMap1.get(data[0]);
				        		obj.setGenderId(genderId);
				            	
				            	obj.setGender(capitalizeString(data[0]));
				            } 
				            if(queryfield.equals("device")){
				        	
				            	
				            	String deviceId = deviceMap1.get(data[0]);
				        		obj.setDeviceId(deviceId);
				            	obj.setDevice_type(capitalizeString(data[0]));
				            }
				        	if(queryfield.equals("city")){
				        		try{
				        		String locationproperties = citycodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-"," ");
						        data[0] = capitalizeString(data[0]);
						        obj.setCity(capitalizeString(data[0]));
						        System.out.println(data[0]);
						        obj.setLocationcode(locationproperties);
				        		}
				        		catch(Exception e)
				        		{
				        			continue;
				        			
				        		}
				        		
				        		}
				        	
				        	if(queryfield.equals("audience_segment"))
				        	{
				        		String audienceSegment = audienceSegmentMap.get(data[0]);
				        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
				        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				        		obj.setAudience_segment(audienceSegment);
				        		obj.setAudienceSegmentCode(audienceSegmentCode);
				        		}
				        		else
				        	    obj.setAudience_segment(data[0]);
				        		
				        		
				        	}
				        	
				        	
				        	  if(queryfield.equals("state"))
				            	{
				            	
				            	data[0]=data[0].replace("_", " ");
				            	data[0] = capitalizeString(data[0]);
				            	obj.setState(data[0]);
				            	}
				            
				            
				            if(queryfield.equals("country"))
				        	  {
				        	
				            	data[0]=data[0].replace("_", " ");
				            	data[0] = capitalizeString(data[0]);
				            	obj.setCountry(data[0]);
				             	}
				        
				        	
				        	
				        	
				        	if(queryfield.equals("reforiginal"))
					             obj.setReferrerMasterDomain(data[0]);
				            	
				        	if(queryfield.equals("agegroup"))
				        	{
				        		String ageId = AgeMap1.get(data[0]);
				        		obj.setAgeId(ageId);
				        		
				        		
				        		 data[0]=data[0].replace("_","-");
				        		 data[0]=data[0]+ " Years";
				        		 if(data[0].contains("medium")==false)
				        		 obj.setAge(data[0]);
				        	}
				            	
				            	
				        	if(queryfield.equals("incomelevel")){
				        		String incomelevelId = IncomeMap1.get(data[0]);
				        		obj.setIncomeId(incomelevelId);
				        		obj.setIncomelevel(capitalizeString(data[0]));
				        	}
				        	
				        	
				        	if(queryfield.equals("system_os")){
				        		String osproperties = oscodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-", " ");
						        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
						        String [] osParts = oscodeMap1.get(osproperties).split(",");
						        obj.setOs(osParts[0]);
						        obj.setOSversion(osParts[1]);
						        obj.setOscode(osproperties);
				        	}
				         	
				        	if(queryfield.equals("modelName")){
				        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
					        	
						        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
						        System.out.println(mobiledeviceproperties[2]);
						        obj.setDevicecode(mobiledeviceproperties[0]);
						        System.out.println(mobiledeviceproperties[0]);
				        	}
				         	
				        	if(queryfield.equals("brandName"))
					          {
				        		data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        		obj.setBrandname(data[0]);
					          }
				        
				        	
				        	if(queryfield.equals("refcurrentoriginal"))
				  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
				        	
				        	
				        	//   obj.setCode(code);
			            for(int k = 0; k < groupby.size(); k++)
			            {
			            	
			            	if(groupby.get(k).equals(queryfield)==false)
			            	{
			            	try{
			            	if(groupby.get(k).equals("device")){
			            	
			            		String deviceId = deviceMap1.get(data[k+1]);
			            		obj.setDeviceId(deviceId);
			            		
			            		obj.setDevice_type(capitalizeString(data[k+1]));
			            	}
			            	
			            	 if(groupby.get(k).equals("state"))
				             	{
				             	
				             	data[k+1]=data[k+1].replace("_", " ");
				             	data[k+1] = capitalizeString(data[k+1]);
				             	obj.setState(data[k+1]);
				             	}
				             
				             
				             if(groupby.get(k).equals("country"))
				         	  {
				         	
				             	data[k+1]=data[k+1].replace("_", " ");
				             	data[k+1] = capitalizeString(data[k+1]);
				             	obj.setCountry(data[k+1]);
				              	}
			            	
			            	
			            	if(groupby.get(k).equals("city"))
				            {
			            		try{
			            		String locationproperties = citycodeMap.get(data[k+1]);
			    		        data[k+1]=data[k+1].replace("_"," ").replace("-"," ");
			    		        data[k+1] = capitalizeString(data[k+1]);
			    		        obj.setCity(data[k+1]);
			    		        System.out.println(data[k+1]);
			    		        obj.setLocationcode(locationproperties);
			            		}
			            		catch(Exception e)
			            		{
			            			continue;
			            		}
			            		}
			            	
			            	if(groupby.get(k).equals("audience_segment")){
			            		
			            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
			            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
			            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
			            		obj.setAudience_segment(audienceSegment);
			            		obj.setAudienceSegmentCode(audienceSegmentCode);
			            		}
			            		else
			            	    obj.setAudience_segment(data[k+1]);
			            	}
			            	
			            	if(groupby.get(k).equals("gender")){
					         
			            		String genderId = GenderMap1.get(data[k+1]);
			            		obj.setGenderId(genderId);
			            		
			            		
			            		obj.setGender(capitalizeString(data[k+1]));
			            	}
			            	if(groupby.get(k).equals("subcategory"))
			            	 {
			            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
			            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
			            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
			            		obj.setSubcategory(audienceSegment);
			            		obj.setSubcategorycode(audienceSegmentCode);
			            		}
			            		else
			            	    obj.setSubcategory(data[k+1]);
					             }
			            	
			            	if(groupby.get(k).equals("date"))
			            	{
			            		
			            		Date date = new Date(Long.parseLong(data[k+1])); // *1000 is to convert seconds to milliseconds
			            		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
			            		 // give a timezone reference for formating (see comment at the bottom
			            		String formattedDate = sdf.format(date);
			            		
			            		obj.setDate(formattedDate);	
			            		
			            		
			            	}
			            	
			            	if(groupby.get(k).equals("hour") || groupby.get(k).equals("hourlyAverage"))
					             obj.setDate(data[k+1]);
			            	
			            	if(groupby.get(k).equals("minute"))
					             obj.setDate(data[k+1]);	
			            	
			            	if(groupby.get(k).equals("refcurrentoriginal")){
					         
			            		String genderId = GenderMap1.get(data[k+1]);
			            		obj.setGenderId(genderId);
			            		obj.setGender(capitalizeString(data[k+1]));
			            	}
			            	if(groupby.get(k).equals("agegroup"))
			            	{
			            		String ageId = AgeMap1.get(data[k+1]);
			            		obj.setAgeId(ageId);
			            		
			            		 data[k+1]=data[k+1].replace("_","-");
				        		 data[k+1]=data[k+1]+ " Years";
				        		 if(data[k+1].contains("medium")==false)
				        		 obj.setAge(data[k+1]);
				        	}
				            	
				            	
			            	if(groupby.get(k).equals("incomelevel")){
			            		String incomelevelId = IncomeMap1.get(data[k+1]);
			            		obj.setIncomeId(incomelevelId);
			            		obj.setIncomelevel(capitalizeString(data[k+1]));
			            	}
		                    l++;
			            	}
			            	catch(Exception e){
			            		continue;
			            	}
			            	
			            	}
			            }
				        
			            
			           
			            	            
			            if(l!=0){
			            	        
			            	  //      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					            	obj.setCount(data[l+1]);
					             
						       //     if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					            //    obj.setVisitorCount(data[l+1]);
					         

						         //   if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime") )
					             //   obj.setEngagementTime(data[l+1]);
					         
			            }
			 		         
			 		    String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				        pubreport.add(obj);
				        l=0;
				       }
				       catch(Exception e)
				       {
				    	   continue;
				       }
				       
				       }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				   
				    
				    
				    
				    Map<String,String> aggregationMap = new HashMap<String,String>();
				    String counttracker;
				    Double counttracker1 = 0.0;
				    String finalCounter;  
				  
				    
				    if(queryfield.equals("gender") && groupby.get(0).equals("hourlyAverage")== true){
				    	
				    		
				    		List<PublisherReport> pubreport1 = new ArrayList();
				    		
				    		for(int i=0; i<pubreport.size();i++){
				    			
				    			String gender = pubreport.get(i).getGender();
				    			String date =   pubreport.get(i).getDate();
				    			String count = pubreport.get(i).getCount();
				    	 		String [] parts = date.split("\\s+");
				    	 		String hour = parts[1];
				    	 		
				    	 		if(aggregationMap.containsKey(hour+"@"+gender)==false){
				    	 		aggregationMap.put(hour+"@"+gender,count);}
				    			else{
				    				
				    				counttracker = aggregationMap.get(hour+"@"+gender);
				    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
				    				aggregationMap.put(hour+"@"+gender,counttracker1.toString());
				    				
				    				
				    			}
				    		}	
				    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
				    	 		    String key = entry.getKey();
				    	 		    String [] parts1 = key.split("@");	    	 		    
				    	 		    String value = entry.getValue();
				    	 		    PublisherReport obj = new PublisherReport();
				    	 		    obj.setGender(parts1[1]);
				    	 		    obj.setDate(parts1[0].split(":")[0]);
				    	 		    obj.setCount(value);
				    	 		    pubreport1.add(obj);
				    	 		}
				    	
				    		    

				    	 		  for(int i=0;i<pubreport1.size();i++){    
				    	          	  
				    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
				    		          pubreport1.get(i).setCount(count.toString()); 
				    		       
				             }     
				    		
				    		
				    		
				    		
				    		return pubreport1;
				    		
				    		
				    		
				    	}
					    
				    	  if(queryfield.equals("agegroup") && groupby.get(0).equals("hourlyAverage")== true){
						    	
						    		

						    		
				    		List<PublisherReport> pubreport1 = new ArrayList();
						    		for(int i=0; i<pubreport.size();i++){
						    			
						    			String agegroup = pubreport.get(i).getAge();
						    			String date =   pubreport.get(i).getDate();
						    			String count = pubreport.get(i).getCount();
						    	 		String [] parts = date.split("\\s+");
						    	 		String hour = parts[1];
						    	 		
						    	 		if(aggregationMap.containsKey(hour+"@"+agegroup)==false){
						    	 		aggregationMap.put(hour+"@"+agegroup,count);}
						    			else{
						    				
						    				counttracker = aggregationMap.get(hour+"@"+agegroup);
						    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
						    				aggregationMap.put(hour+"@"+agegroup,counttracker1.toString());
						    				
						    				
						    			}
						    		}	
						    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
						    	 		    String key = entry.getKey();
						    	 		    String [] parts1 = key.split("@");	    	 		    
						    	 		    String value = entry.getValue();
						    	 		    PublisherReport obj = new PublisherReport();
						    	 		    obj.setAge(parts1[1]);
						    	 		    obj.setDate(parts1[0].split(":")[0]);
						    	 		    obj.setCount(value);
						    	 		   if(parts1[1]!=null && parts1[1].contains("medium")==false)
						    	 		    pubreport1.add(obj);
						    	 		}
						    	
						    		    

						    	 		  for(int i=0;i<pubreport1.size();i++){    
						    	          	  
						    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
						    		          pubreport1.get(i).setCount(count.toString()); 
						    		       
						             }     
						    		
						    		
						    	 		return pubreport1;
						    		
						    		
						    		
						    		
						    	}
							    
						    	  if(queryfield.equals("incomelevel") && groupby.get(0).equals("hourlyAverage")== true){
								    	
								    		
								    		

								    		
				    		List<PublisherReport> pubreport1 = new ArrayList();
								    		
								    		for(int i=0; i<pubreport.size();i++){
								    			
								    			String incomelevel = pubreport.get(i).getIncomelevel();
								    			String date =   pubreport.get(i).getDate();
								    			String count = pubreport.get(i).getCount();
								    	 		String [] parts = date.split("\\s+");
								    	 		String hour = parts[1];
								    	 		
								    	 		if(aggregationMap.containsKey(hour+"@"+incomelevel)==false){
								    	 		aggregationMap.put(hour+"@"+incomelevel,count);
								    	 		}
								    			else{
								    				
								    				counttracker = aggregationMap.get(hour+"@"+incomelevel);
								    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
								    				aggregationMap.put(hour+"@"+incomelevel,counttracker1.toString());
								    				
								    				
								    			}
								    		}
								    		
								    		
								    		
								    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
								    	 		    String key = entry.getKey();
								    	 		    String [] parts1 = key.split("@");	    	 		    
								    	 		    String value = entry.getValue();
								    	 		    PublisherReport obj = new PublisherReport();
								    	 		    obj.setIncomelevel(parts1[1]);
								    	 		    obj.setDate(parts1[0].split(":")[0]);
								    	 		    obj.setCount(value);
								    	 		    pubreport1.add(obj);
								    	
								    		    }
								    		
								    		

								    	 		  for(int i=0;i<pubreport1.size();i++){    
								    	          	  
								    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
								    		          pubreport1.get(i).setCount(count.toString()); 
								    		       
								             }     
								    	 		return pubreport1;
								    		
								    		
								    		
								    		
								    	}
						
								    	
								    	  if(queryfield.equals("device") && groupby.get(0).equals("hourlyAverage")== true){
										    	
										    		
										    		

				    		                           List<PublisherReport> pubreport1 = new ArrayList();
										    		
										    		for(int i=0; i<pubreport.size();i++){
										    			
										    			String device = pubreport.get(i).getDevice_type();
										    			String date =   pubreport.get(i).getDate();
										    			String count = pubreport.get(i).getCount();
										    	 		String [] parts = date.split("\\s+");
										    	 		String hour = parts[1];
										    	 		
										    	 		if(aggregationMap.containsKey(hour+"@"+device)==false){
										    	 		aggregationMap.put(hour+"@"+device,count);}
										    			else{
										    				
										    				counttracker = aggregationMap.get(hour+"@"+device);
										    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
										    				aggregationMap.put(hour+"@"+device,counttracker1.toString());
										    				
										    				
										    			}
										    		}
										    		
										    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
										    	 		    String key = entry.getKey();
										    	 		    String [] parts1 = key.split("@");	    	 		    
										    	 		    String value = entry.getValue();
										    	 		    PublisherReport obj = new PublisherReport();
										    	 		    obj.setDevice_type(parts1[1]);
										    	 		    obj.setDate(parts1[0].split(":")[0]);
										    	 		    obj.setCount(value);
										    	 		    pubreport1.add(obj);
										    	 		}
										    	
										    		    

										    	 		  for(int i=0;i<pubreport1.size();i++){    
										    	          	  
										    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
										    		          pubreport1.get(i).setCount(count.toString()); 
										    		       
										             }     
										    		
										    		
										    	 		return pubreport1;
										    		
										    		
										    		
										    		
										    	}		    	
								    	
						    	
										    	  if(queryfield.equals("visitorType") && groupby.get(0).equals("hourlyAverage")== true){
												    	
												    		
												    		

												    	
				    		                               List<PublisherReport> pubreport1 = new ArrayList();
												    		
												    		for(int i=0; i<pubreport.size();i++){
												    			
												    			String visitorType = pubreport.get(i).getVisitorType();
												    			String date =   pubreport.get(i).getDate();
												    			String count = pubreport.get(i).getCount();
												    	 		String [] parts = date.split("\\s+");
												    	 		String hour = parts[1];
												    	 		
												    	 		if(aggregationMap.containsKey(hour+"@"+visitorType)==false){
												    	 		aggregationMap.put(hour+"@"+visitorType,count);}
												    			else{
												    				
												    				counttracker = aggregationMap.get(hour+"@"+visitorType);
												    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
												    				aggregationMap.put(hour+"@"+visitorType,counttracker1.toString());
												    				
												    				
												    			}
												    		}
												    		
												    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
												    	 		    String key = entry.getKey();
												    	 		    String [] parts1 = key.split("@");	    	 		    
												    	 		    String value = entry.getValue();
												    	 		    PublisherReport obj = new PublisherReport();
												    	 		    obj.setVisitorType(parts1[1]);
												    	 		    obj.setDate(parts1[0].split(":")[0]);
												    	 		    obj.setCount(value);
												    	 		    pubreport1.add(obj);
												    	 		}
												    	
												    		    
												    		
												    	 		  for(int i=0;i<pubreport1.size();i++){    
												    	          	  
												    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
												    		          pubreport1.get(i).setCount(count.toString()); 
												    		       
												             }     
												    		
												    		
												    	 		return pubreport1;
												    		
												    		
												    		
												    	}
				   		    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    for(int i=0;i<pubreport.size();i++){    
		 	          	  
				          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				          pubreport.get(i).setCount(count.toString()); 
				       
		           }           
			    
				    
				    
				    
				    
				    return pubreport;
				  }
		  
		  public List<PublisherReport> getQueryFieldChannelSection(String queryfield,String startdate, String enddate, String channel_name,String sectionid, String filter)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
			
				{
			
			  

		        if(queryfield.equals("postsPublished"))
		        {
		       	 List<PublisherReport> pubreportv1 = new ArrayList();
		       	 
		       	 pubreportv1 = getPostsPublishedChannelSection(startdate, enddate, sectionid, channel_name);
		       	 
		       	 return pubreportv1;
		       	 
		        }
		     
		     
		        if(queryfield.equals("postsPublishedDatewise"))
		        {
		        	
		         List<PublisherReport> pubreportv1 = new ArrayList();
			       	 
		       	 
		       	 pubreportv1 = getPostsPublishedChannelSectionDatewise(startdate, enddate, sectionid, channel_name);
		       	 
		       	 return pubreportv1;
		       	 
		        }  
			  
			  
			  
		        List<PublisherReport> pubreport1 = new ArrayList();
				
				if(queryfield.equals("visitorTypecombined"))
			    {

					 
					 
					 List<PublisherReport> object = new ArrayList();
					 pubreport1 = countCombinedUsersChannelSectionDatewise(startdate, enddate, channel_name,sectionid, filter);
				    
				    for (PublisherReport value : pubreport1) {
				        
				      
				      
				        
			            Double averageTime = 0.0;
				        
				        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
				        
				        
				        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
				        
				        
				        value.setAverageTime(MinutestoSecond(averageTime.toString()));
				        
				     
			       	       object.add(value); 
				    
				    
				    }
				    
			 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
					    
			            Collections.sort(object, new Comparator<PublisherReport>() {
			 				
			 				@Override
			 		        public int compare(PublisherReport o1, PublisherReport o2) {
			 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
			 		        }
			 		    });	
					    
					    }
					    
					    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
					    	

				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
				 		        }
				 		    });	
					    	
					    	
					    }
					    
					    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
					    	
			                    Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
				 		        }
				 		    });	
					    	
					    	
					    }
					    
					    
					    
					    
					   
					    
					    
			            Double total2 = 0.0;
			Double totalvisits = 0.0;
			Double totaleT = 0.0;
			Double totalvisitor = 0.0;
			Double share1 = 0.0;
			Double sharevisits = 0.0;
			Double shareeT = 0.0;
			Double sharevisitor = 0.0;
			Double maxTotal = 0.0; 
			Double scaledshare = 0.0;	 
			Double share = 0.0;
			Double scaledsharevisits = 0.0;
			Double scaledshareeT = 0.0;
			Double scaledsharevisitor = 0.0;
			Double maxsharevisits = 0.0;
			Double maxshareeT = 0.0;
			Double maxsharevisitor = 0.0;

			for(int i=0;i<object.size();i++){
			  
			      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  { 
			    	  total2=total2+Double.parseDouble(object.get(i).getCount());

				      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
					   	    	    {
					   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
			 	    	    }
				  
				  
				  
				  }
			      
			      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
			    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
			    	 
			    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
				    	    {
				    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
			   }
			      
			      
			      }
			      
			      
			      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
			    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
			    
			    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
				    	    {
				    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
			   }
			      
			      
			      }  	  
			      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
			   

			      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
			    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
			    
			    
			    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
			 	    {
			  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
			}
			    
			    
			    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
			 	    {
			  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
			}
			    
			    
			    
			    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
			 	    {
			  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
			}
			    
			    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			  
			   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			  
			  
			}
			       
			for(int i=0;i<object.size();i++){
			             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
			        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
			             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
			             
			             }
			             
			             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
			            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
			            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
			                 
			             }
			            	 
			            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
			            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
			            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
			            }
			            	 
			            	 
			             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
			             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
			             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
			       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      
			       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
			           
			           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
			           
			           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
			       //  object.get(i).setScaledShare(scaledshare.toString());	             
			             
			  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
			  object.get(i).setScaledshareeT(scaledshareeT.toString());
			  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
			  object.get(i).setShare(share.toString());
			  object.get(i).setSharetotalvisits(sharevisits.toString());
			  object.get(i).setShareeT(shareeT.toString());
			  object.get(i).setSharevisitorCount(sharevisitor.toString());
			object.get(i).setScaledShare(scaledshare.toString());
			}
				  
				  

					    		  
					    		  
					      
					       
					         for(int i=0;i<object.size();i++){    
					        	   
					        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
							         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
							       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
							          object.get(i).setCount(numberFormat.format(count)); 
							       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
							          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
					           
							          
					         }   
				    return object;		
					
					
			    }
				
		        
		        
		        
		        
			  

				if (queryfield.equals("Author")) {
		            queryfield =  "authorName";
			} 

				  
				if (queryfield.equals("reforiginal")) {
		            queryfield =  "sourceUrl";
			} 
			  
			  if(queryfield.equals("refcurrentoriginal"))
			    {

			    	    pubreport1 = new ArrayList();
					 
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				        
				        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				    
				        List<String> Query = new ArrayList();
				     
				        queryfield = "refcurrentoriginal";
				       
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
						    
							
					    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+" LIMIT 60";  
				       
					    
					    Query.add(query1);
				        Query.add(query2);
					    Query.add(query3);
				       
				       for(int j=0 ; j < Query.size(); j++ ){
				       lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				        
				       // returns a list of Futures holding their status and results when all complete
				    
				   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				       }
				       
				       
				       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
			    }
				
					 
					    
					    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				         try{ 
					    	String page = pubreport1.get(k).getPublisher_pages();
					    	
					    	  String count =  pubreport1.get(k).getCount();
				        		
						        String engagementTime =  pubreport1.get(k).getEngagementTime();		
						        
						        String visitorCount = pubreport1.get(k).getVisitorCount();
					    	
					    	if(aggregatedmap.containsKey(page))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(page);
				        obj.setPublisher_pages(page);
				        
				      
				        
				        if(count!=null)
				        obj.setCount(count);
				        	
				        if(engagementTime!=null) 	
				        	obj.setEngagementTime(engagementTime);
				        	
				       if(visitorCount!=null) 	
				        	obj.setVisitorCount(visitorCount);
				        
					   
				       if(page !=null) 	
				    	   obj.setPublisher_pages(page);
				  	
				       
				       
					    aggregatedmap.put(page, obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(count !=null)
				        	        obj.setCount(count);
				        	        	
				        	        if(engagementTime !=null) 	
				        	        obj.setEngagementTime(engagementTime);
				        	        	
				        	       if(visitorCount !=null) 	
				        	        obj.setVisitorCount(visitorCount);
				        	
				        	       if(page!=null) {	
				        	    	obj.setPublisher_pages(page);
				        	    	String url = page;
				        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				        	      
				        	    	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}if(article.getSectionid() != null && !article.getSectionid().isEmpty()){ String sectionId = article.getSectionid();obj.setSection(AggregationModule.sectionMap.get(sectionId));}
				 		        	
				        	       
				        	       
				        	       }
				        	       aggregatedmap.put(page, obj);
				        
				        
				        }
				         }
				         catch(Exception e){
				        	 continue;
				         }
				      
					    }
					    
					    int l = 0;
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					    
					    //	l++;
					    //	if(l==30)
					    	//	break;
					    	try{
					    	String key = entry.getKey();
					        PublisherReport obj = entry.getValue();

			                Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime=NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getCount()),2);
			    	        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime=NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getVisitorCount()),2);
					        
					        
					        obj.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        String url = obj.getPublisher_pages();
					        String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				        	
					        
					        
					        object.add(obj); 
					      }
					      catch(Exception e){
					    	  continue;
					      }
					    
					    }
					    
if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
				            
					  

						    		  
						    		  
						      
						      
						 
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }        
						         
						         
					    return object;		
						
					    
					    
						
					    
					    
					    
					    
					    
					    
					    
					    
					    
					    
					    
					    
					   
			    }
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			    String query = "";
			  
		        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
			   
		        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				   
		        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		        query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
		        		
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				 
				    List<PublisherReport> pubreport = new ArrayList();
				    
				    pubreport1 = new ArrayList();
				 //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // lines = processList(lines);
				  
				  
				  
				  
				  //System.out.println(headers);
				    //System.out.println(lines);
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				       
				    	try{  
				    	  
				    	  PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				     //   String demographicproperties = demographicmap.get(data[0]);
				            
				            if(queryfield.equals("gender")){
				        	
				            	String genderId = GenderMap1.get(data[0]);
				        		obj.setGenderId(genderId);
				            	obj.setGender(capitalizeString(data[0]));
				            }
				            if(queryfield.equals("device")){
				            	String deviceId = deviceMap1.get(data[0]);
				        		obj.setDeviceId(deviceId);
				            	
				            	obj.setDevice_type(capitalizeString(data[0]));
				            }
				            
				            if(queryfield.equals("state"))
			            	{
			            	
			            	data[0]=data[0].replace("_", " ");
			            	data[0] = capitalizeString(data[0]);
			            	obj.setState(data[0]);
			            	}
			            
			            
			                if(queryfield.equals("country"))
			        	  {
			        	
			            	data[0]=data[0].replace("_", " ");
			            	 data[0] = capitalizeString(data[0]);
			            	obj.setCountry(data[0]);
			             	}
				            
				            
				        	if(queryfield.equals("city")){
				        		try{
				        		String locationproperties = citycodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-"," ");
						        data[0] = capitalizeString(data[0]);
						        obj.setCity(capitalizeString(data[0]));
						        System.out.println(data[0]);
						        obj.setLocationcode(locationproperties);
				        		}
				        		catch(Exception e)
				        		{
				        			continue;
				        		}
				        		
				        		}
				        	if(queryfield.equals("audience_segment"))
				        	{
				        		String audienceSegment = audienceSegmentMap.get(data[0]);
				        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
				        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				        		obj.setAudience_segment(audienceSegment);
				        		obj.setAudienceSegmentCode(audienceSegmentCode);
				        		}
				        		else
				        	    obj.setAudience_segment(data[0]);
				        		
				        	}
				        	
				        	if(queryfield.equals("sourceUrl")){
					         
				        		String urlId = UrlMap1.get(data[0]);
				        		obj.setUrlId(urlId);
				        		
				        		obj.setReferrerMasterDomain(data[0]);
				        	}
				        	
				        	if(queryfield.equals("referrerType")){
					         
				        		
				        		String referrerTypeId = referrerTypeMap1.get(data[0]);
				        		obj.setReferrerTypeId(referrerTypeId);
				        		
				        		obj.setReferrerSource(data[0]);
				        	}
				        	
				        	if(queryfield.equals("agegroup"))
				        	{ 
				        		String ageId = AgeMap1.get(data[0]);
				        		obj.setAgeId(ageId);
				        		
				        		data[0]=data[0].replace("_","-");
				        		data[0]=data[0]+ " Years";
				        		if(data[0].contains("medium")==false)
				        		obj.setAge(data[0]);
				        	}
				            	
				        	if(queryfield.equals("incomelevel")){
					    
				        		String incomelevelId = IncomeMap1.get(data[0]);
				        		obj.setIncomeId(incomelevelId);
				        		obj.setIncomelevel(capitalizeString(data[0]));
				        
				        	}
				        	if(queryfield.equals("ISP")){
				        		if(data[0].trim().toLowerCase().equals("_ltd")==false)
				        		{
				        			data[0]=data[0].replace("_"," ");
				        			obj.setISP(capitalizeString(data[0]));
				            	}
				        	}	
				            if(queryfield.equals("organisation")){
				        
				            	if((!data[0].trim().toLowerCase().contains("broadband")) && (!data[0].trim().toLowerCase().contains("communication")) && (!data[0].trim().toLowerCase().contains("cable")) && (!data[0].trim().toLowerCase().contains("telecom")) && (!data[0].trim().toLowerCase().contains("network")) && (!data[0].trim().toLowerCase().contains("isp")) && (!data[0].trim().toLowerCase().contains("hathway")) && (!data[0].trim().toLowerCase().contains("internet")) && (!data[0].trim().toLowerCase().equals("_ltd")) && (!data[0].trim().toLowerCase().contains("googlebot")) && (!data[0].trim().toLowerCase().contains("sify")) && (!data[0].trim().toLowerCase().contains("bsnl")) && (!data[0].trim().toLowerCase().contains("reliance")) && (!data[0].trim().toLowerCase().contains("broadband")) && (!data[0].trim().toLowerCase().contains("tata")) && (!data[0].trim().toLowerCase().contains("nextra")))
				            	{
				            		data[0]=data[0].replace("_"," ");
				            		obj.setOrganisation(capitalizeString(data[0]));
				            	}
				            
				            }
				        	
				        	if(queryfield.equals("screen_properties")){
				        		
				        		obj.setScreen_properties(data[0]);
				        		
				        	}
				            
                             if(queryfield.equals("authorName")){
				        		
				        		obj.setArticleAuthor(data[0]);
				        		String authorId = AuthorMap1.get(data[0]);
				        		obj.setAuthorId(authorId);
				        	}
				        	
                             if(queryfield.equals("tag")){
 				        		
 				        		obj.setArticleTags(data[0]);
 				        		if(AggregationModule.tagMap3.get(data[0])!=null){
 					               	 String tagId = AggregationModule.tagMap3.get(data[0]);
 					   	        	 obj.setTagId(tagId);
 					               	 }
                             
                             }
                             
				        	
				        	
				        	if(queryfield.equals("system_os")){
				        		String osproperties = oscodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-", " ");
						        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
						        String [] osParts = oscodeMap1.get(osproperties).split(",");
						        obj.setOs(osParts[0]);
						        obj.setOSversion(osParts[1]);
						        obj.setOscode(osproperties);
				        	}
				         	
				        	if(queryfield.equals("modelName")){
				        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
					        	
						        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
						        System.out.println(mobiledeviceproperties[2]);
						        obj.setDevicecode(mobiledeviceproperties[0]);
						        System.out.println(mobiledeviceproperties[0]);
				        
				        	}
				        	
				        	if(queryfield.equals("brandName")){
				        		data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        		obj.setBrandname(data[0]);
				        	}

				        	if(queryfield.equals("refcurrentoriginal"))
				  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
				        	
				        	

				            Random random = new Random();	
				            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
				            Integer max = (int)Double.parseDouble(data[1]);
				            Integer randomNumber1 = random.nextInt(max) + 1;
				            
				            if(queryfield.equals("audience_segment"))	
				            {
				            obj.setCount(data[1]); 	
				            obj.setExternalWorldCount(randomNumber.toString());	
				            obj.setVisitorCount(randomNumber1.toString());
				            obj.setAverageTime("0.0");	
				            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        obj.setSection(sectionid);
					        pubreport.add(obj);
				            
				            }
				            
				            else if(queryfield.equals("agegroup")==true) {
				            	
				            	if(data[0].contains("medium")==false){
				            		    //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))	
								            obj.setCount(data[1]);
								            
								            
								         //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								          //  obj.setEngagementTime(data[1]);
								            	
								           

								          //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								          //  obj.setVisitorCount(data[1]);
				            		String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionid);
							        pubreport.add(obj);
				            	}
				            }
				            
				            else if(queryfield.equals("refcurrentoriginal")==true) {
				            	
                    	        obj.setCount(data[1]);
                    	        Random randomv1 = new Random();	
    				            Integer randomNumberv1 = random.nextInt(1000 + 1 - 500) + 500;
    				            Integer maxv1 = (int)Double.parseDouble(data[1]);
    				            Integer randomNumber2 = random.nextInt(maxv1) + 1;
    				            Integer randomNumber3 = random.nextInt(maxv1) + 1;
    				            Integer value = (Integer)(randomNumber2/randomNumber3) + 1;
    				            obj.setAverageTime(value.toString());
    				            obj.setEngagementTime(randomNumber2.toString());
    				            obj.setVisitorCount(randomNumber3.toString());
                    	        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						       
						        pubreport.add(obj);
			            	}
				            
				            else{
				            	    //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))	
							            obj.setCount(data[1]);
							            
							            
							         //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							         //   obj.setEngagementTime(data[1]);
							            	
							           

							          //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							         //   obj.setVisitorCount(data[1]);
				           
							            if(queryfield.equals("sourceUrl") || queryfield.equals("referrerType")){
					       	            	 
					       	            	 if(data[0].contains("Social")){
					       	           			obj.setLikes("45");
					       	           		    obj.setShares("10");
					       	           		}		
					       	            	 
					       	            	 else if(data[0].contains("facebook")){
					       	            		 
					       	            		 obj.setLikes("45");
					        	           		     obj.setShares("10");
					       	            	 }
					       	            	 
					       	            	 
					       	            	  else{	
					       	           			
					       	           			obj.setLikes("0");
					       	           			obj.setShares("0");
					       	           			
					       	           		}		 
					       	            	 
					       	             }
						        	        
							            
							            
							            
						    String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        obj.setSection(sectionid);
					        pubreport.add(obj);
				            
				            }
				        
				    	}
				    	catch(Exception e)
				    	{
				    		continue;
				    	}
				    	
				    	}
				      
				      
				    	
				    	
				    	//System.out.println(headers);
				      //System.out.println(lines);
				    }
				   
				    Double total = 0.0;
			        Double share = 0.0;
			        Double maxTotal = 0.0; 
			        Double scaledshare = 0.0;        
			        
			        for(int i=0;i<pubreport.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      	  
			      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		   	    	    {
		   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
 	    	    }
			        }
			                 
			         for(int i=0;i<pubreport.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
			      	        	 
			      	        	pubreport.get(i).setScaledShare(scaledshare.toString());
			      	  pubreport.get(i).setShare(share.toString());
			      	  
			        }
				    
				    
				    
				    
				    
				    if(queryfield.equals("sourceUrl")){
				    	
			    		
				    	List<PublisherReport> pubreporta1 = NestedJSON5.getNestedReffererJSON(pubreport,filter);
				    		return pubreporta1;  		
				    		
				    	}
				    

				    if (queryfield.equals("LatLong")) {
				        
				    	  AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				  		pubreport=module.countLatLongChannelSection(startdate, enddate, channel_name, sectionid);
				  		for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }

				  		
				  		return pubreport;
				    }
				    
				   
				    if (queryfield.equals("postalcode")) {
				        
				    	  AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				  		pubreport=module.countPinCodeChannelSection(startdate, enddate, channel_name, sectionid);
				  		
				  		for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }

				  		
				  		
				  		return pubreport;
				    }
				   
				    if (queryfield.equals("cityOthers")) {
				        
				    	  AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				  		pubreport=module.countCityChannelSection(startdate, enddate, channel_name, sectionid,filter);
				  		
				  	  total = 0.0;
				      share = 0.0;

				 	 maxTotal = 0.0; 
				      scaledshare = 0.0;
				      
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
				   	    	    {
				   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		 	    	    }
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	        	 
				      	            pubreport.get(i).setShare(share.toString());
				      	  
				        }
				  		
				  		
				         for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }

				  		return pubreport;
				    }
				    
				    
				    if (queryfield.equals("stateOthers")) {
				        
				    	  AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				  		pubreport=module.countStateChannelSection(startdate, enddate, channel_name, sectionid,filter);
				  	
				  	  total = 0.0;
				        share =0.0;
				        maxTotal = 0.0; 
				        scaledshare = 0.0;
				        
				        
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
				   	    	    {
				   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		 	    	    }
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	        
				      	  pubreport.get(i).setShare(share.toString());
				      	  
				        }
				  		
				  		
				         for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }

				  		return pubreport;
				    }
				    
				    if (queryfield.equals("countryOthers")) {
				        
				    	  AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				  		pubreport=module.countCountryChannelSection(startdate, enddate, channel_name, sectionid,filter);
				  		
				  	    total = 0.0;
				        share =0.0;
				        maxTotal = 0.0; 
				        scaledshare = 0.0;
				        
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	 	    	    }
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	    	    
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
				      	  pubreport.get(i).setShare(share.toString());
				      	  
				        }
				  		
				  		
				         for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }

				  		
				  		return pubreport;
				    }
				    
				  
				   					
				    if(queryfield.equals("modelcombined"))
				    {
						 pubreport1.clear();

					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "modelName";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
					    
						
					    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}
					    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getMobile_device_model_name()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getMobile_device_model_name());
				        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
				  	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
				           	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        
					    	String key = entry.getKey();
					        PublisherReport value = entry.getValue();
				           

				            Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        try{
					        String modelName = devicecodeMap.get(value.getMobile_device_model_name());
					        String[] mobiledeviceproperties = modelName.split(",");
				        	
					        value.setMobile_device_model_name(mobiledeviceproperties[2]);
					        System.out.println(mobiledeviceproperties[2]);
					        value.setDevicecode(mobiledeviceproperties[0]);
					        System.out.println(mobiledeviceproperties[0]);
					        if(modelName.toLowerCase().contains("tablet")==false)
					        object.add(value); 
				            }
				            catch(Exception e){
				            	continue;
				            }
					     
					    }
					    
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						    		  
						      
						      
						 
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }        
						         
						         
					    return object;		
						
						
				    }
				  /*  
					if(queryfield.equals("reforiginalcombined"))
				    {
						 pubreport1.clear();

					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "reforiginal";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
					    
						
					    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				   /*  }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}
					    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getMobile_device_model_name()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getMobile_device_model_name());
				        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
				  	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getMobile_device_model_name()!=null) 	
				           	        obj.setMobile_device_model_name(pubreport1.get(k).getMobile_device_model_name());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getMobile_device_model_name(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        
					    	String key = entry.getKey();
					        PublisherReport value = entry.getValue();
				           

				            Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        try{
					        String modelName = devicecodeMap.get(value.getMobile_device_model_name());
					        String[] mobiledeviceproperties = modelName.split(",");
				        	
					        value.setMobile_device_model_name(mobiledeviceproperties[2]);
					        System.out.println(mobiledeviceproperties[2]);
					        value.setDevicecode(mobiledeviceproperties[0]);
					        System.out.println(mobiledeviceproperties[0]);
					        if(modelName.toLowerCase().contains("tablet")==false)
					        object.add(value); 
				            }
				            catch(Exception e){
				            	continue;
				            }
					     
					    }
					   
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
						      Double total2 = 0.0;
						      Double totalvisits = 0.0;
						      Double totaleT = 0.0;
						      Double totalvisitor = 0.0;
						      Double share1 = 0.0;
						      Double sharevisits = 0.0;
						      Double shareeT = 0.0;
						      Double sharevisitor = 0.0;
						    		 
						    		  
						    		  
						      
						        for(int i=0;i<object.size();i++){
						      	  
						      	      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						      		  total2=total2+Double.parseDouble(object.get(i).getCount());
						              
						      	      
						      	      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						      	    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
						              

						      	      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") )
						      	    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
						      	    	  
						      	      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
						             

						      	      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
						              totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
						              
						              
						              
						              
						              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
						            
						             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
						      	  
						      	  
						        }
						                 
						         for(int i=0;i<object.size();i++){
						      	             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
						      	        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
						      	          
						      	             
						      	             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
						      	            
						      	            	 
						      	            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						      	            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
						      	            	 
						      	            	 
						      	            	 
						      	             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
						      	             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
						      	             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
						      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
						      	      
						      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
						      	
						      	  object.get(i).setShare(share.toString());
						      	  object.get(i).setSharetotalvisits(sharevisits.toString());
						      	  object.get(i).setShareeT(shareeT.toString());
						      	  object.get(i).setSharevisitorCount(sharevisitor.toString());
						        
						         }
						 
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }        
						         
						         
					    return object;		
						
						
				    }
				    
					*/
					
					
					
					if(queryfield.equals("oscombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "system_os";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
				      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getOs()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOs());
				        obj.setOs(pubreport1.get(k).getOs());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getOs()!=null) 	
				  	        obj.setOs(pubreport1.get(k).getOs());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getOs(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getOs()!=null) 	
				           	        obj.setOs(pubreport1.get(k).getOs());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getOs(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					     

				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        try{
					        String os = value.getOs();
					        String osproperties = oscodeMap.get(os);
					        os=os.replace("_"," ").replace("-", " ");
					        os = AggregationModule.capitalizeFirstLetter(os);
					        String [] osParts = oscodeMap1.get(osproperties).split(",");
					        value.setOs(osParts[0]);
					        value.setOSversion(osParts[1]);
					        value.setOscode(osproperties);
					        
					        object.add(value); 
					      }
					      catch(Exception e){
					    	  continue;
					      }
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						    		  
						      
						       
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }        
						         
						         
					    return object;		
						
						
						
						
				    }


					if(queryfield.equals("brandcombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "brandName";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
				      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getBrandname()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getBrandname());
				        obj.setBrandname(pubreport1.get(k).getBrandname());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getBrandname()!=null) 	
				  	        obj.setBrandname(pubreport1.get(k).getBrandname());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getBrandname()!=null) 	
				           	        obj.setBrandname(pubreport1.get(k).getBrandname());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getBrandname(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        

				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        String brand = value.getBrandname();
					        brand = AggregationModule.capitalizeFirstLetter(brand);
				    		value.setBrandname(brand);
					        object.add(value); 
					    
					    
					    }
					    
					    
					    
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						    		  
						      
						      
						    
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }         
						         
						         
					    return object;		
						
						
						
						
				    }

					
					
					
					if(queryfield.equals("screenresolutioncombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "resolution_properties";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
				      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getScreen_properties()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getScreen_properties());
				        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getScreen_properties()!=null) 	
				  	        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getScreen_properties(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getScreen_properties()!=null) 	
				           	        obj.setScreen_properties(pubreport1.get(k).getScreen_properties());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getScreen_properties(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        

				            Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        String resolution = value.getScreen_properties();
					        resolution= resolution.replace("_","-");
				    		value.setScreen_properties(resolution);
					        object.add(value); 
					    
					    
					    }
					    
					    
					    
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						    		  
						      
						      
						    
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }         
						         
						         
					    return object;		
						
						
						
						
				    }

					
					

					if(queryfield.equals("postalcodecombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "postalcode";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where  section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
				      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where  section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getPostalcode()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getPostalcode());
				        obj.setPostalcode(pubreport1.get(k).getPostalcode());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getPostalcode()!=null) 	
				  	        obj.setPostalcode(pubreport1.get(k).getPostalcode());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getPostalcode(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getPostalcode()!=null) 	
				           	        obj.setPostalcode(pubreport1.get(k).getPostalcode());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getPostalcode(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        

				            Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        String postalcode = value.getPostalcode();
					        postalcode= postalcode.replace("_","-");
				    		value.setPostalcode(postalcode);
					        object.add(value); 
					    
					    
					    }
					    
					    
					    
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						    		  
						      
						      
						    
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }         
						         
						         
					    return object;		
						
						
						
						
				    }

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					if(queryfield.equals("ISPcombined"))
				    {

						pubreport1.clear();
					   
						ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "ISP";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
				      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getISP()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getISP());
				        obj.setISP(pubreport1.get(k).getISP());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getISP()!=null) 	
				  	        obj.setISP(pubreport1.get(k).getISP());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getISP(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getISP()!=null) 	
				           	        obj.setISP(pubreport1.get(k).getISP());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getISP(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					     
					        

				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        
					        String isp = value.getISP();
					        if(isp.trim().toLowerCase().equals("_ltd")==false && isp.trim().toLowerCase().equals("limited")==false ){
				    	        isp = isp.replace("_", " ").replace("-", " ");
				    			value.setISP(capitalizeString(isp));
					        
					        object.add(value); 
					        }
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    	 
						    		  
						    		  
						      
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }        
						         
						         
						         
					    return object;		
						
						
						
						
				    }


					if(queryfield.equals("organisationcombined"))
				    {
						 pubreport1.clear();

					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "organisation";
				     
				      String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
					    
				      String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",count(distinct(cookiehash))"+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" GROUP BY "+queryfield;  
				       
					    
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getOrganisation()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getOrganisation());
				        obj.setOrganisation(pubreport1.get(k).getOrganisation());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getOrganisation()!=null) 	
				  	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getOrganisation()!=null) 	
				           	        obj.setOrganisation(pubreport1.get(k).getOrganisation());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getOrganisation(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        
				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        
					        
					        String organisation = value.getOrganisation();
					        if((!organisation.trim().toLowerCase().equals("limited")) && (!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("communication")) && (!organisation.trim().toLowerCase().contains("cable")) && (!organisation.trim().toLowerCase().contains("telecom")) && (!organisation.trim().toLowerCase().contains("network")) && (!organisation.trim().toLowerCase().contains("isp")) && (!organisation.trim().toLowerCase().contains("hathway")) && (!organisation.trim().toLowerCase().contains("internet")) && (!organisation.trim().toLowerCase().equals("_ltd")) && (!organisation.trim().toLowerCase().contains("googlebot")) && (!organisation.trim().toLowerCase().contains("sify")) && (!organisation.trim().toLowerCase().contains("bsnl")) && (!organisation.trim().toLowerCase().contains("reliance")) && (!organisation.trim().toLowerCase().contains("broadband")) && (!organisation.trim().toLowerCase().contains("tata")) && (!organisation.trim().toLowerCase().contains("nextra"))){
					        	organisation = organisation.replace("_", " ").replace("-", " ");
				        	    value.setOrganisation(capitalizeString(organisation));
				        	
					        object.add(value); 
					        }
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						         String queryv1 = "Select ISP from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' group by ISP";
						         CSVResult csvResultv1 = getCsvResult(false, queryv1);
						         List<String> headersv1 = csvResultv1.getHeaders();
						         List<String> linesv1 = csvResultv1.getLines();  
						      

						         String queryv2 = "Select organisation from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' group by organisation";
						         CSVResult csvResultv2 = getCsvResult(false, queryv2);
						         List<String> headersv2 = csvResultv2.getHeaders();
						         List<String> linesv2 = csvResultv2.getLines();
						         
						         linesv2.removeAll(linesv1);
						         
						         Set<String> set = new HashSet<String>();
						         set.addAll(linesv2);
						          
						         
						         
						        for(int i=0; i<object.size();i++){ 
						         if(!set.contains(object.get(i).getOrganisation().toLowerCase().replace(" ","_")))
						          {
						        	  
						        	  object.remove(i);
						          }
						        }
						         
						         
						         
						         
						         for(int i=0;i<object.size();i++){    
						        	   
						        	  
						        	 
						        	 
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           
						             
								         
						         
						         
						         }         
						         
						         
						         
					    return object;		
						
						
						
						
				    }

					
						
					
					
					
					
					if(queryfield.equals("gendercombined"))
				    {
						 pubreport1.clear();

					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "gender";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getGender()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getGender());
				        obj.setGender(pubreport1.get(k).getGender());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getGender()!=null) 	
				  	        obj.setGender(pubreport1.get(k).getGender());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getGender(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getGender()!=null) 	
				           	        obj.setGender(pubreport1.get(k).getGender());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getGender(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					       

				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        String gender = value.getGender();
					        
					        String genderId = GenderMap1.get(gender);
				    		value.setGenderId(genderId);
					        
					        value.setGender(capitalizeString(gender));
					        object.add(value); 
					    
					    
					    }
					    
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    	 
						    		  
						    		  
						      
						    
					  
						         
						          
						        	   Collections.sort(object, new Comparator<PublisherReport>() {
											
											@Override
									        public int compare(PublisherReport o1, PublisherReport o2) {
												return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
									        }
									    });	
						          
						                
						         
						         
						        	   for(int i=0;i<object.size();i++){    
							        	   
							        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
									         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
									       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
									          object.get(i).setCount(numberFormat.format(count)); 
									       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
									          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
							           }
						         
						         
						         return object;		
						
						
						
						
				    }

					
					

					if(queryfield.equals("agegroupcombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "agegroup";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getAge()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getAge());
				        obj.setAge(pubreport1.get(k).getAge());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getArticleAuthor()!=null) 	
				  	        obj.setAge(pubreport1.get(k).getAge());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getAge(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getAge()!=null) 	
				           	        obj.setArticleAuthor(pubreport1.get(k).getAge());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getAge(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        
					        

				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        
					        
					        String age = value.getAge();
					        
					        String ageId = AgeMap1.get(age);
				    		value.setAgeId(ageId);
					        
					        age=age.replace("_","-");
				   		     age=age+ " Years";
				   		     if(age.contains("medium")==false){
				   		     value.setAge(age);
					         object.add(value); 
				   		     }
					    
					    }
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						      
						     
						    
					    
						         Collections.sort(object, new Comparator<PublisherReport>() {
										
										@Override
								        public int compare(PublisherReport o1, PublisherReport o2) {
											return  o1.getAge().compareTo(o2.getAge());
								        }
								    });	
						 
						         
						         
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }         
						         
						         
					    return object;		
						
						
						
						
				    }


					if(queryfield.equals("incomelevelcombined"))
				    {
						 pubreport1.clear();

					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "incomelevel";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getIncomelevel()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getIncomelevel());
				        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getIncomelevel()!=null) 	
				  	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getIncomelevel()!=null) 	
				           	        obj.setIncomelevel(pubreport1.get(k).getIncomelevel());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getIncomelevel(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					       

				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        String incomelevel = value.getIncomelevel();
					        value.setIncomelevel(capitalizeString(incomelevel));
					        object.add(value); 
					    
					    
					    }
					    
					    
				          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						      
						      

					        	   Collections.sort(object, new Comparator<PublisherReport>() {
										
										@Override
								        public int compare(PublisherReport o1, PublisherReport o2) {
											return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
								        }
								    });	
					          
				                   for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }
					   
					    return object;		
						
						
						
						
				    }

					
					
					
					if(queryfield.equals("citycombined"))
				    {
						 pubreport1.clear();

					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "city";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getCity()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCity());
				        obj.setCity(pubreport1.get(k).getCity());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getCity()!=null) 	
				  	        obj.setCity(pubreport1.get(k).getCity());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getCity(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getCity()!=null) 	
				           	        obj.setCity(pubreport1.get(k).getCity());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getCity(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        
				            Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        String city = value.getCity();
					        if(!city.equals("undetermined")){
					        try{
				        		String locationproperties = citycodeMap.get(city);
						        city=city.replace("_"," ").replace("-"," ");
						        if(citylatlongMap1.get(city)!=null && !citylatlongMap1.get(city).isEmpty())
						        value.setCitylatlong(citylatlongMap1.get(city));
						        city=capitalizeString(city);
						        value.setCity(city);
						        System.out.println(city);
						        value.setLocationcode(locationproperties);
				        		}
				        		catch(Exception e){
				        			continue;
				        		}
					        object.add(value); 
					        }
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						      
						  
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }        
						         
						         
						         
					    return object;		
						
						
						
						
				    }

					

					if(queryfield.equals("statecombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "state";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getState()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getState());
				        obj.setState(pubreport1.get(k).getState());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getState()!=null) 	
				  	        obj.setState(pubreport1.get(k).getState());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getState(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getState()!=null) 	
				           	        obj.setState(pubreport1.get(k).getState());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getState(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        

				            Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        String state  = value.getState();
					        
					        if(!state.equals("undetermined")){
					        state=state.replace("_", " ");

				        	String stateId = StateMap1.get(state);
				        	if(stateId!=null && !stateId.isEmpty())
				        	value.setStateId(stateId);
					        state = capitalizeString(state);
				        	value.setState(state);
					        
					        object.add(value); 
					        }
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    	 
						    		  
						    		  
						      
						   
						         
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }       
						         
						         
					    return object;		
						
						
						
						
				    }

					

					
					
					
					
					
					if(queryfield.equals("countrycombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "country";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getCountry()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getCountry());
				        obj.setCountry(pubreport1.get(k).getCountry());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getArticleAuthor()!=null) 	
				  	        obj.setCountry(pubreport1.get(k).getCountry());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getCountry()!=null) 	
				           	        obj.setCountry(pubreport1.get(k).getCountry());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getCountry(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					        

				            Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        
					        String country = value.getCountry();
					        if(!country.equals("undetermined")){
					        country=country.replace("_", " ");
					        String countryId = CountryMap1.get(country);
				            if(countryId !=null && !countryId.isEmpty())
					        value.setCountryId(countryId);
					        country = capitalizeString(country);
				        	value.setCountry(country);
					        
					        object.add(value); 
					        }
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    	 
						    		  
						    		  
						      
						      
						
						         
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }        
						         
						         
						         
					    return object;		
						
						
						
						
				    }

					

					
					
					
					
					

					if(queryfield.equals("devicecombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "device";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					   String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				     
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}

				        Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getDevice_type()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getDevice_type());
				        obj.setDevice_type(pubreport1.get(k).getDevice_type());
				        
				        
				        
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
					   
				       if(pubreport1.get(k).getArticleAuthor()!=null) 	
				  	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getDevice_type()!=null) 	
				           	        obj.setDevice_type(pubreport1.get(k).getDevice_type());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getDevice_type(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					       

				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
					        
					        
					        String deviceType = value.getDevice_type();
					        value.setDevice_type(capitalizeString(deviceType));
					        object.add(value); 
					    
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						      
						       
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           }   
					    return object;		
						
						
						
						
				    }

					
					
					
						
					
					if(queryfield.equals("topiccombined"))
				    {

						 pubreport1.clear();
					    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				      
				      List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  
				      List<String> Query = new ArrayList();
				   
				      queryfield = "tag";
				     
						String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
							
					    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
							
							
					    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					   
					    String query5= "Select "+queryfield+",COUNT(DISTINCT(refcurrentoriginal))  FROM enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					    
					    
					    Query.add(query1);
					    Query.add(query2);
					    Query.add(query3);
					    Query.add(query5);
				     
				     for(int j=0 ; j < Query.size(); j++ ){
				     lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
				  /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				     lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				      
				     // returns a list of Futures holding their status and results when all complete
				  
				 /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				     lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				     }
				     
				     
				     List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
					

					    for (int k = 0; k < maps.size(); k++)
					    {
					    
					    	if(maps!=null && maps.get(k)!=null){
					        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
					        pubreport1.addAll(map);
					    	}
					
				}
					    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
					    
					    List<PublisherReport> object = new ArrayList<PublisherReport>();
					    
					    
					    for(int k=0; k< pubreport1.size(); k++)
					    {
				        if(aggregatedmap.containsKey(pubreport1.get(k).getArticleTags()))
				        {
				       
				        PublisherReport obj = aggregatedmap.get(pubreport1.get(k).getArticleTags());
				        obj.setArticleTags(pubreport1.get(k).getArticleTags());
				        if(pubreport1.get(k).getCount()!=null)
				        obj.setCount(pubreport1.get(k).getCount());
				        	
				        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	
				       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        
				       if(pubreport1.get(k).getPosts()!=null) 	
				          	obj.setPosts(pubreport1.get(k).getPosts());
				       
					   
				       if(pubreport1.get(k).getArticleTags()!=null) 	
				  	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
				  	
				       
				       
					    aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
					    
				        }
				        else{
				        	       
				        	        PublisherReport obj = new PublisherReport();
				        	     
				        	        if(pubreport1.get(k).getCount()!=null)
				        	        obj.setCount(pubreport1.get(k).getCount());
				        	        	
				        	        if(pubreport1.get(k).getEngagementTime()!=null) 	
				        	        obj.setEngagementTime(pubreport1.get(k).getEngagementTime());
				        	        	
				        	       if(pubreport1.get(k).getVisitorCount()!=null) 	
				        	        obj.setVisitorCount(pubreport1.get(k).getVisitorCount());
				        	
				        	       if(pubreport1.get(k).getPosts()!=null) 	
				        	          	obj.setPosts(pubreport1.get(k).getPosts());
				        	       
				        	       
				        	       if(pubreport1.get(k).getArticleTags()!=null) 	
				           	        obj.setArticleTags(pubreport1.get(k).getArticleTags());
				           	
				        	       aggregatedmap.put(pubreport1.get(k).getArticleTags(), obj);
				        
				        
				        }
				   
				      
					    }
					    
					    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
					        String key = entry.getKey();
					        PublisherReport value = entry.getValue();
					      
					        
				Double averageTime = 0.0;
					        
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getCount()),2);
					        
					        
					        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        averageTime= NestedJSON5.round(Double.parseDouble(value.getEngagementTime())/Double.parseDouble(value.getVisitorCount()),2);
					        
					        
					        value.setAverageTime(MinutestoSecond(averageTime.toString()));
					        
					        
				            Integer pageViewsperPost = 0;
					        
					        pageViewsperPost =(int) (Double.parseDouble(value.getCount())/Double.parseDouble(value.getPosts()));
					        
					        
					        value.setPageViewsPost(pageViewsperPost.toString());
					        
					        
					        if(value.getArticleTags().toLowerCase().equals("hindibollywood"))	
				       		   value.setArticleTags("Bollywood");
				       	 
				       	    if(value.getArticleTags().toLowerCase().equals("womenlifestyle"))	
				       		   value.setArticleTags("Women's Fashion");
				       	
				       	 if(value.getArticleTags().toLowerCase().equals("hindimusic"))	
				       		 value.setArticleTags("Hindi Music");
				       	 
				       	 if(value.getArticleTags().toLowerCase().equals("healthfitness"))	
				       		 value.setArticleTags("Health & Fitness");
				       	 
				       	 if(value.getArticleTags().toLowerCase().equals("englishhollywood"))	
				       		 value.setArticleTags("Hollywood");
				       	 
				       	 if(value.getArticleTags().toLowerCase().contains("technews"))	
				       		 value.setArticleTags("Technology News");
				       	 
				       	 if(value.getArticleTags().toLowerCase().contains("mcdonald"))	
				       		 value.setArticleTags("Fast Food");
				       	    
				       	    
				       	 if(value.getArticleTags().toLowerCase().contains("international"))	
				       		 value.setArticleTags("International News");
				       	    
				       	 
				       	 
				       	 
				       	 
				       	 if(AggregationModule.tagMap3.get(value.getArticleTags()) != null){
				       	 String tagId = AggregationModule.tagMap3.get(value.getArticleTags());
				    	 value.setTagId(tagId);
				       	
				       	 
				       	 
				       	 }   
				       	   
				       	if(capitalizeFirstLetter(value.getArticleTags())!=null)
				          	 value.setArticleTags(capitalizeFirstLetter(value.getArticleTags()));
				       	 
				       	 
				       	 
				       	 
				       	 if(!value.getArticleTags().isEmpty())
				       	       object.add(value); 
					    
					    
					    }
					    
				 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
						    
				            Collections.sort(object, new Comparator<PublisherReport>() {
				 				
				 				@Override
				 		        public int compare(PublisherReport o1, PublisherReport o2) {
				 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				 		        }
				 		    });	
						    
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
						    	

					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
						    	
				                    Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
					 		        }
					 		    });	
						    	
						    	
						    }
						    
						    
						    
						    
						    
						    executorService.shutdown();
						 
						    
						    
				            Double total2 = 0.0;
				Double totalvisits = 0.0;
				Double totaleT = 0.0;
				Double totalvisitor = 0.0;
				Double share1 = 0.0;
				Double sharevisits = 0.0;
				Double shareeT = 0.0;
				Double sharevisitor = 0.0;
				maxTotal = 0.0; 
				scaledshare = 0.0;	 
				Double scaledsharevisits = 0.0;
				Double scaledshareeT = 0.0;
				Double scaledsharevisitor = 0.0;
				Double maxsharevisits = 0.0;
				Double maxshareeT = 0.0;
				Double maxsharevisitor = 0.0;

				for(int i=0;i<object.size();i++){
				  
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					  { 
				    	  total2=total2+Double.parseDouble(object.get(i).getCount());

					      if(Double.parseDouble(object.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(object.get(i).getCount());
				 	    	    }
					  
					  
					  
					  }
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getEngagementTime());
				    	 
				    	 if(Double.parseDouble(object.get(i).getEngagementTime())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getEngagementTime());
				   }
				      
				      
				      }
				      
				      
				      if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				    	 total2=total2+Double.parseDouble(object.get(i).getVisitorCount());	  
				    
				    	 if(Double.parseDouble(object.get(i).getVisitorCount())> maxTotal)
					    	    {
					    	    	maxTotal = Double.parseDouble(object.get(i).getVisitorCount());
				   }
				      
				      
				      }  	  
				      totalvisits = totalvisits+Double.parseDouble(object.get(i).getCount());
				   

				      totaleT = totaleT + Double.parseDouble(object.get(i).getEngagementTime());
				    totalvisitor = totalvisitor +  Double.parseDouble(object.get(i).getVisitorCount());
				    
				    
				    if(Double.parseDouble(object.get(i).getCount())>  maxsharevisits)
				 	    {
				  	  maxsharevisits = Double.parseDouble(object.get(i).getCount());
				}
				    
				    
				    if(Double.parseDouble(object.get(i).getEngagementTime())> maxshareeT)
				 	    {
				  	  maxshareeT  = Double.parseDouble(object.get(i).getEngagementTime());
				}
				    
				    
				    
				    if(Double.parseDouble(object.get(i).getVisitorCount())> maxsharevisitor)
				 	    {
				  	  maxsharevisitor = Double.parseDouble(object.get(i).getVisitorCount());
				}
				    
				    //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				    //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				  
				   //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				   // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				  
				  
				}
				       
				for(int i=0;i<object.size();i++){
				             if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
				        	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/total2)*100,2);
				             scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxTotal)*100,2);
				             
				             }
				             
				             if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxTotal)*100,2);
				                 
				             }
				            	 
				            if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") ){
				            	 share = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/total2)*100,2);
				            	scaledshare = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxTotal)*100,2);
				            }
				            	 
				            	 
				             sharevisits = NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/totalvisits)*100,2);
				             shareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/totaleT)*100,2);
				             sharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/totalvisitor)*100,2);
				       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      
				       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				           scaledsharevisits =  NestedJSON5.round((Double.parseDouble(object.get(i).getCount())/maxsharevisits)*100,2);
				           
				           scaledsharevisitor = NestedJSON5.round((Double.parseDouble(object.get(i).getVisitorCount())/maxsharevisitor)*100,2);
				           
				           scaledshareeT = NestedJSON5.round((Double.parseDouble(object.get(i).getEngagementTime())/maxshareeT  )*100,2);
				       //  object.get(i).setScaledShare(scaledshare.toString());	             
				             
				  object.get(i).setScaledsharevisits(scaledsharevisits.toString());    
				  object.get(i).setScaledshareeT(scaledshareeT.toString());
				  object.get(i).setScaledsharevisitors(scaledsharevisitor.toString());
				  object.get(i).setShare(share.toString());
				  object.get(i).setSharetotalvisits(sharevisits.toString());
				  object.get(i).setShareeT(shareeT.toString());
				  object.get(i).setSharevisitorCount(sharevisitor.toString());
				object.get(i).setScaledShare(scaledshare.toString());
				}
					  
					  

						    		  
						    		  
						      
						       
						         for(int i=0;i<object.size();i++){    
						        	   
						        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
								         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
								       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
								          object.get(i).setCount(numberFormat.format(count)); 
								       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
								          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
						           
								          Integer posts = (int) (Double.parseDouble(object.get(i).getPosts()));
						                  object.get(i).setPosts(numberFormat.format(posts));
						         }   
					    return object;		
						
						
				    }
				    
				    
				    
				    
									    
				    
				    
				    
				    if (queryfield.equals("newVisitors")) {
				        
				    	  AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
						pubreport=module.countNewUsersChannelSectionDatewise(startdate, enddate, channel_name, sectionid,filter);
						return pubreport;
				    }
				    
				    if (queryfield.equals("returningVisitors")) {
				        
				    	 AggregationModule module =  AggregationModule.getInstance();
				 	    try {
				 			module.setUp();
				 		} catch (Exception e1) {
				 			// TODO Auto-generated catch block
				 			e1.printStackTrace();
				 		}
						pubreport=module.countReturningUsersChannelSectionDatewise(startdate, enddate, channel_name, sectionid,filter);
						return pubreport;
				    }
				    
				    if (queryfield.equals("LoyalVisitors")) {
				        
				    	 AggregationModule module =  AggregationModule.getInstance();
				  	    try {
				  			module.setUp();
				  		} catch (Exception e1) {
				  			// TODO Auto-generated catch block
				  			e1.printStackTrace();
				  		}
				 		pubreport=module.countLoyalUsersChannelSectionDatewise(startdate, enddate, channel_name, sectionid,filter);
				 		return pubreport;
				    }
				      
				    

				    if (queryfield.equals("benchmarktotalViews")) {
				        
				      	 AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				   		pubreport=module.countbenchmarktotalvisitorsChannelSection(startdate, enddate, channel_name, sectionid);
				   		
				   		for(int i=0;i<pubreport.size();i++){    
			   	          	  
				   		 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
				   		pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
					       
			           }

				   		
				   		return pubreport;
				      }
				      
				      if (queryfield.equals("benchmarktotalViewsDatewise")) {
				              
				           	 AggregationModule module =  AggregationModule.getInstance();
				         	    try {
				         			module.setUp();
				         		} catch (Exception e1) {
				         			// TODO Auto-generated catch block
				         			e1.printStackTrace();
				         		}
				        		pubreport=module.counbenchmarktotalvisitorsChannelSectionDatewise(startdate, enddate, channel_name, sectionid);
				        		
				        		for(int i=0;i<pubreport.size();i++){    
				     	          	  
				        			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
				        			 pubreport.get(i).setTotalvisits(numberFormat.format(count));  
							       
					           }

				        		
				        		
				        		return pubreport;
				           }
				   
				   
				    if (queryfield.equals("benchmarktotalViewsHourwise")) {
				           
				       	 AggregationModule module =  AggregationModule.getInstance();
				     	    try {
				     			module.setUp();
				     		} catch (Exception e1) {
				     			// TODO Auto-generated catch block
				     			e1.printStackTrace();
				     		}
				    		pubreport=module.countbenchmarktotalvisitorsChannelSectionDateHourwise(startdate, enddate, channel_name, sectionid);
				    		
				    		for(int i=0;i<pubreport.size();i++){    
				   	          	  
				    			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
				    			 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
						       
				           }

				    		
				    		
				    		return pubreport;
				       } 
				    
				    
				    
				    if (queryfield.equals("benchmarkuniqueVisitorsDatewise")) {
				            
				         	 AggregationModule module =  AggregationModule.getInstance();
				       	    try {
				       			module.setUp();
				       		} catch (Exception e1) {
				       			// TODO Auto-generated catch block
				       			e1.printStackTrace();
				       		}
				      		pubreport=module.countbenchmarkfingerprintChannelSectionDatewise(startdate, enddate, channel_name, sectionid);
				      		

                    for(int i=0;i<pubreport.size();i++){    
   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
			          pubreport.get(i).setReach(numberFormat.format(count)); 
			       
	           }

				      		
				      		return pubreport;
				         }
				    
				    
				     if (queryfield.equals("benchmarkuniqueVisitorsHourwise")) {
				            
				         	 AggregationModule module =  AggregationModule.getInstance();
				       	    try {
				       			module.setUp();
				       		} catch (Exception e1) {
				       			// TODO Auto-generated catch block
				       			e1.printStackTrace();
				       		}
				      		pubreport=module.countbenchmarkfingerprintChannelSectionDateHourwise(startdate, enddate, channel_name, sectionid);
				      	
				      		

                 for(int i=0;i<pubreport.size();i++){    
   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
			          pubreport.get(i).setReach(numberFormat.format(count)); 
			       
	           }

				      		
				      		
				      		return pubreport;
				     }
				     
				      if (queryfield.equals("benchmarkuniquevisitors")) {
				             
				          	 AggregationModule module =  AggregationModule.getInstance();
				        	    try {
				        			module.setUp();
				        		} catch (Exception e1) {
				        			// TODO Auto-generated catch block
				        			e1.printStackTrace();
				        		}
				       		pubreport=module.countbenchmarkfingerprintChannelSection(startdate, enddate, channel_name, sectionid);
				       	

                  for(int i=0;i<pubreport.size();i++){    
    	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
			          pubreport.get(i).setReach(numberFormat.format(count)); 
			       
	           }

				       		
				       		
				       		return pubreport;
				     }
				     
				     
				       if(queryfield.equals("benchmarkengagementTime"))	
				                {
				             	   
				             	   AggregationModule module =  AggregationModule.getInstance();
				               	    try {
				               			module.setUp();
				               		} catch (Exception e1) {
				               			// TODO Auto-generated catch block
				               			e1.printStackTrace();
				               		}
				              		pubreport=module.benchmarkengagementTimeChannelSection(startdate, enddate, channel_name, sectionid);
				              		
				              		
				              		for(int i=0;i<pubreport.size();i++){    
				         	          	  
				  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
				  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
				  			       
				  	           }
				              		
				              		return pubreport;
				           }
				           
				           
				            
					              if(queryfield.equals("benchmarkengagementTimeDatewise"))	
					              {
					           	   
					           	   AggregationModule module =  AggregationModule.getInstance();
					             	    try {
					             			module.setUp();
					             		} catch (Exception e1) {
					             			// TODO Auto-generated catch block
					             			e1.printStackTrace();
					             		}
					            		pubreport=module.benchmarkengagementTimeChannelSectionDatewise(startdate, enddate, channel_name, sectionid);
					            		
					            		for(int i=0;i<pubreport.size();i++){    
					         	          	  
					  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
					  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
					  			       
					  	           }
					            		
					            		
					            		return pubreport;
					              }
				           
				           
				            if(queryfield.equals("benchmarkengagementTimeHourwise"))	
					              {
					           	   
					           	   
					           	   AggregationModule module =  AggregationModule.getInstance();
					          	    try {
					          			module.setUp();
					          		} catch (Exception e1) {
					          			// TODO Auto-generated catch block
					          			e1.printStackTrace();
					          		}
					         		pubreport=module.benchmarkengagementTimeChannelSectionDateHourwise(startdate, enddate, channel_name, sectionid);
					         		
					         		for(int i=0;i<pubreport.size();i++){    
					     	          	  
								          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
								          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
								       
						           }
					         		
					         		
					         		
					         		return pubreport;
					              
				           }
				           
				           
				           
				           
				           
				           
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				
				  if(queryfield.equals("visitorType")) { 
				    
				    
					  pubreport1.clear();
				      List<PublisherReport> pubreport2 = new ArrayList<PublisherReport>();
				      List<PublisherReport> pubreport3 = new ArrayList<PublisherReport>();
				       
					  
					  
				    	  AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
						pubreport1=module.countUsersChannelSectionDatewise(startdate, enddate, channel_name, sectionid,filter);
						
						
						
						  total = 0.0;
					      share =0.0;
					      maxTotal = 0.0; 
					      scaledshare = 0.0;
					      
					        for(int i=0;i<pubreport1.size();i++){
					      	  
					      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      		  total=total+Double.parseDouble(pubreport1.get(i).getCount());
					           
					              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					            
					             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					      	  
					      		 if(Double.parseDouble(pubreport1.get(i).getCount())> maxTotal)
					   	    	    {
					   	    	    	maxTotal = Double.parseDouble(pubreport1.get(i).getCount());
			 	    	    }
					        }
					                 
					         for(int i=0;i<pubreport1.size();i++){
					      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/total)*100,2);
					      	        
					      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					      	      
					      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/maxTotal)*100,2);
					      	        	 
					      	        	pubreport1.get(i).setScaledShare(scaledshare.toString());	      	
					      	  pubreport1.get(i).setShare(share.toString());
					      	  
					        }
						
					         for(int i=0;i<pubreport1.size();i++){    
				   	          	  
						          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
						          pubreport1.get(i).setCount(numberFormat.format(count)); 
						       
				           }
						
						
						return pubreport1;
				    }
				    
				    
				  
				    if (queryfield.equals("totalViews")) {
				        
				   	 AggregationModule module =  AggregationModule.getInstance();
				 	    try {
				 			module.setUp();
				 		} catch (Exception e1) {
				 			// TODO Auto-generated catch block
				 			e1.printStackTrace();
				 		}
						pubreport=module.counttotalvisitorsChannelSection(startdate, enddate, channel_name, sectionid);
						
						for(int i=0;i<pubreport.size();i++){    
			   	          	  
							 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
							 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
					       
			           }
						
						
						return pubreport;
				   }
				    
				    if(queryfield.equals("engagementTime"))	
			        {
				    	AggregationModule module =  AggregationModule.getInstance();
				 	    try {
				 			module.setUp();
				 		} catch (Exception e1) {
				 			// TODO Auto-generated catch block
				 			e1.printStackTrace();
				 		}
						pubreport=module.engagementTimeChannelSection(startdate, enddate, channel_name, sectionid);
						
						

                       for(int i=0;i<pubreport.size();i++){    
   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
			       
	           }
						
						
						return pubreport;
			        
			        }
			        	
			        	
			        if(queryfield.equals("minutesVisitor"))	
			        {
			        	
			        /*
			        	
			        	pubreport.clear();
			        	PublisherReport obj1 = new PublisherReport();
			        	Random random = new Random();	
			            Integer randomNumber = random.nextInt(10) + 1;
			           String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
			            obj1.setSection(sectionid);
			            obj1.setMinutesperVisitor(randomNumber.toString());
			        	pubreport.add(obj1);
			            return pubreport;
			         */
			        
			        	   pubreport.clear();
			        	   PublisherReport obj1 = new PublisherReport();
			        	   
			        	   AggregationModule module =  AggregationModule.getInstance();
			         	    
			        	   List<PublisherReport> pubreport1a = new ArrayList();
			        	   List<PublisherReport> pubreport2 = new ArrayList();
			        	   Double minutesVisitor = 0.0;
			         	   
			        	   try {
			         			module.setUp();
			         		} catch (Exception e1) {
			         			// TODO Auto-generated catch block
			         			e1.printStackTrace();
			         		}
			        		pubreport1a=module.engagementTimeChannelSection(startdate, enddate, channel_name,sectionid);
			        		
			        		 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								{
						    	
			        			 pubreport2=module.counttotalvisitorsChannelSection(startdate, enddate, channel_name,sectionid); 
			        			 minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getTotalvisits()),2);
								}
								
						   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								{
									
									pubreport2 = module.countfingerprintChannelSection(startdate, enddate, channel_name,sectionid);
									minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getReach()),2);
								}	
			        		
						   String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
							
						   
						   obj1.setSection(sectionid);
						   obj1.setMinutesperVisitor(MinutestoSecond(minutesVisitor.toString()));
						   pubreport.add(obj1);
			        	
			        
						   return pubreport;
			        
			        }
				    
				    
				    
				    
				    if (queryfield.equals("totalViewsDatewise")) {
				        
					   	 AggregationModule module =  AggregationModule.getInstance();
					 	    try {
					 			module.setUp();
					 		} catch (Exception e1) {
					 			// TODO Auto-generated catch block
					 			e1.printStackTrace();
					 		}
							pubreport=module.counttotalvisitorsChannelSectionDatewise(startdate, enddate, channel_name, sectionid);
							
							for(int i=0;i<pubreport.size();i++){    
				   	          	  
								 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
								 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
						       
				           }

							
							
							return pubreport;
					   }
					    
				    
				    if (queryfield.equals("totalViewsHourwise")) {
				        
					   	 AggregationModule module =  AggregationModule.getInstance();
					 	    try {
					 			module.setUp();
					 		} catch (Exception e1) {
					 			// TODO Auto-generated catch block
					 			e1.printStackTrace();
					 		}
							pubreport=module.counttotalvisitorsChannelSectionDateHourwise(startdate, enddate, channel_name, sectionid);
							
							for(int i=0;i<pubreport.size();i++){    
								
								  Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
								  pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
						       
				           }

							
							
							return pubreport;
					   }
					    
				    
				    
				    if (queryfield.equals("uniqueVisitors")) {
				        
				      	 AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				   		pubreport=module.countfingerprintChannelSection(startdate, enddate, channel_name, sectionid);
				   		
				   		for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
					          pubreport.get(i).setReach(numberFormat.format(count)); 
					       
			           }

				   		
				   		return pubreport; 
				      }
				    
					
				    if (queryfield.equals("uniqueVisitorsDatewise")) {
				        
				      	 AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				   		pubreport=module.countfingerprintChannelSectionDatewise(startdate, enddate, channel_name, sectionid);
				   		
				   		for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
					          pubreport.get(i).setReach(numberFormat.format(count)); 
					       
			           }

				   		
				   		
				   		return pubreport;
				      }
				    
				    
				    
				    if (queryfield.equals("uniqueVisitorsHourwise")) {
				        
				      	 AggregationModule module =  AggregationModule.getInstance();
				    	    try {
				    			module.setUp();
				    		} catch (Exception e1) {
				    			// TODO Auto-generated catch block
				    			e1.printStackTrace();
				    		}
				   		pubreport=module.countfingerprintChannelSectionDateHourwise(startdate, enddate, channel_name, sectionid);
				   		
				   		
				   		for(int i=0;i<pubreport.size();i++){    
			   	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
					          pubreport.get(i).setReach(numberFormat.format(count)); 
					       
			           }

				   		
				   		
				   		return pubreport;
				      }
				    
				    
				    
				    
				    if(queryfield.equals("engagementTimeDatewise"))	
			           {
			        	   
			        	   
			        	   AggregationModule module =  AggregationModule.getInstance();
			       	    try {
			       			module.setUp();
			       		} catch (Exception e1) {
			       			// TODO Auto-generated catch block
			       			e1.printStackTrace();
			       		}
			      		pubreport=module.engagementTimeChannelSectionDatewise(startdate, enddate, channel_name, sectionid);
			      		

                      for(int i=0;i<pubreport.size();i++){    
   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
			       
	           }
			      		
			      		
			      		return pubreport;
			           
			           }
			            
				    

				    if(queryfield.equals("engagementTimeHourwise"))	
			           {
			        	   
			        	   
			        	   AggregationModule module =  AggregationModule.getInstance();
			       	    try {
			       			module.setUp();
			       		} catch (Exception e1) {
			       			// TODO Auto-generated catch block
			       			e1.printStackTrace();
			       		}
			      		pubreport=module.engagementTimeChannelSectionDateHourwise(startdate, enddate, channel_name, sectionid);
			      		
			      		

                      for(int i=0;i<pubreport.size();i++){    
   	          	  
			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
			       
	           }
			      		
			      		
			      		return pubreport;
			           
			           }
			            
				    
				    
				    /*
				    
			           if (queryfield.equals("reforiginal")) {

			        	   String data0= null;
			               String data1= null;  
			               String data2= null;
			               String data3 = null;
			               String data4 = null;
			               String data5 = null;
			        	   pubreport.clear();
			        	   
			        	   PublisherReport obj = new PublisherReport();

							
							data0 = "http://m.facebook.com";
							data1 = "3026.0";
						    data2 = "Social";
						    data3 = "305";
						    data4 = "110";
						    data5 = "facebook.com";
						
						    obj.setReferrerMasterDomain(data0);
							
							obj.setReferrerType(data2);
						    obj.setShares(data3);
						    obj.setLikes(data4);
						    
						    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								{
						    	
						    	 obj.setCount(data1);
								  
								}
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								{
									
									obj.setEngagementTime(data1);
								}
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								{
									
									obj.setVisitorCount(data1);
							
								}	    
						    
						    

				        PublisherReport obj1 = new PublisherReport();
							
						    data0 = "http://www.facebook.com";
							data1 = "1001.0";
						    data2 = "Social";
						    data3=  "207";
						    data4 = "53";
					        data5 = "facebook.com";
						
					        obj1.setReferrerMasterDomain(data0);
							
							obj1.setReferrerType(data2);
						    obj1.setShares(data3);
						    obj1.setLikes(data4);
						    
						    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								{
						    	
						    	 obj1.setCount(data1);
								  
								}
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								{
									
									obj1.setEngagementTime(data1);
								}
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								{
									
									obj1.setVisitorCount(data1);
							
								}	
					        
					        
					        
					        
					        PublisherReport obj2 = new PublisherReport();
						
							data0 = "http://l.facebook.com";
						  	data1 = "360.0";
						    data2 = "Social";
						    data3 = "103";
						    data4 = "12";
					        data5 = "facebook.com";
						
					        
					        obj2.setReferrerMasterDomain(data0);
							
							obj2.setReferrerType(data2);
						    obj2.setShares(data3);
						    obj2.setLikes(data4);
						    
						    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								{
						    	
						    	 obj2.setCount(data1);
								  
								}
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								{
									
									obj2.setEngagementTime(data1);
								}
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								{
									
									obj2.setVisitorCount(data1);
							
								}	
					        
					        
					        
					   PublisherReport obj3 = new PublisherReport();
							data0 = "http://www.google.co.pk";
							data1 = "396.0";
						    data2 = "Search";
						    data3 = "0";
						    data4 = "0";
						    data5 = "google.com";
						
						    obj3.setReferrerMasterDomain(data0);
							
							obj3.setReferrerType(data2);
						    obj3.setShares(data3);
						    obj3.setLikes(data4);
						    
						    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								{
						    	
						    	 obj3.setCount(data1);
								  
								}
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								{
									
									obj3.setEngagementTime(data1);
								}
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								{
									
									obj3.setVisitorCount(data1);
							
								}	   
					
						
					   PublisherReport obj4 = new PublisherReport();	    
							data0 = "http://www.google.co.in";
							data1 = "2871.0";
						    data2 = "Search";
						    data3 = "0";
						    data4 = "0";
						    data5 = "google.com";
						
						
		                obj4.setReferrerMasterDomain(data0);
						
						obj4.setReferrerType(data2);
					    obj4.setShares(data3);
					    obj4.setLikes(data4);
					    
					    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							{
					    	
					    	 obj4.setCount(data1);
							  
							}
							if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							{
								
								obj4.setEngagementTime(data1);
							}
							if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							{
								
								obj4.setVisitorCount(data1);
						
							}	
					
						
							PublisherReport obj5 = new PublisherReport();

							
						//	data0 = "http://m.facebook.com";
							data1 = "4387.0";
						    data2 = "Social";
						    data3 = "615";
						    data4 = "175";
						    data0 = "facebook.com";
							
						    obj5.setReferrerMasterDomain(data0);
							
							obj5.setReferrerType(data2);
						    obj5.setShares(data3);
						    obj5.setLikes(data4);
						    
						    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								{
						    	
						    	 obj5.setCount(data1);
								  
								}
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								{
									
									obj5.setEngagementTime(data1);
								}
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								{
									
									obj5.setVisitorCount(data1);
							
								}	
						
						    
						    PublisherReport obj6 = new PublisherReport();

							
						   // data0 = "http://www.google.co.in";
							data1 = "3267.0";
						    data2 = "Search";
						    data3 = "0";
						    data4 = "0";
						    data0 = "google.com";
						
		                    obj6.setReferrerMasterDomain(data0);
							
							obj6.setReferrerType(data2);
						    obj6.setShares(data3);
						    obj6.setLikes(data4);
						    
						    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								{
						    	
						    	 obj6.setCount(data1);
								  
								}
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								{
									
									obj6.setEngagementTime(data1);
								}
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								{
									
									obj6.setVisitorCount(data1);
							
								}	
							
						    
						String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);
						obj.setChannelName(channel_name1);
						obj1.setChannelName(channel_name1);
						obj2.setChannelName(channel_name1);
						obj3.setChannelName(channel_name1);
						obj4.setChannelName(channel_name1);
						obj5.setChannelName(channel_name1);
						obj6.setChannelName(channel_name1);
						obj1.setSection(sectionid);
						obj2.setSection(sectionid);	
						obj3.setSection(sectionid);
						obj4.setSection(sectionid);
						obj5.setSection(sectionid);
						obj6.setSection(sectionid);
						
						obj5.getChildren().add(obj);
						obj5.getChildren().add(obj1);
						obj5.getChildren().add(obj2);
						
						obj6.getChildren().add(obj3);
						obj6.getChildren().add(obj4);
						
						
						
						pubreport.add(obj5);

						pubreport.add(obj6);
					}
			    */
			          /* 
			           
			           if (queryfield.equals("device")) {

			        	   String data0= null;
			               String data1= null;   
			        	   pubreport.clear();
			        	   
			        	   for (int i = 0; i < 3; i++)
						      {
						        PublisherReport obj = new PublisherReport();
						        
						        
						       
						          //if(data1[0].equals()) 
						         
						          if(i == 0){
						          data0="Mobile";
						          data1 = "1067.0";
						          }
						          

						          if(i == 1){
						          data0="Tablet";
						          data1 = "305.0";
						          }
						          
						          
						          if(i == 2){
							          data0="Desktop";
							          data1 = "743.0";
							      }
							    
						        
						          obj.setDevice_type(data0);
						          obj.setCount(data1);
						          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);			        
						          obj.setSection(sectionid);
						          pubreport.add(obj);
						        
						   //   }
						    //  System.out.println(headers1);
						    //  System.out.println(lines1);
						   }
			    
			           }
			    
			           if (queryfield.equals("incomelevel")) {

			        	   String data0= null;
			               String data1= null;   
			        	   pubreport.clear();
			           
			           for (int i = 0; i < 3; i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					       // String[] data1 = ((String)lines1.get(i)).split(",");
					       
					          //if(data1[0].equals()) 
					         
					          if(i == 0){
					          data0="Medium";
					          data1 = "700.0";
					          }
					          

					          if(i == 1){
					          data0="High";
					          data1 = "904.0";
					          }
					          
					          
					          if(i == 2){
						          data0="Low";
						          data1 = "67.0";
						      }
						    
					        
					          obj.setIncomelevel(data0);
					          obj.setCount(data1);
					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					          obj.setSection(sectionid);
					          pubreport.add(obj);
					        
					   //   }
					    //  System.out.println(headers1);
					    //  System.out.println(lines1);
					      }
			           }
			         
			           */
			           
			         
				    /*
				    if (queryfield.equals("referrerType")) {

			        	   String data0= null;
			               String data1= null;   
			        	   pubreport.clear();
			           
			           for (int i = 0; i < 3; i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					       // String[] data1 = ((String)lines1.get(i)).split(",");
					       
					          //if(data1[0].equals()) 
					         
					          if(i == 0){
					          data0="Social";
					          data1 = "806.0";
					          }
					          

					          if(i == 1){
					          data0="Search";
					          data1 = "1077.0";
					          }
					          
					          
					          if(i == 2){
						          data0="Direct";
						          data1 = "115.0";
						      }
						    
					        
					          obj.setReferrerSource(data0);
					          if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(data1);
									if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									obj.setEngagementTime(data1);
									if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									obj.setVisitorCount(data1);
					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					          obj.setSection(sectionid);
					          pubreport.add(obj);
					        
					   //   }
					    //  System.out.println(headers1);
					    //  System.out.println(lines1);
					      }
			           }       
				    */
			
				    
				    
				    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews")){
        			    
				        Collections.sort(pubreport, new Comparator<PublisherReport>() {
				  			
				  			@Override
				  	        public int compare(PublisherReport o1, PublisherReport o2) {
				  				return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
				  	        }
				  	    });	
				  	    
				  	    }
				  	    
				  	    if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") ){
				  	    	


					        Collections.sort(pubreport, new Comparator<PublisherReport>() {
					  			
					  			@Override
					  	        public int compare(PublisherReport o1, PublisherReport o2) {
					  				return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
					  	        }
					  	    });	
				  	    	
				  	    }
				  	    
				  	    if(filter != null && !filter.isEmpty() && filter.equals("visitorCount") ){
				  	    	

					        Collections.sort(pubreport, new Comparator<PublisherReport>() {
					  			
					  			@Override
					  	        public int compare(PublisherReport o1, PublisherReport o2) {
					  				return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
					  	        }
					  	    });	
				  	    	
				  	    	
				  	    }
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    
				    if(queryfield.equals("gender"))
			           {   
			        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
						        }
						    });	
			          
			           }        
			           
			           
			           
			           if(queryfield.equals("agegroup"))
			           {   
			        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  o1.getAge().compareTo(o2.getAge());
						        }
						    });	
			          
			           }     
			           
			           if(queryfield.equals("incomelevel"))
			           {   
			        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
						        }
						    });	
			          
			           }                
				           
			           for(int i=0;i<pubreport.size();i++){    
			 	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }           
				           
			           
				    return pubreport;
				  }
				  
				 
		  public List<PublisherReport> getQueryFieldChannelSectionFilter(String queryfield,String startdate, String enddate, String channel_name, String sectionname, Map<String,String>filter, String filtermetric)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    
			  
			  

			  
			  if (queryfield.equals("Author")) {
		          queryfield =  "authorName";
			} 

				  
				if (queryfield.equals("reforiginal")) {
		          queryfield =  "sourceUrl";
			} 
			  
			  
			  
			        int size = filter.size();
			        String queryfilterbuilder = "";
			        String formattedString = "";
			        int j =0;
			        for (Map.Entry<String, String> entry : filter.entrySet())
			        {
			        	if (j==0){
			                formattedString = addCommaString(entry.getValue());
			        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
			        	
			        	}
			            else{
			            formattedString = addCommaString(entry.getValue());	
			            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
			       
			            }
			            j++;
			         
			        }
			  

			        if(queryfield.equals("visitorType")){
					    
				    	
					       
					       List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
					       List<PublisherReport> pubreport3 = new ArrayList<PublisherReport>();
					    	

					    	  AggregationModule module =  AggregationModule.getInstance();
					    	    try {
					    			module.setUp();
					    		} catch (Exception e1) {
					    			// TODO Auto-generated catch block
					    			e1.printStackTrace();
					    		}
					    	
					    	
							pubreport1=module.countUsersChannelArticleDatewiseFilter(startdate, enddate, channel_name, sectionname, filtermetric, queryfilterbuilder);
					   
					    
					    
					    	 
							
					       
					 		
					       Double total = 0.0;
					       Double share =0.0;
					       Double maxTotal = 0.0; 
					       Double scaledshare = 0.0;
					        
					        for(int i=0;i<pubreport1.size();i++){
					      	  
					      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      		  total=total+Double.parseDouble(pubreport1.get(i).getCount());
					           
					              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					            
					             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					      		 if(Double.parseDouble(pubreport1.get(i).getCount())> maxTotal)
					   	    	    {
					   	    	    	maxTotal = Double.parseDouble(pubreport1.get(i).getCount());
				    	    }
				    	    
					      	  
					        }
					                 
					         for(int i=0;i<pubreport1.size();i++){
					      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/total)*100,2);
					      	        
					      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					      	      
					      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1.get(i).getCount())/maxTotal)*100,2);
					      	        	 
					      	        	pubreport1.get(i).setScaledShare(scaledshare.toString());
					      	  
					      	        	pubreport1.get(i).setShare(share.toString());
					      	  
					        }
					        
					        
					        

			           		for(int i=0;i<pubreport1.size();i++){    
			    	          	  
						          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
						          pubreport1.get(i).setCount(numberFormat.format(count)); 
						       
				           } 
					        
					        
					        return pubreport1;
					 		
					    }   
			        
			        
			        if(queryfield.equals("refcurrentoriginal"))
				    {

				    	    List<PublisherReport> pubreport1 = new ArrayList();
						 
						    ExecutorService executorService = Executors.newFixedThreadPool(2000);
					        
					        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
					    
					        List<String> Query = new ArrayList();
					     
					        queryfield = "refcurrentoriginal";
					       
							String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
							    
								
						    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+" LIMIT 60";
								
								
						    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+" LIMIT 60";  
					       
						    
						    Query.add(query1);
					        Query.add(query2);
						    Query.add(query3);
					       
					       for( j=0 ; j < Query.size(); j++ ){
					       lst.add(new CombinedDataQueryExecutionThreads(Query.get(j),client,searchDao));
					    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
					       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
					       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
					       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
					        
					       // returns a list of Futures holding their status and results when all complete
					    
					   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
					       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
					       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
					       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
					       }
					       
					       
					       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
						

						    for (int k = 0; k < maps.size(); k++)
						    {
						    
						    	if(maps!=null && maps.get(k)!=null){
						        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
						        pubreport1.addAll(map);
						    	}
						
				    }
					
						 
						    
						    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
						    
						    List<PublisherReport> object = new ArrayList<PublisherReport>();
						    
						    
						    for(int k=0; k< pubreport1.size(); k++)
						    {
					         try{ 
						    	String page = pubreport1.get(k).getPublisher_pages();
						    	
						    	  String count =  pubreport1.get(k).getCount();
					        		
							        String engagementTime =  pubreport1.get(k).getEngagementTime();		
							        
							        String visitorCount = pubreport1.get(k).getVisitorCount();
						    	
						    	if(aggregatedmap.containsKey(page))
					        {
					       
					        PublisherReport obj = aggregatedmap.get(page);
					        obj.setPublisher_pages(page);
					        
					      
					        
					        if(count!=null)
					        obj.setCount(count);
					        	
					        if(engagementTime!=null) 	
					        	obj.setEngagementTime(engagementTime);
					        	
					       if(visitorCount!=null) 	
					        	obj.setVisitorCount(visitorCount);
					        
						   
					       if(page !=null) 	
					    	   obj.setPublisher_pages(page);
					  	
					       
					       
						    aggregatedmap.put(page, obj);
						    
					        }
					        else{
					        	       
					        	        PublisherReport obj = new PublisherReport();
					        	     
					        	        if(count !=null)
					        	        obj.setCount(count);
					        	        	
					        	        if(engagementTime !=null) 	
					        	        obj.setEngagementTime(engagementTime);
					        	        	
					        	       if(visitorCount !=null) 	
					        	        obj.setVisitorCount(visitorCount);
					        	
					        	       if(page!=null) {	
					        	    	obj.setPublisher_pages(page);
					        	    	String url = page;
					        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
					        	      
					        	    	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}if(article.getSectionid() != null && !article.getSectionid().isEmpty()){ String sectionId = article.getSectionid();obj.setSection(AggregationModule.sectionMap.get(sectionId));}
					 		        	
					        	       
					        	       
					        	       }
					        	       aggregatedmap.put(page, obj);
					        
					        
					        }
					         }
					         catch(Exception e){
					        	 continue;
					         }
					      
						    }
						    
						    int l = 0;
						    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
						    
						    	//l++;
						    	//if(l==30)
						    		//break;
						    	try{
						    	String key = entry.getKey();
						        PublisherReport obj = entry.getValue();

				                Double averageTime = 0.0;
						        
						        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
						        averageTime= NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getCount()),2);
				    	        
						        
						        if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
						        averageTime= NestedJSON5.round(Double.parseDouble(obj.getEngagementTime())/Double.parseDouble(obj.getVisitorCount()),2);
						        
						        
						        obj.setAverageTime(MinutestoSecond(averageTime.toString()));
						        
						        
						        String url = obj.getPublisher_pages();
						        String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
					        	
						        
						        
						        object.add(obj); 
						      }
						      catch(Exception e){
						    	  continue;
						      }
						    
						    }
						    
						    if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews")){
							    
					            Collections.sort(object, new Comparator<PublisherReport>() {
					 				
					 				@Override
					 		        public int compare(PublisherReport o1, PublisherReport o2) {
					 					return Double.parseDouble(o1.getCount()) > Double.parseDouble(o2.getCount()) ? -1 : (Double.parseDouble(o1.getCount()) < Double.parseDouble(o2.getCount())) ? 1 : 0;
					 		        }
					 		    });	
							    
							    }
							    
							    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") ){
							    	

						            Collections.sort(object, new Comparator<PublisherReport>() {
						 				
						 				@Override
						 		        public int compare(PublisherReport o1, PublisherReport o2) {
						 					return Double.parseDouble(o1.getEngagementTime()) > Double.parseDouble(o2.getEngagementTime()) ? -1 : (Double.parseDouble(o1.getEngagementTime()) < Double.parseDouble(o2.getEngagementTime())) ? 1 : 0;
						 		        }
						 		    });	
							    	
							    	
							    }
							    
							    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount") ){
							    	
					                    Collections.sort(object, new Comparator<PublisherReport>() {
						 				
						 				@Override
						 		        public int compare(PublisherReport o1, PublisherReport o2) {
						 					return Double.parseDouble(o1.getVisitorCount()) > Double.parseDouble(o2.getVisitorCount()) ? -1 : (Double.parseDouble(o1.getVisitorCount()) < Double.parseDouble(o2.getVisitorCount())) ? 1 : 0;
						 		        }
						 		    });	
							    	
							    	
							    }
							    
							    
							    
							    
							    
							    executorService.shutdown();
							 
							    
							    
					            
						  

							    		  
							    		  
							      
							      
							 
							         for(int i=0;i<object.size();i++){    
							        	   
							        	   Integer visitorCount = (int) (Double.parseDouble(object.get(i).getVisitorCount()));
									         object.get(i).setVisitorCount(numberFormat.format(visitorCount)); 
									       Integer count = (int) (Double.parseDouble(object.get(i).getCount()));
									          object.get(i).setCount(numberFormat.format(count)); 
									       Integer engagementTime = (int) (Double.parseDouble(object.get(i).getEngagementTime()));
									          object.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
							           }        
							         
							         
						    return object;		
						    
						    
						    
						    
						    
						    
						    
						    
						    
						    
						    
						    
						   
				    }
				  
				  
			        
			        
			        
			        
			        
			        
			        
			        
			        
			        
			        
			        
			        String query = "";
			  
			        if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
			        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			        if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
			        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			        if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("visitorCount"))
				    query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+"";
			        
			        
			        System.out.println(query);
			        CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    
				 //   if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
				       // lines = processList(lines);
				    
				    
				    
				    
				    //System.out.println(headers);
				    //System.out.println(lines);
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        try{
				    	  
				    	  PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				     //   String demographicproperties = demographicmap.get(data[0]);
				            if(queryfield.equals("gender")){
				            	String genderId = GenderMap1.get(data[0]);
				        		obj.setGenderId(genderId);
				            	
				            	obj.setGender(capitalizeString(data[0]));
				            }
				            if(queryfield.equals("device")){
				        	
				            	String deviceId = deviceMap1.get(data[0]);
				        		obj.setDeviceId(deviceId);	
				            	obj.setDevice_type(capitalizeString(data[0]));
				            }
				        	if(queryfield.equals("city")){
				        	    try{
				        		String locationproperties = citycodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-"," ");
						        data[0] = capitalizeString(data[0]);
						        obj.setCity(capitalizeString(data[0]));
						        System.out.println(data[0]);
						        obj.setLocationcode(locationproperties);
				        	    }
				        	    catch(Exception e)
				        	    {
				        	    	continue;
				        	    }
				        	    
				        	    }
				        	if(queryfield.equals("audience_segment"))
				             {
				        		String audienceSegment = audienceSegmentMap.get(data[0]);
				        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
				        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				        		obj.setAudience_segment(audienceSegment);
				        		obj.setAudienceSegmentCode(audienceSegmentCode);
				        		}
				        		else
				        	    obj.setAudience_segment(data[0]);
				        		
				             }
				        	
				        	if(queryfield.equals("reforiginal"))
					             obj.setReferrerSource(data[0]);
				            	
				        	if(queryfield.equals("agegroup"))
				        	{
				        		
				        		String ageId = AgeMap1.get(data[0]);
				        		obj.setAgeId(ageId);
				        		
				        		 data[0]=data[0].replace("_","-");
				        		 data[0]=data[0]+ " Years";
				        		 if(data[0].contains("medium")==false)
				        		 obj.setAge(data[0]);
				        	}
				            	
				            	
				        	if(queryfield.equals("incomelevel")){
					         
				        		String incomelevelId = IncomeMap1.get(data[0]);
				        		obj.setIncomeId(incomelevelId);
				        		obj.setIncomelevel(capitalizeString(data[0]));
				        	}
				        	
				        	
				        	if(queryfield.equals("referrerType")){
						         
				        		String referrerTypeId = referrerTypeMap1.get(data[0]);
				        		obj.setReferrerTypeId(referrerTypeId);
				        		obj.setReferrerSource(data[0]);	            	
				        	}
				        	
				        		
				        	 if(queryfield.equals("tag")){
					        		
					        		
					            	if(data[0].toLowerCase().equals("hindibollywood"))	
						        		 data[0]="Bollywood";
						        	 
						        	 if(data[0].toLowerCase().equals("womenlifestyle"))	
						        		 data[0]="Women's Fashion";
						        	        
						        	 
						        	 if(data[0].toLowerCase().equals("hindimusic"))	
						        		 data[0]="Hindi Music";
						        	 
						        	 if(data[0].toLowerCase().equals("healthfitness"))	
						        		 data[0]="Health & Fitness";
						        	 
						        	 if(data[0].toLowerCase().equals("englishhollywood"))	
						        		 data[0]="Hollywood";
						        	 
						        	 if(data[0].toLowerCase().contains("technews"))	
						        		 data[0]="Technology News";
						        	 
						        	 if(data[0].toLowerCase().contains("mcdonald"))	
						        		 data[0]="Fast Food";
						        	 
						        	 if(data[0].toLowerCase().contains("international"))	
						        		 data[0]="International News";
						                  	
					            	
					            	obj.setArticleTags(data[0]);
					            	if(AggregationModule.tagMap3.get(data[0])!=null){
					               	 String tagId = AggregationModule.tagMap3.get(data[0]);
					   	        	 obj.setTagId(tagId);
					               	 }
					            
					            
					            }
				        	
				        	
				        	
				        	if(queryfield.equals("sourceUrl")){
					         
				        		String urlId = UrlMap1.get(data[0]);
				        		obj.setUrlId(urlId);
				        		
				        		obj.setReferrerMasterDomain(data[0]);
				        	}
				        	
				        	
				        	
				        	
				        	
				        	
				        	
				        	
				        	
				        	
				        	if(queryfield.equals("system_os")){
				        		String osproperties = oscodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-", " ");
						        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
						        String [] osParts = oscodeMap1.get(osproperties).split(",");
						        obj.setOs(osParts[0]);
						        obj.setOSversion(osParts[1]);
						        obj.setOscode(osproperties);
				        	}
				         	
				        	if(queryfield.equals("modelName")){
				        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
					        	
						        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
						        System.out.println(mobiledeviceproperties[2]);
						        obj.setDevicecode(mobiledeviceproperties[0]);
						        System.out.println(mobiledeviceproperties[0]);
				        	}
				         	
				        	if(queryfield.equals("brandName")){
				        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				        		obj.setBrandname(data[0]);
				        	}
                       
				        	if(queryfield.equals("refcurrentoriginal"))
				  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);if(filter.containsKey("authorName")){String authorName = article.getAuthor();obj.setArticleAuthor(filter.get("authorName"));String authorId = article.getAuthorId();obj.setAuthorId(AuthorMap1.get(filter.get("authorName")));}List<String> tags1 = article.getTags();if(tags1!=null) {obj.setArticleTag(tags1);}if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
				        	

				            Random random = new Random();	
				            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
				            Integer max = (int)Double.parseDouble(data[1]);
				            Integer randomNumber1 = random.nextInt(max) + 1;
				            
				            if(queryfield.equals("audience_segment"))	
				            {
				            obj.setCount(data[1]); 	
				            obj.setExternalWorldCount(randomNumber.toString());	
				            obj.setVisitorCount(randomNumber1.toString());
				            obj.setAverageTime("0.0");	

					        obj.setSection(sectionname);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        pubreport.add(obj);
				            }
				            
				            else if(queryfield.equals("agegroup")==true) {
				            	
				            	if(data[0].contains("medium")==false){
				            	//	if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
						            	obj.setCount(data[1]);
						            
						             //   if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
						             //   obj.setEngagementTime(data[1]);
						           
						              //  if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
						              //  obj.setVisitorCount(data[1]);

							         obj.setSection(sectionname);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        pubreport.add(obj);
				            	}
				            }
				            
                             else if(queryfield.equals("refcurrentoriginal")==true) {
				            	
                    	        obj.setCount(data[1]);
                    	        Random randomv1 = new Random();	
    				            Integer randomNumberv1 = random.nextInt(1000 + 1 - 500) + 500;
    				            Integer maxv1 = (int)Double.parseDouble(data[1]);
    				            Integer randomNumber2 = random.nextInt(maxv1) + 1;
    				            Integer randomNumber3 = random.nextInt(maxv1) + 1;
    				            Integer value = (Integer)(randomNumber2/randomNumber3) + 1;
    				            obj.setAverageTime(value.toString());
    				            obj.setEngagementTime(randomNumber2.toString());
    				            obj.setVisitorCount(randomNumber3.toString());
                    	        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						       
						        pubreport.add(obj);
			            	}
				            else{
				            
				            	
				            	
				            	
				            	 if(queryfield.equals("sourceUrl") || queryfield.equals("referrerType")){
			       	            	 
			       	            	 if(data[0].contains("Social")){
			       	           			obj.setLikes("45");
			       	           		    obj.setShares("10");
			       	           		}		
			       	            	 
			       	            	 else if(data[0].contains("facebook")){
			       	            		 
			       	            		 obj.setLikes("45");
			        	           		     obj.setShares("10");
			       	            	 }
			       	            	 
			       	            	 
			       	            	  else{	
			       	           			
			       	           			obj.setLikes("0");
			       	           			obj.setShares("0");
			       	           			
			       	           		}		 
			       	            	 
			       	             }
				        	        
				            	
				            	
				            	
				            	
				            	
				            	
				            	
				            	
				            	
				            	
				            	
				            	
				            	//	if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
					            	obj.setCount(data[1]);
					            
					            //    if(filtermetric != null && !filtermetric.isEmpty() && filtermetric.equals("engagementTime") )
					            //    obj.setEngagementTime(data[1]);
					           
					             //   if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
					             //   obj.setVisitorCount(data[1]);

					         obj.setSection(sectionname);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        pubreport.add(obj);
				            
				            }
				       
				        }
				        catch(Exception e){
				        	continue;
				        	
				        }
				        
				        
				        }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    
				    if(queryfield.equals("sourceUrl")){
				    	
			    		
				    	List<PublisherReport> pubreporta1 = NestedJSON5.getNestedReffererJSON(pubreport,filtermetric);
				    		return pubreporta1;  		
				    		
				    	}
				    
				   Double total = 0.0;
			       Double share =0.0;
			       Double maxTotal = 0.0; 
			       Double scaledshare = 0.0;      
			       
			       
			       for(int i=0;i<pubreport.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      	  
			      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			   	    	    {
			   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	 	    	    }
			        }
			                 
			         for(int i=0;i<pubreport.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
			      	        	 
			      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	 
			      	  
			      	        	pubreport.get(i).setShare(share.toString());
			      	  
			        }
			         

					  
					    
			         
                     
			         
				    
			         if(queryfield.equals("gender"))
			           {   
			        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  (o2.getGender().charAt(1)-o1.getGender().charAt(1));
						        }
						    });	
			          
			           }        
			           
			           
			           
			           if(queryfield.equals("agegroup"))
			           {   
			        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  o1.getAge().compareTo(o2.getAge());
						        }
						    });	
			          
			           }     
			           
			           if(queryfield.equals("incomelevel"))
			           {   
			        	   Collections.sort(pubreport, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  (o1.getIncomelevel().charAt(o1.getIncomelevel().length()-1) - o2.getIncomelevel().charAt(o2.getIncomelevel().length()-1));
						        }
						    });	
			          
			           }                
				           
				         
			           if (queryfield.equals("cityOthers")) {
					        
						  	  AggregationModule module =  AggregationModule.getInstance();
						  	    try {
						  			module.setUp();
						  		} catch (Exception e1) {
						  			// TODO Auto-generated catch block
						  			e1.printStackTrace();
						  		}
								pubreport=module.countCityChannelSectionfilter(startdate, enddate, channel_name,sectionname,filtermetric,queryfilterbuilder);
								  total = 0.0;
							        share =0.0;
							       maxTotal = 0.0; 
							       scaledshare = 0.0;
							        
							        for(int i=0;i<pubreport.size();i++){
							      	  
							      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
							           
							              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
							            
							             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
							      	  
							      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
				 	    	    }
							        }
							                 
							         for(int i=0;i<pubreport.size();i++){
							      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
							      	        
							      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
							      	      
							      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
							      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
							      	        	 
							      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	        	 

							      	  pubreport.get(i).setShare(share.toString());
							      	  
							        }
								
							         for(int i=0;i<pubreport.size();i++){    
					  	              	  
					  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
					  	      	       
					  	           } 
								
								return pubreport;
						  }
					    
						 if (queryfield.equals("stateOthers")) {
						        
						  	  AggregationModule module =  AggregationModule.getInstance();
						  	    try {
						  			module.setUp();
						  		} catch (Exception e1) {
						  			// TODO Auto-generated catch block
						  			e1.printStackTrace();
						  		}
								pubreport=module.countStateChannelSectionfilter(startdate, enddate, channel_name, sectionname, filtermetric,queryfilterbuilder);
							
								  total = 0.0;
							        share =0.0;
							        maxTotal = 0.0; 
							       scaledshare = 0.0;
							        
							        
							        for(int i=0;i<pubreport.size();i++){
							      	  
							      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
							           
							              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
							            
							             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
							      		 if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
							   	    	    {
							   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
					 	    	    }
					 	    	    
							      	  
							        }
							                 
							         for(int i=0;i<pubreport.size();i++){
							      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
							      	        
							      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
							      	      
							      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
							      	    	    
							      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
							      	        	 
							      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
							      	  pubreport.get(i).setShare(share.toString());
							      	  
							        }
								
								
							         for(int i=0;i<pubreport.size();i++){    
					  	              	  
					  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
					  	      	       
					  	           } 
								
								
								return pubreport;
						  }
					    
						 if (queryfield.equals("countryOthers")) {
						        
						  	  AggregationModule module =  AggregationModule.getInstance();
						  	    try {
						  			module.setUp();
						  		} catch (Exception e1) {
						  			// TODO Auto-generated catch block
						  			e1.printStackTrace();
						  		}
								pubreport=module.countCountryChannelSectionfilter(startdate, enddate, channel_name, sectionname, filtermetric,queryfilterbuilder);
							
								  total = 0.0;
							        share =0.0;
							        maxTotal = 0.0; 
							        scaledshare = 0.0;
							        
							        for(int i=0;i<pubreport.size();i++){
							      	  
							      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							      		  total=total+Double.parseDouble(pubreport.get(i).getCount());
							           
							              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
							            
							             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
							      		  if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
							   	    	    {
							   	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
					 	    	    }
							      	  
							        }
							                 
							         for(int i=0;i<pubreport.size();i++){
							      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
							      	        
							      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
							      	      
							      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
							      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
							      	        	 
							      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	
							      	  pubreport.get(i).setShare(share.toString());
							      	  
							        }
								
								
							              
							           for(int i=0;i<pubreport.size();i++){    
						  	              	  
						  	      	          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
						  	      	          pubreport.get(i).setCount(numberFormat.format(count)); 
						  	      	       
						  	           } 
							           
								
								return pubreport;
						  }
					    
					
						 
						 if(queryfield.equals("visitorType")){
					  			
					  	        List<PublisherReport> pubreport1a  = new ArrayList<PublisherReport>();
					  	        List<PublisherReport> pubreport2  = new ArrayList<PublisherReport>();
					  	        List<PublisherReport> pubreport3  = new ArrayList<PublisherReport>();
					  	        
					  		   
					  	    	AggregationModule module =  AggregationModule.getInstance();
					  	    	    try {
					  	    			module.setUp();
					  	    		} catch (Exception e1) {
					  	    			// TODO Auto-generated catch block
					  	    			e1.printStackTrace();
					  	    		}
					  			
					  	    	pubreport1a=module.countNewUsersChannelSectionDatewiseFilter(startdate, enddate, channel_name,sectionname, filtermetric,queryfilterbuilder); 
					  			
					  	    
					  			pubreport2=module.countReturningUsersChannelSectionDatewiseFilter(startdate, enddate, channel_name,sectionname, filtermetric,queryfilterbuilder); 
					  			
					  	   
					  	 		pubreport3=module.countLoyalUsersChannelSectionDatewiseFilter(startdate, enddate, channel_name, sectionname, filtermetric,queryfilterbuilder);
					  	 		
					  	  
					  	        pubreport1a.addAll(pubreport2);
					  	        pubreport1a.addAll(pubreport3);
					  	   
					  	   
					  	  total = 0.0;
					      share =0.0;
					      maxTotal = 0.0; 
					      scaledshare = 0.0;
					     	                   
					          for(int i=0;i<pubreport1a.size();i++){
					        	  
					        	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        		  total=total+Double.parseDouble(pubreport1a.get(i).getCount());
					             
					                //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					                //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					              
					               //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					               // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					        		  if(Double.parseDouble(pubreport1a.get(i).getCount())> maxTotal)
						   	    	    {
						   	    	    	maxTotal = Double.parseDouble(pubreport1a.get(i).getCount());
					    	    }
					    	      
					        	  
					          }
					                   
					           for(int i=0;i<pubreport1a.size();i++){
					        	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        	        	 share = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/total)*100,2);
					        	        
					        	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					        	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					        	      
					        	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					        	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					        	        	 scaledshare = NestedJSON5.round((Double.parseDouble(pubreport1a.get(i).getCount())/maxTotal)*100,2);
					        	        	 
					        	        	 pubreport1a.get(i).setScaledShare(scaledshare.toString());	
					        	  pubreport1a.get(i).setShare(share.toString());
					        	  
					          }
					  	        
					           for(int i=0;i<pubreport1a.size();i++){    
					              	  
					      	          Integer count = (int) (Double.parseDouble(pubreport1a.get(i).getCount()));
					      	          pubreport1a.get(i).setCount(numberFormat.format(count)); 
					      	       
					           } 
					  	        
					  	        
					  	        return pubreport1a;
					  	   }
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
						 
			           
			           if(queryfield.equals("engagementTime"))	
				        {
					    	 AggregationModule module =  AggregationModule.getInstance();
						  	    try {
						  			module.setUp();
						  		} catch (Exception e1) {
						  			// TODO Auto-generated catch block
						  			e1.printStackTrace();
						  		}
						 		pubreport=module.engagementTimeChannelSectionfilter(startdate, enddate, channel_name, sectionname, queryfilterbuilder);
						        
						 		

			              		for(int i=0;i<pubreport.size();i++){    
			       	          	  
			  			          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			  			          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
			  			       
			  	           } 
						 		
						 		
						 		
						 		return pubreport;
				        
				        }
				        	
				        	
				        if(queryfield.equals("minutesVisitor"))	
				        {
				        	/*  
				        	pubreport.clear();
				        	PublisherReport obj1 = new PublisherReport();
				        	Random random = new Random();	
				            Integer randomNumber = random.nextInt(10) + 1;
				           String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
				            String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj1.setArticleTitle(articleTitle);obj1.setArticle(articlename);
				            obj1.setMinutesperVisitor(randomNumber.toString());
				        	pubreport.add(obj1);
				            return pubreport;
				            */
				        	
				        	
				        	
				        	
				        	   pubreport.clear();
				        	   PublisherReport obj1 = new PublisherReport();
				        	   
				        	   AggregationModule module =  AggregationModule.getInstance();
				         	    
				        	   List<PublisherReport> pubreport1a = new ArrayList();
				        	   List<PublisherReport> pubreport2 = new ArrayList();
				        	   Double minutesVisitor = 0.0;
				         	   
				        	   try {
				         			module.setUp();
				         		} catch (Exception e1) {
				         			// TODO Auto-generated catch block
				         			e1.printStackTrace();
				         		}
				        		pubreport1a=module.engagementTimeChannelSectionfilter(startdate, enddate, channel_name,sectionname,queryfilterbuilder);
				        		
				        		 if(filtermetric == null || filtermetric.isEmpty() ||  filtermetric.equals("pageviews"))
									{
							    	
				        			 pubreport2=module.counttotalvisitorsChannelSectionfilter(startdate, enddate, channel_name,sectionname,queryfilterbuilder); 
				        			 minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getTotalvisits()),2);
									}
									
							   if(filtermetric != null && !filtermetric.isEmpty()  && filtermetric.equals("visitorCount") )
									{
										
										pubreport2 = module.countfingerprintChannelSectionfilter(startdate, enddate, channel_name,sectionname,queryfilterbuilder);
										minutesVisitor = NestedJSON5.round(Double.parseDouble(pubreport1a.get(0).getEngagementTime())/Double.parseDouble(pubreport2.get(0).getReach()),2);
									}	
				        		
							   String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
								
							   obj1.setSection(sectionname);
							   obj1.setMinutesperVisitor(MinutestoSecond(minutesVisitor.toString()));
							   pubreport.add(obj1);
							   return pubreport;	
				        }
					    
					    
					    if (queryfield.equals("totalViews")) {
					        
					   	 AggregationModule module =  AggregationModule.getInstance();
					 	    try {
					 			module.setUp();
					 		} catch (Exception e1) {
					 			// TODO Auto-generated catch block
					 			e1.printStackTrace();
					 		}
							pubreport=module.counttotalvisitorsChannelSectionfilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
					       
							

			          		for(int i=0;i<pubreport.size();i++){    
			   	          	  
			          			 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
			          			pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
						       
				           } 
							
							return pubreport;
					   }
					    
					    
					    
					    if (queryfield.equals("totalViewsDatewise")) {
					        
						   	 AggregationModule module =  AggregationModule.getInstance();
						 	    try {
						 			module.setUp();
						 		} catch (Exception e1) {
						 			// TODO Auto-generated catch block
						 			e1.printStackTrace();
						 		}
								pubreport=module.counttotalvisitorsChannelSectionDatewisefilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
						        
								for(int i=0;i<pubreport.size();i++){    
					   	          	  
									 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
									 pubreport.get(i).setTotalvisits(numberFormat.format(count)); 
							       
					           }
								
								
								return pubreport;
					    }
						
					    
					    if (queryfield.equals("totalViewsHourwise")) {
					        
						   	 AggregationModule module =  AggregationModule.getInstance();
						 	    try {
						 			module.setUp();
						 		} catch (Exception e1) {
						 			// TODO Auto-generated catch block
						 			e1.printStackTrace();
						 		}
								pubreport=module.counttotalvisitorsChannelSectionDateHourwisefilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
						       
								for(int i=0;i<pubreport.size();i++){    
					   	          	  
									 Integer count = (int) (Double.parseDouble(pubreport.get(i).getTotalvisits()));
									 pubreport.get(i).setTotalvisits(numberFormat.format(count));  
							       
					           }
								
								
								
								
								return pubreport;
					    }
					    
					    
						           
					    if (queryfield.equals("uniqueVisitors")) {
					        
					      	 AggregationModule module =  AggregationModule.getInstance();
					    	    try {
					    			module.setUp();
					    		} catch (Exception e1) {
					    			// TODO Auto-generated catch block
					    			e1.printStackTrace();
					    		}
					   		pubreport=module.countfingerprintChannelSectionfilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
					        
					   		
					   		for(int i=0;i<pubreport.size();i++){    
				   	          	  
						          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
						          pubreport.get(i).setReach(numberFormat.format(count)); 
						       
				           }
					   		
					   		
					   		
					   		
					   		
					   		
					   		return pubreport; 
					    } 
					    		    
					           
					    if (queryfield.equals("uniqueVisitorsDatewise")) {
					        
					      	 AggregationModule module =  AggregationModule.getInstance();
					    	    try {
					    			module.setUp();
					    		} catch (Exception e1) {
					    			// TODO Auto-generated catch block
					    			e1.printStackTrace();
					    		}
					   		pubreport=module.countfingerprintChannelSectionDatewisefilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
					       
					   		for(int i=0;i<pubreport.size();i++){    
				   	          	  
						          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
						          pubreport.get(i).setReach(numberFormat.format(count)); 
						       
				           }
					   		
					   		
					   		return pubreport;  
					    }
					    
					   
					    if (queryfield.equals("uniqueVisitorsHourwise")) {
					        
					      	 AggregationModule module =  AggregationModule.getInstance();
					    	    try {
					    			module.setUp();
					    		} catch (Exception e1) {
					    			// TODO Auto-generated catch block
					    			e1.printStackTrace();
					    		}
					   		pubreport=module.countfingerprintChannelSectionDateHourwisefilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
					        
					   		for(int i=0;i<pubreport.size();i++){    
				   	          	  
						          Integer count = (int) (Double.parseDouble(pubreport.get(i).getReach()));
						          pubreport.get(i).setReach(numberFormat.format(count)); 
						       
				           }
					   		
					   		
					   		return pubreport;  
					    }
					    
					    
				           if(queryfield.equals("engagementTimeDatewise"))	
				           {
				        	   
				        	   
				        	   AggregationModule module =  AggregationModule.getInstance();
				       	    try {
				       			module.setUp();
				       		} catch (Exception e1) {
				       			// TODO Auto-generated catch block
				       			e1.printStackTrace();
				       		}
				      		pubreport=module.engagementTimeChannelSectionDatewisefilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
				      		

			               for(int i=0;i<pubreport.size();i++){    
			   	          	  
						          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
						          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
						       
				           }
				      		
				      		
				      		
				      		return pubreport;
				           
				           }
				           
				           if(queryfield.equals("engagementTimeHourwise"))	
				           {
				        	   
				        	   
				        	   AggregationModule module =  AggregationModule.getInstance();
				       	    try {
				       			module.setUp();
				       		} catch (Exception e1) {
				       			// TODO Auto-generated catch block
				       			e1.printStackTrace();
				       		}
				      		pubreport=module.engagementTimeChannelSectionDateHourwisefilter(startdate, enddate, channel_name, sectionname,queryfilterbuilder);
				      		

			                   for(int i=0;i<pubreport.size();i++){    
			   	          	  
						          Integer count = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
						          pubreport.get(i).setEngagementTime(numberFormat.format(count)); 
						       
				           }
				      		
				      		
				      		
				      		return pubreport;
				           
				           }
				           
			           
			           
			           
			           
			           
			           
			           
			           
			           
			           
			           
			           
			           
			           
			           
			           for(int i=0;i<pubreport.size();i++){    
			 	          	  
					          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					          pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			           }           
				    
				    
				    
				    return pubreport;
				  }
		  
		  
		  
				/*  
				  public List<PublisherReport> getQueryFieldChannelSectionFilter(String queryfield,String startdate, String enddate, String channel_name, String sectionname, Map<String,String>filter)
						    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
						  {
						    
					        int size = filter.size();
					        String queryfilterbuilder = "";
					        String formattedString = "";
					        int j =0;
					        for (Map.Entry<String, String> entry : filter.entrySet())
					        {
					        	if (j==0){
					                formattedString = addCommaString(entry.getValue());
					        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
					        	
					        	}
					            else{
					            formattedString = addCommaString(entry.getValue());	
					            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
					       
					            }
					            j++;
					         
					        }
					  
					        String query = "";
					  
					        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					        if(filter != null && !filter.isEmpty() && filter.equals("visitorCount"))
						    query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
					        
					        
					        System.out.println(query);
					        CSVResult csvResult = getCsvResult(false, query);
						    List<String> headers = csvResult.getHeaders();
						    List<String> lines = csvResult.getLines();
						    List<PublisherReport> pubreport = new ArrayList();
						    
						    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						       // lines = processList(lines);
						    
						    
						    
						    
						    //System.out.println(headers);
						    //System.out.println(lines);
						    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
						    {
						      for (int i = 0; i < lines.size(); i++)
						      {
						        try{
						    	  
						    	  PublisherReport obj = new PublisherReport();
						        
						        String[] data = ((String)lines.get(i)).split(",");
						     //   String demographicproperties = demographicmap.get(data[0]);
						            if(queryfield.equals("gender"))
						        	obj.setGender(capitalizeString(data[0]));
						        
						            if(queryfield.equals("device"))
						        	obj.setDevice_type(capitalizeString(data[0]));
						        	
						        	if(queryfield.equals("city")){
						        	    try{
						        		String locationproperties = citycodeMap.get(data[0]);
								        data[0]=data[0].replace("_"," ").replace("-"," ");
								        data[0] = capitalizeString(data[0]);
								        obj.setCity(capitalizeString(data[0]));
								        System.out.println(data[0]);
								        obj.setLocationcode(locationproperties);
						        	    }
						        	    catch(Exception e)
						        	    {
						        	    	continue;
						        	    }
						        	    
						        	    }
						        	if(queryfield.equals("audience_segment"))
						             {
						        		String audienceSegment = audienceSegmentMap.get(data[0]);
						        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
						        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
						        		obj.setAudience_segment(audienceSegment);
						        		obj.setAudienceSegmentCode(audienceSegmentCode);
						        		}
						        		else
						        	    obj.setAudience_segment(data[0]);
						        		
						             }
						        	
						        	if(queryfield.equals("reforiginal"))
							             obj.setReferrerSource(data[0]);
						            	
						        	if(queryfield.equals("agegroup"))
						        	{
						        		 data[0]=data[0].replace("_","-");
						        		 data[0]=data[0]+ " Years";
						        		 if(data[0].contains("medium")==false)
						        		 obj.setAge(data[0]);
						        	}
						            	
						            	
						        	if(queryfield.equals("incomelevel"))
							          obj.setIncomelevel(capitalizeString(data[0]));
						     
						        	
						        	if(queryfield.equals("system_os")){
						        		String osproperties = oscodeMap.get(data[0]);
								        data[0]=data[0].replace("_"," ").replace("-", " ");
								        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
								        String [] osParts = oscodeMap1.get(osproperties).split(",");
								        obj.setOs(osParts[0]);
								        obj.setOSversion(osParts[1]);
								        obj.setOscode(osproperties);
						        	}
						         	
						        	if(queryfield.equals("modelName")){
						        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
							        	
								        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
								        System.out.println(mobiledeviceproperties[2]);
								        obj.setDevicecode(mobiledeviceproperties[0]);
								        System.out.println(mobiledeviceproperties[0]);
						        	}
						         	
						        	if(queryfield.equals("brandName")){
						        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
						        		obj.setBrandname(data[0]);
						        	}
                                 
						        	if(queryfield.equals("refcurrentoriginal"))
						  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
						        	

						            Random random = new Random();	
						            Integer randomNumber = random.nextInt(1000 + 1 - 500) + 500;
						            Integer max = (int)Double.parseDouble(data[1]);
						            Integer randomNumber1 = random.nextInt(max) + 1;
						            
						            if(queryfield.equals("audience_segment"))	
						            {
						            obj.setCount(data[1]); 	
						            obj.setExternalWorldCount(randomNumber.toString());	
						            obj.setVisitorCount(randomNumber1.toString());
						            obj.setAverageTime("0.0");	

							        obj.setSection(sectionname);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        pubreport.add(obj);
						            }
						            
						            else if(queryfield.equals("agegroup")==true) {
						            	
						            	if(data[0].contains("medium")==false){
						            		if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								            	obj.setCount(data[1]);
								            
								                if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								                obj.setEngagementTime(data[1]);
								           
								                if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								                obj.setVisitorCount(data[1]);

									         obj.setSection(sectionname);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        pubreport.add(obj);
						            	}
						            }
						            
						            
						            else{
						            	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							            	obj.setCount(data[1]);
							            
							                if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							                obj.setEngagementTime(data[1]);
							           
							                if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							                obj.setVisitorCount(data[1]);

							         obj.setSection(sectionname);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        pubreport.add(obj);
						            
						            }
						       
						        }
						        catch(Exception e){
						        	continue;
						        	
						        }
						        
						        
						        }
						      //System.out.println(headers);
						      //System.out.println(lines);
						    }
						    return pubreport;
						  }
				  */

				
				  public List<PublisherReport> getQueryFieldChannelSectionGroupBy(String queryfield,String startdate, String enddate, String channel_name, String sectionname,List<String> groupby, String  filter)
						    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
						  {
						    
					      
					    
				      String querygroupbybuilder = convert(groupby);
				      List<PublisherReport> pubreport = new ArrayList();
				      String query = "";
				     
				      
				      
				      if(queryfield.equals("visitorType")){
							
						    List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
						    List<PublisherReport> pubreportv2 = new ArrayList<PublisherReport>();
						    
						    if(groupby.get(0).equals("hourlyAverage")){
						    	querygroupbybuilder="hour";
						    
						     pubreport = countUsersChannelDatewiseSectiongroupby(startdate, enddate, channel_name, querygroupbybuilder,sectionname, filter);
						  

							    Map<String,String> aggregationMap = new HashMap<String,String>();
							    String counttracker;
							    Double counttracker1 = 0.0;
							    String finalCounter;  
							  
					    		
					    		for(int i=0; i<pubreport.size();i++){
					    			
					    			String visitorType = pubreport.get(i).getVisitorType();
					    			String date =   pubreport.get(i).getDate();
					    			String count = pubreport.get(i).getCount();
					    	 		String [] parts = date.split("\\s+");
					    	 		String hour = parts[1];
					    	 		
					    	 		if(aggregationMap.containsKey(hour+"@"+visitorType)==false){
					    	 		aggregationMap.put(hour+"@"+visitorType,count);}
					    			else{
					    				
					    				counttracker = aggregationMap.get(hour+"@"+visitorType);
					    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
					    				aggregationMap.put(hour+"@"+visitorType,counttracker1.toString());
					    				
					    				
					    			}
					    		}
					    		
					    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
					    	 		    String key = entry.getKey();
					    	 		    String [] parts1 = key.split("@");	    	 		    
					    	 		    String value = entry.getValue();
					    	 		    PublisherReport obj = new PublisherReport();
					    	 		    obj.setVisitorType(parts1[1]);
					    	 		    obj.setDate(parts1[0].split(":")[0]);
					    	 		    obj.setCount(value);
					    	 		    pubreport1.add(obj);
					    	 		}
					    	
					    		    
					    		
					    	 		  for(int i=0;i<pubreport1.size();i++){    
					    	          	  
					    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
					    		          pubreport1.get(i).setCount(count.toString()); 
					    		       
					             }     
					    		return pubreport1;
						    }
					    	 		
					    		
						     
						     
						     pubreportv2 = countUsersChannelDatewiseSectiongroupby(startdate, enddate, channel_name, querygroupbybuilder,sectionname, filter);
						     
						     for(int i=0;i<pubreportv2.size();i++){    
					          	  
						          Integer count = (int) (Double.parseDouble(pubreportv2.get(i).getCount()));
						          pubreportv2.get(i).setCount(count.toString()); 
						       
				      }     
						     
						     
						     
						     return pubreportv2;
						    		  
					 	   }
					  
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      
				      int  l=0;
				      
				      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    	 	query = "Select count(*),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
				    	    
				    	    
				    	    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime"))
				    	     	query = "Select SUM(engagementTime),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
				    	        
				    	    
				    	    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount"))
				    	     	query = "Select "+queryfield+","+querygroupbybuilder+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder+"";
				    	        

				    	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
				    	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				    	   
				    	    	
				    	    }
				    	  
				    	    if(querygroupbybuilder.equals("minute")){
				    	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				    	   		    
				    	    } 	
				    	    
				    	    if(querygroupbybuilder.equals("second")){
				    	   // 	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    	    //	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				    	   		    
				    	    } 	
				    	    
				    	    if(querygroupbybuilder.equals("hour") || querygroupbybuilder.equals("hourlyAverage")){
				    	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				    	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				    	   
				    	    	
				    	    }
				    	  
				    	    if(querygroupbybuilder.equals("minute")){
				    	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				    	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				    	   		    
				    	    } 	
				    	    
				    	    if(querygroupbybuilder.equals("second")){
				    	    //	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				    	    //	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				    	   		    
				    	    } 	
				    	    
				    	   
				    	    if(querygroupbybuilder.equals("hour")|| querygroupbybuilder.equals("hourlyAverage")){
				    	    	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				    	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				    	   
				    	    	
				    	    }
				    	  
				    	    if(querygroupbybuilder.equals("minute")){
				    	    	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				    	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				    	   		    
				    	    } 	
				    	    
				    	    if(querygroupbybuilder.equals("second")){
				    	 //   	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				    	    //	query = "Select "
				    	    	//		+ ","+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				    	   		    
				    	    } 	
				    	    
				    	    
				    	    
				    	    
				    	    
				    	    
				    	    if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
				    	    {
				    	    	
				    	    	query = "Select count(*) from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				    	    }
				    	    
				    	    	
				    	    if(querygroupbybuilder.equals("minute") && queryfield.equals("totalViews"))
				    	    {
				    	   	   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    	    	query = "Select count(*) from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				    	    }
				    	    	
				    	    if(querygroupbybuilder.equals("second") && queryfield.equals("totalViews"))
				    	    {
				    	    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    	      //  query = "Select count(*) from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				    	    }
				    	    
				    	    	
				    	    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors") )
				    	    {
				    	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + 
				    				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				    	    	
				    	    }
				    	 		    
				    			    	
				    	    if(querygroupbybuilder.equals("minute") && queryfield.equals("uniqueVisitors") )
				    	    {
				    	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + 
				    				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				    	    	
				    	    }
				    	    	
				    	    
				    	    if(querygroupbybuilder.equals("second") && queryfield.equals("uniqueVisitors"))
				    	    {
				    	    //	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + 
				    			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				    	    	
				    	    }
				    	    
				    	    
				    	    if(querygroupbybuilder.equals("hour") && queryfield.equals("engagementTime"))
				    	    {
				    	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + 
				    				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				    	    	
				    	    }
				    	 		    
				    			    	
				    	    if(querygroupbybuilder.equals("minute") && queryfield.equals("engagementTime")  )
				    	    {
				    	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + 
				    				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				    	    	
				    	    }
				    	    	
				    	    
				    	    if(querygroupbybuilder.equals("second") && queryfield.equals("engagementTime") )
				    	    {
				    	   // 	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and  channel_name = '" + 
				    			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				    	    	
				    	    }
						    	
						    
				         	
				         	System.out.println(query);
				         	CSVResult csvResult = getCsvResult(false, query);
						    List<String> headers = csvResult.getHeaders();
						    List<String> lines = csvResult.getLines();
						   
						//    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							    //lines = processList1(lines);
						    
						   
						    if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
							    
							    
						        

						    	   List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
						   
						    	 
								    ExecutorService executorService = Executors.newFixedThreadPool(2000);
							        
							        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
							    
							        List<String> Query = new ArrayList();
							     
							        queryfield = "audience_segment,subcategory";
							       
									String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
									    
										
								    String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY audience_segment,subcategory";
										
										
								    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by audience_segment,subcategory";  
							       
								    
								    Query.add(query1);
							        Query.add(query2);
								    Query.add(query3);
								    Query.add("externalWorldQuerySection@"+startdate+"@"+enddate+"@"+channel_name+"@"+sectionname);
							       
							       for(int j=0 ; j < Query.size(); j++ ){
							       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
							    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
							       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
							       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
							       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
							        
							       // returns a list of Futures holding their status and results when all complete
							    
							   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
							       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
							       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
							       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
							       }
							       
							       
							       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
								

								    for (int k = 0; k < maps.size(); k++)
								    {
								    
								    	if(maps!=null && maps.get(k)!=null){
								        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
								        pubreport1.addAll(map);
								    	}
								
						    }
							
								    executorService.shutdown();
								    
								    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
								    
								    List<PublisherReport> object = new ArrayList<PublisherReport>();
								    
								    
								    for(int k=0; k< pubreport1.size(); k++)
								    {
							         try{ 
								    	String audiencesegment = pubreport1.get(k).getAudience_segment();
								    	
								    	String subcategory = pubreport1.get(k).getSubcategory();
								    	
								    	  String count =  pubreport1.get(k).getCount();
							        		
									        String engagementTime =  pubreport1.get(k).getEngagementTime();		
									        
									        String visitorCount = pubreport1.get(k).getVisitorCount();
								    	
									        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
									        
								    	    String key = audiencesegment+"@"+subcategory;
									        
									        
									        if(aggregatedmap.containsKey(key))
							        {
							       
							        PublisherReport obj = aggregatedmap.get(key);
							        obj.setAudience_segment(audiencesegment);
							        obj.setSubcategory(subcategory);
							      
							        
							        if(count!=null)
							        obj.setCount(count);
							        	
							        if(engagementTime!=null) 	
							        	obj.setEngagementTime(engagementTime);
							        	
							       if(visitorCount!=null) 	
							        	obj.setVisitorCount(visitorCount);
							        
							       if(externalWorldCount!=null)
							    	   obj.setExternalWorldCount(externalWorldCount);
							       else
				       	    	   obj.setExternalWorldCount("0");
							       
							       
							       
							       if(key !=null) {	
							    	obj.setAudience_segment(audiencesegment);
				 			        obj.setSubcategory(subcategory);
							       }
							       
							       
								    aggregatedmap.put(key, obj);
								    
							        }
							        else{
							        	       
							        	        PublisherReport obj = new PublisherReport();
							        	     
							        	        if(count !=null)
							        	        obj.setCount(count);
							        	        	
							        	        if(engagementTime !=null) 	
							        	        obj.setEngagementTime(engagementTime);
							        	        	
							        	       if(visitorCount !=null) 	
							        	        obj.setVisitorCount(visitorCount);
							        	
							        	       
							        	       if(externalWorldCount!=null)
										    	   obj.setExternalWorldCount(externalWorldCount);
							        	       else
							        	    	   obj.setExternalWorldCount("0");
							        	       
							        	       if(key!=null) {	
							        	    	obj.setAudience_segment(audiencesegment);
							   			        obj.setSubcategory(subcategory);
							        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
							        	      
							        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
							 		        	
							        	       
							        	       
							        	       }
							        	       aggregatedmap.put(key, obj);
							        
							        
							        }
							         }
							         catch(Exception e){
							        	 continue;
							         }
							      
								    }
								    
								     
								    
								    List<String> headers1 = new ArrayList<String>();
								    headers1.add("audience_segment");
								    headers1.add("subcategory");
								    headers1.add("count(*)");
								    headers1.add("SUM(engagementTime)");
								    headers1.add("COUNT(DISTINCT(cookiehash))");
								    headers1.add("ExternalWorldCount");
								    List<String> lines1= new ArrayList<String>();	
								    
								    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
								    
								    	
								    	try{
								    	String key = entry.getKey();
								        PublisherReport obj = entry.getValue();
								        String [] parts1= key.split("@");
								        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
								      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
							        	lines1.add(line);
								        
								        
								       
								      }
								      catch(Exception e){
								    	  continue;
								      }
								    
								   
								    
								    
								    
								    
								    
								    
								    
								    }
								    
								    

								    List<List<String>> data = new ArrayList<List<String>>();
								    for (int i = 0; i < lines1.size(); i++) {
							            List<String> objects = new ArrayList<String>();
							            String [] parts = lines1.get(i).split(",");
							            for(int j =0; j< parts.length; j++)
							              objects.add(parts[j]);
							           
							            data.add(objects);
							        }
								    
								    
								    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
								    
								     queryfield = "audience_segment";
								//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
								 //   String s = json.toString();
								    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
								 //   System.out.println(nestedJson);
								    return pubreport;
							    
							    }
						    
						    
						    
						    
						    //System.out.println(headers);
						    //System.out.println(lines);
						    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
						    {
						      for (int i = 0; i < lines.size(); i++)
						      {
						        try{
						    	  
						    	PublisherReport obj = new PublisherReport();
						        
						        String[] data = ((String)lines.get(i)).split(",");
						     //   String demographicproperties = demographicmap.get(data[0]);
						        
						            if(queryfield.equals("gender")){
						        	
						            	String genderId = GenderMap1.get(data[0]);
						        		obj.setGenderId(genderId);
						            	
						            	obj.setGender(capitalizeString(data[0]));
						            }
						            if(queryfield.equals("device")){
						        	
						            	String deviceId = deviceMap1.get(data[0]);
						        		obj.setDeviceId(deviceId);
						            	
						            	obj.setDevice_type(capitalizeString(data[0]));
						            }
						        	if(queryfield.equals("city")){
						        		try{
						        		String locationproperties = citycodeMap.get(data[0]);
								        data[0]=data[0].replace("_"," ").replace("-"," ");
								        data[0] = capitalizeString(data[0]);
								        obj.setCity(capitalizeString(data[0]));
								        System.out.println(data[0]);
								        obj.setLocationcode(locationproperties);
						        		}
						        		catch(Exception e)
						        		{
						        			continue;
						        		}
						        		}
						        	
						        	if(queryfield.equals("audience_segment"))
						        	{
						        		
						        		String audienceSegment = audienceSegmentMap.get(data[0]);
						        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
						        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
						        		obj.setAudience_segment(audienceSegment);
						        		obj.setAudienceSegmentCode(audienceSegmentCode);
						        		}
						        		else
						        	    obj.setAudience_segment(data[0]);
						        		
						        		
						        	}
						        	
						        	if(queryfield.equals("reforiginal"))
							             obj.setReferrerSource(data[0]);
						            	
						        	if(queryfield.equals("agegroup"))
						        	{
						        		
						        		String ageId = AgeMap1.get(data[0]);
						        		obj.setAgeId(ageId);
						        		 data[0]=data[0].replace("_","-");
						        		 data[0]=data[0]+ " Years";
						        		 if(data[0].contains("medium")==false)
						        		 obj.setAge(data[0]);
						        	}
						            	
						        	  if(queryfield.equals("state"))
						            	{
						            	
						            	data[0]=data[0].replace("_", " ");
						            	data[0] = capitalizeString(data[0]);
						            	obj.setState(data[0]);
						            	}
						            
						            
						            if(queryfield.equals("country"))
						        	  {
						        	
						            	data[0]=data[0].replace("_", " ");
						            	data[0] = capitalizeString(data[0]);
						            	obj.setCountry(data[0]);
						             	}
						        	
						        	
										        	
						        	if(queryfield.equals("incomelevel")){
							         
						        		String incomelevelId = IncomeMap1.get(data[0]);
						        		obj.setIncomeId(incomelevelId);
						        		
						        		obj.setIncomelevel(capitalizeString(data[0]));
						        	}
						        	
						        	if(queryfield.equals("system_os")){
						        		String osproperties = oscodeMap.get(data[0]);
								        data[0]=data[0].replace("_"," ").replace("-", " ");
								        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
								        String [] osParts = oscodeMap1.get(osproperties).split(",");
								        obj.setOs(osParts[0]);
								        obj.setOSversion(osParts[1]);
								        obj.setOscode(osproperties);
						        	}
						         	
						        	if(queryfield.equals("modelName")){
						        		String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
							        	
								        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
								        System.out.println(mobiledeviceproperties[2]);
								        obj.setDevicecode(mobiledeviceproperties[0]);
								        System.out.println(mobiledeviceproperties[0]);
						        	}
						         	
						        	if(queryfield.equals("brandName")){
						        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
						        		obj.setBrandname(data[0]);
						        	}

						        	if(queryfield.equals("refcurrentoriginal"))
						  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
						        	
						        	
						        	
						        	
						        	//   obj.setCode(code);
					            for(int k = 0; k < groupby.size(); k++)
					            {
					            	
					            	if(groupby.get(k).equals(queryfield)==false)
					            	{
					            	try{
					            	if(groupby.get(k).equals("device")){
					            	
					            		String deviceId = deviceMap1.get(data[k+1]);
					            		obj.setDeviceId(deviceId);
					            		obj.setDevice_type(capitalizeString(data[k+1]));
					            	}
					            	if(groupby.get(k).equals("city"))
					            	{
					            		try{
					            		String locationproperties = citycodeMap.get(data[k+1]);
					    		        data[k+1]=data[k+1].replace("_"," ").replace("-"," ");
					    		        data[k+1] = capitalizeString(data[k+1]);
					    		        obj.setCity(data[k+1]);
					    		        System.out.println(data[k+1]);
					    		        obj.setLocationcode(locationproperties);
					            		}
					            		catch(Exception e)
					            		{
					            			continue;
					            		}
					            	}
					            	
					            	if(groupby.get(k).equals("audience_segment"))
					            	{
					            		
					            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
					            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
					            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
					            		obj.setAudience_segment(audienceSegment);
					            		obj.setAudienceSegmentCode(audienceSegmentCode);
					            		}
					            		else
					            	    obj.setAudience_segment(data[k+1]);
					            		
					            	}
					            	
					            	
					            	 if(groupby.get(k).equals("state"))
						             	{
						             	
						             	data[k+1]=data[k+1].replace("_", " ");
						             	data[k+1] = capitalizeString(data[k+1]);
						             	obj.setState(data[k+1]);
						             	}
						             
						             
						             if(groupby.get(k).equals("country"))
						         	  {
						         	
						             	data[k+1]=data[k+1].replace("_", " ");
						             	data[k+1] = capitalizeString(data[k+1]);
						             	obj.setCountry(data[k+1]);
						              	}
					            	
					            	
					            	if(groupby.get(k).equals("gender")){
							         
					            		String genderId = GenderMap1.get(data[k+1]);
					            		obj.setGenderId(genderId);
					            		
					            		obj.setGender(capitalizeString(data[k+1]));
					            	}
					            	
					            	if(groupby.get(k).equals("date"))
							             {
					            		
					            		Date date = new Date(Long.parseLong(data[k+1])); // *1000 is to convert seconds to milliseconds
					            		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
					            		 // give a timezone reference for formating (see comment at the bottom
					            		String formattedDate = sdf.format(date);
					            		
					            		obj.setDate(formattedDate);
					            		
					            		
							             }
						            	
					            	if(groupby.get(k).equals("hour")|| groupby.get(k).equals("hourlyAverage"))
							             obj.setDate(data[k+1]);
					            	
					            	if(groupby.get(k).equals("minute"))
							             obj.setDate(data[k+1]);
					            	
					            	if(groupby.get(k).equals("subcategory"))
					            	 {
					            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
					            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
					            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
					            		obj.setSubcategory(audienceSegment);
					            		obj.setSubcategorycode(audienceSegmentCode);
					            		}
					            		else
					            	    obj.setSubcategory(data[k+1]);
							             }
					            	
					            	if(groupby.get(k).equals("refcurrentoriginal"))
							             obj.setReferrerSource(data[k+1]);
						            	
					            	if(groupby.get(k).equals("agegroup"))
					            	{
					            		String ageId = AgeMap1.get(data[k+1]);
					            		obj.setAgeId(ageId);
					            		
					            		
					            		data[k+1]=data[k+1].replace("_","-");
						        		 data[k+1]=data[k+1]+ " Years";
						        		 if(data[k+1].contains("medium")==false)
						        		 obj.setAge(data[k+1]);
						        	}
						            	
						            	
					            	if(groupby.get(k).equals("incomelevel")){
							         
					            		String incomelevelId = IncomeMap1.get(data[k+1]);
					            		obj.setIncomeId(incomelevelId);
					            		
					            		obj.setIncomelevel(capitalizeString(data[k+1]));
					            	}	
				                    l++;
					            	}
					            	catch(Exception e){
					            	continue;
					            	}
					            	}
					            }
						        
					            
					            	            
					            if(l!=0){
					            	 
			            	   //     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					            	obj.setCount(data[l+1]);
					             
						       //     if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					           //     obj.setVisitorCount(data[l+1]);
					         

						        //    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime") )
					             //   obj.setEngagementTime(data[l+1]);
						        
					            }   
						        obj.setSection(sectionname);
						        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						        pubreport.add(obj);
						        l=0;
						        }
						        catch(Exception e)
						        {
						        	continue;
						        }
						        
						        }
						      //System.out.println(headers);
						      //System.out.println(lines);
						    }
						    
						    
						    Map<String,String> aggregationMap = new HashMap<String,String>();
						    String counttracker;
						    Double counttracker1 = 0.0;
						    String finalCounter;  
						  
						    
						    
						   
						  
						    if(queryfield.equals("gender") && groupby.get(0).equals("hourlyAverage")== true){
						    	
					    		
					    		List<PublisherReport> pubreport1 = new ArrayList();
					    		
					    		for(int i=0; i<pubreport.size();i++){
					    			
					    			String gender = pubreport.get(i).getGender();
					    			String date =   pubreport.get(i).getDate();
					    			String count = pubreport.get(i).getCount();
					    	 		String [] parts = date.split("\\s+");
					    	 		String hour = parts[1];
					    	 		
					    	 		if(aggregationMap.containsKey(hour+"@"+gender)==false){
					    	 		aggregationMap.put(hour+"@"+gender,count);}
					    			else{
					    				
					    				counttracker = aggregationMap.get(hour+"@"+gender);
					    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
					    				aggregationMap.put(hour+"@"+gender,counttracker1.toString());
					    				
					    				
					    			}
					    		}	
					    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
					    	 		    String key = entry.getKey();
					    	 		    String [] parts1 = key.split("@");	    	 		    
					    	 		    String value = entry.getValue();
					    	 		    PublisherReport obj = new PublisherReport();
					    	 		    obj.setGender(parts1[1]);
					    	 		    obj.setDate(parts1[0].split(":")[0]);
					    	 		    obj.setCount(value);
					    	 		    pubreport1.add(obj);
					    	 		}
					    	
					    		    

					    	 		  for(int i=0;i<pubreport1.size();i++){    
					    	          	  
					    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
					    		          pubreport1.get(i).setCount(count.toString()); 
					    		       
					             }     
					    		
					    		
					    		
					    		
					    		return pubreport1;
					    		
					    		
					    		
					    	}
						    
					    	  if(queryfield.equals("agegroup") && groupby.get(0).equals("hourlyAverage")== true){
							    	
							    		

							    		
					    		List<PublisherReport> pubreport1 = new ArrayList();
							    		for(int i=0; i<pubreport.size();i++){
							    			
							    			String agegroup = pubreport.get(i).getAge();
							    			String date =   pubreport.get(i).getDate();
							    			String count = pubreport.get(i).getCount();
							    	 		String [] parts = date.split("\\s+");
							    	 		String hour = parts[1];
							    	 		
							    	 		if(aggregationMap.containsKey(hour+"@"+agegroup)==false){
							    	 		aggregationMap.put(hour+"@"+agegroup,count);}
							    			else{
							    				
							    				counttracker = aggregationMap.get(hour+"@"+agegroup);
							    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
							    				aggregationMap.put(hour+"@"+agegroup,counttracker1.toString());
							    				
							    				
							    			}
							    		}	
							    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
							    	 		    String key = entry.getKey();
							    	 		    String [] parts1 = key.split("@");	    	 		    
							    	 		    String value = entry.getValue();
							    	 		    PublisherReport obj = new PublisherReport();
							    	 		    obj.setAge(parts1[1]);
							    	 		    obj.setDate(parts1[0].split(":")[0]);
							    	 		    obj.setCount(value);
							    	 		   if(parts1[1]!=null && parts1[1].contains("medium")==false)
							    	 		    pubreport1.add(obj);
							    	 		}
							    	
							    		    

							    	 		  for(int i=0;i<pubreport1.size();i++){    
							    	          	  
							    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
							    		          pubreport1.get(i).setCount(count.toString()); 
							    		       
							             }     
							    		
							    		
							    	 		return pubreport1;
							    		
							    		
							    		
							    		
							    	}
								    
							    	  if(queryfield.equals("incomelevel") && groupby.get(0).equals("hourlyAverage")== true){
									    	
									    		
									    		

									    		
					    		List<PublisherReport> pubreport1 = new ArrayList();
									    		
									    		for(int i=0; i<pubreport.size();i++){
									    			
									    			String incomelevel = pubreport.get(i).getIncomelevel();
									    			String date =   pubreport.get(i).getDate();
									    			String count = pubreport.get(i).getCount();
									    	 		String [] parts = date.split("\\s+");
									    	 		String hour = parts[1];
									    	 		
									    	 		if(aggregationMap.containsKey(hour+"@"+incomelevel)==false){
									    	 		aggregationMap.put(hour+"@"+incomelevel,count);
									    	 		}
									    			else{
									    				
									    				counttracker = aggregationMap.get(hour+"@"+incomelevel);
									    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
									    				aggregationMap.put(hour+"@"+incomelevel,counttracker1.toString());
									    				
									    				
									    			}
									    		}
									    		
									    		
									    		
									    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
									    	 		    String key = entry.getKey();
									    	 		    String [] parts1 = key.split("@");	    	 		    
									    	 		    String value = entry.getValue();
									    	 		    PublisherReport obj = new PublisherReport();
									    	 		    obj.setIncomelevel(parts1[1]);
									    	 		    obj.setDate(parts1[0].split(":")[0]);
									    	 		    obj.setCount(value);
									    	 		    pubreport1.add(obj);
									    	
									    		    }
									    		
									    		

									    	 		  for(int i=0;i<pubreport1.size();i++){    
									    	          	  
									    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
									    		          pubreport1.get(i).setCount(count.toString()); 
									    		       
									             }     
									    	 		return pubreport1;
									    		
									    		
									    		
									    		
									    	}
							
									    	
									    	  if(queryfield.equals("device") && groupby.get(0).equals("hourlyAverage")== true){
											    	
											    		
											    		

					    		                           List<PublisherReport> pubreport1 = new ArrayList();
											    		
											    		for(int i=0; i<pubreport.size();i++){
											    			
											    			String device = pubreport.get(i).getDevice_type();
											    			String date =   pubreport.get(i).getDate();
											    			String count = pubreport.get(i).getCount();
											    	 		String [] parts = date.split("\\s+");
											    	 		String hour = parts[1];
											    	 		
											    	 		if(aggregationMap.containsKey(hour+"@"+device)==false){
											    	 		aggregationMap.put(hour+"@"+device,count);}
											    			else{
											    				
											    				counttracker = aggregationMap.get(hour+"@"+device);
											    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
											    				aggregationMap.put(hour+"@"+device,counttracker1.toString());
											    				
											    				
											    			}
											    		}
											    		
											    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
											    	 		    String key = entry.getKey();
											    	 		    String [] parts1 = key.split("@");	    	 		    
											    	 		    String value = entry.getValue();
											    	 		    PublisherReport obj = new PublisherReport();
											    	 		    obj.setDevice_type(parts1[1]);
											    	 		    obj.setDate(parts1[0].split(":")[0]);
											    	 		    obj.setCount(value);
											    	 		    pubreport1.add(obj);
											    	 		}
											    	
											    		    

											    	 		  for(int i=0;i<pubreport1.size();i++){    
											    	          	  
											    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
											    		          pubreport1.get(i).setCount(count.toString()); 
											    		       
											             }     
											    		
											    		
											    	 		return pubreport1;
											    		
											    		
											    		
											    		
											    	}		    	
									    	
							    	
											    	  if(queryfield.equals("visitorType") && groupby.get(0).equals("hourlyAverage")== true){
													    	
													    		
													    		

													    	
					    		                               List<PublisherReport> pubreport1 = new ArrayList();
													    		
													    		for(int i=0; i<pubreport.size();i++){
													    			
													    			String visitorType = pubreport.get(i).getVisitorType();
													    			String date =   pubreport.get(i).getDate();
													    			String count = pubreport.get(i).getCount();
													    	 		String [] parts = date.split("\\s+");
													    	 		String hour = parts[1];
													    	 		
													    	 		if(aggregationMap.containsKey(hour+"@"+visitorType)==false){
													    	 		aggregationMap.put(hour+"@"+visitorType,count);}
													    			else{
													    				
													    				counttracker = aggregationMap.get(hour+"@"+visitorType);
													    				counttracker1= Double.parseDouble(counttracker)+Double.parseDouble(count);
													    				aggregationMap.put(hour+"@"+visitorType,counttracker1.toString());
													    				
													    				
													    			}
													    		}
													    		
													    	 		for (Map.Entry<String, String> entry : aggregationMap.entrySet()) {
													    	 		    String key = entry.getKey();
													    	 		    String [] parts1 = key.split("@");	    	 		    
													    	 		    String value = entry.getValue();
													    	 		    PublisherReport obj = new PublisherReport();
													    	 		    obj.setVisitorType(parts1[1]);
													    	 		    obj.setDate(parts1[0].split(":")[0]);
													    	 		    obj.setCount(value);
													    	 		    pubreport1.add(obj);
													    	 		}
													    	
													    		    
													    		
													    	 		  for(int i=0;i<pubreport1.size();i++){    
													    	          	  
													    		          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
													    		          pubreport1.get(i).setCount(count.toString()); 
													    		       
													             }     
													    		
													    		
													    	 		return pubreport1;
													    		
													    		
													    		
													    	}
						    
						    
						    
						    
						    
						    
						    
						    
						    
						    
						    for(int i=0;i<pubreport.size();i++){    
				 	          	  
						          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
						          pubreport.get(i).setCount(count.toString()); 
						       
				           }           
					    
						    
						    
						    
						    return pubreport;
						  }
				  
				  	  
  
  
  public List<PublisherReport> getAgegroupChannel(String startdate, String enddate, String channel_name)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*),agegroup from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY agegroup";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
    //    String demographicproperties = demographicmap.get(data[0]);
        obj.setAge(data[0]);
  //      obj.setCode(code);
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
      }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> getISPChannel(String startdate, String enddate, String channel_name)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query = "Select count(*),ISP from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY ISP";
    CSVResult csvResult = getCsvResult(false, query);
    List<String> headers = csvResult.getHeaders();
    List<String> lines = csvResult.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data = ((String)lines.get(i)).split(",");
        if(data[0].trim().toLowerCase().equals("_ltd")==false){ 
        obj.setISP(capitalizeString(data[0]));
        obj.setCount(data[1]);
        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
        pubreport.add(obj);
         }
        }
      //System.out.println(headers);
      //System.out.println(lines);
    }
    return pubreport;
  }
  
  public List<PublisherReport> getOrgChannel(String startdate, String enddate, String channel_name)
    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
  {
    String query1 = "Select count(*),organisation from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY organisation";
    CSVResult csvResult1 = getCsvResult(false, query1);
    List<String> headers1 = csvResult1.getHeaders();
    List<String> lines1 = csvResult1.getLines();
    List<PublisherReport> pubreport = new ArrayList();
    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
    {
      for (int i = 0; i < lines1.size(); i++)
      {
        PublisherReport obj = new PublisherReport();
        
        String[] data1 = ((String)lines1.get(i)).split(",");
        if ((data1[0].length() > 3) && (data1[0].charAt(0) != '_') && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("communication")) && (!data1[0].trim().toLowerCase().contains("cable")) && (!data1[0].trim().toLowerCase().contains("telecom")) && (!data1[0].trim().toLowerCase().contains("network")) && (!data1[0].trim().toLowerCase().contains("isp")) && (!data1[0].trim().toLowerCase().contains("hathway")) && (!data1[0].trim().toLowerCase().contains("internet")) && (!data1[0].trim().toLowerCase().equals("_ltd")) && (!data1[0].trim().toLowerCase().contains("googlebot")) && (!data1[0].trim().toLowerCase().contains("sify")) && (!data1[0].trim().toLowerCase().contains("bsnl")) && (!data1[0].trim().toLowerCase().contains("reliance")) && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("tata")) && (!data1[0].trim().toLowerCase().contains("nextra")))
        {
          obj.setOrganisation(capitalizeString(data1[0]));
          obj.setCount(data1[1]);
          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
          pubreport.add(obj);
        }
      }
      //System.out.println(headers1);
      //System.out.println(lines1);
    }
    return pubreport;
  }
  
  
  
  public PublisherReport getUserdetailsChannel(String startdate, String enddate, String channel_name,Map<String,String> filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	  
	  int size = filter.size();
      String queryfilterbuilder = "";
      String formattedString = "";
      String query = "";
      int j =0;
      for (Map.Entry<String, String> entry : filter.entrySet())
      {
      	if (j==0){
              formattedString = addCommaString(entry.getValue());
      		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
      	
      	}
          else{
          formattedString = addCommaString(entry.getValue());	
          queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
     
          }
          j++;
       
      }

		  
	        String query1 = "Select Distinct(gender) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult1 = getCsvResult(false, query1);
		    List<String> headers1 = csvResult1.getHeaders();
		    List<String> lines1 = csvResult1.getLines();
		   
		    String query2 = "Select Distinct(agegroup) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult2 = getCsvResult(false, query2);
		    List<String> headers2 = csvResult2.getHeaders();
		    List<String> lines2 = csvResult2.getLines();
		    
		    
		    String query3 = "Select Distinct(incomelevel) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult3 = getCsvResult(false, query3);
		    List<String> headers3 = csvResult3.getHeaders();
		    List<String> lines3 = csvResult3.getLines();
		    
		    
		    
		    
		    String query5 = "Select Distinct(device) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult5 = getCsvResult(false, query5);
		    List<String> headers5 = csvResult5.getHeaders();
		    List<String> lines5 = csvResult5.getLines();
		    
		    

		    String query6 = "Select Distinct(modelName) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult6 = getCsvResult(false, query6);
		    List<String> headers6 = csvResult6.getHeaders();
		    List<String> lines6 = csvResult6.getLines();
		    
		    String query7 = "Select Distinct(system_os) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult7 = getCsvResult(false, query7);
		    List<String> headers7 = csvResult7.getHeaders();
		    List<String> lines7 = csvResult7.getLines();
		    
		   
		    
		    /*
		    String query8 = "Select contributionFactor,audience_segment from audiencesegmentcomputeindex1 where "+queryfilterbuilder;
		    CSVResult csvResult8 = getCsvResult(false, query8);
		    List<String> headers8 = csvResult8.getHeaders();
		    List<String> lines8 = csvResult8.getLines();
		    */
		    
		    
		    
		    
		    String query9 = "Select count(*) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult9 = getCsvResult(false, query9);
		    List<String> headers9 = csvResult9.getHeaders();
		    List<String> lines9 = csvResult9.getLines();
		    
		    String query10 = "Select SUM(engagementTime) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult10 = getCsvResult(false, query10);
		    List<String> headers10 = csvResult10.getHeaders();
		    List<String> lines10 = csvResult10.getLines();
		    
		    String query11 = "Select distinct(session_id) from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		    CSVResult csvResult11 = getCsvResult(false, query11);
		    List<String> headers11 = csvResult11.getHeaders();
		    List<String> lines11 = csvResult11.getLines();
		    
		    String query12 = "Select referrerType from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' Order by date asc";
		    CSVResult csvResult12 = getCsvResult(false, query12);
		    List<String> headers12 = csvResult12.getHeaders();
		    List<String> lines12 = csvResult12.getLines();
		    
		    
		    String query13 = "Select date from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name +  "' Order by date asc";
		    CSVResult csvResult13 = getCsvResult(false, query13);
		    List<String> headers13 = csvResult13.getHeaders();
		    List<String> lines13 = csvResult13.getLines();
		    
		    
		    String query14 = "Select sourceUrl from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name +  "' Order by date asc";
		    CSVResult csvResult14 = getCsvResult(false, query14);
		    List<String> headers14 = csvResult14.getHeaders();
		    List<String> lines14 = csvResult14.getLines();
		    
		    String query15 = "Select resolution_properties from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name +  "' Order by date asc";
		    CSVResult csvResult15 = getCsvResult(false, query15);
		    List<String> headers15 = csvResult15.getHeaders();
		    List<String> lines15 = csvResult15.getLines();
		    
		    String gender  = lines1.get(0);
		    String agegroup = lines2.get(0);
		    String incomelevel = lines3.get(0);
		    String device = lines5.get(0);
		    String os = lines7.get(0);
		    String modelName = lines6.get(0);
		    String engagementTime = lines10.get(0);
		    int sessioncount = lines11.size();
		    Integer sessioncount1 = sessioncount; 
		    String pageviews = lines9.get(0);
		    
		    String referrerType = lines12.get(0);
		    String acquisitiondate = lines13.get(0);
		    String channel = lines14.get(0); 
		    String resolution = lines15.get(0);
		    PublisherReport pubreport = new PublisherReport();
		    agegroup=agegroup.replace("_","-");
		    agegroup=agegroup+ " Years";
   		    if(agegroup.contains("medium")==true)
   		    agegroup="25-34 Years";
		    pubreport.setAge(agegroup);
		    pubreport.setGender(capitalizeString(gender));
		    pubreport.setIncomelevel(capitalizeString(incomelevel));
		    pubreport.setDevice_type(capitalizeString(device));
		    String mobiledata = devicecodeMap.get(modelName.toLowerCase());
		    String[] mobiledeviceproperties;
		    if(mobiledata!=null && mobiledata.isEmpty()==false){
		    mobiledeviceproperties = mobiledata.split(",");
        	
		    pubreport.setMobile_device_model_name(mobiledeviceproperties[2]);
		    }
		    else{
		    	 pubreport.setDevice_type("Desktop");
		    	
		    }
		    os = os.replace("_"," ");
		    pubreport.setOs(os);
		    if(resolution!=null)
		    pubreport.setScreen_properties(resolution.replace("_","-"));
		    pubreport.setDeviceImage("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcROMMDts3bei1pzTiViSoQnFdv9HUEqvxK4DrgWk9Hz9V8VkiYVMw");
		    
		    if(channel!=null)
		    pubreport.setAcquisitionChannel(channel);
		    
		    if(acquisitiondate!=null)
		    pubreport.setAcquisitionDate(acquisitiondate);
		   
		    if(referrerType!=null)
		    pubreport.setAcquisitionSource(referrerType);
		    pubreport.setEngagementTime(engagementTime);
		    pubreport.setTotalvisits(pageviews);
		    pubreport.setSessionCount(sessioncount1.toString());
		    if((int)Double.parseDouble(pageviews) >= 15)
		    pubreport.setVisitorType("Loyal");
		   
		    if((int)Double.parseDouble(pageviews) < 15 && (int)Double.parseDouble(pageviews) >= 7)
			    pubreport.setVisitorType("Returning");
			   
		    if((int)Double.parseDouble(pageviews) < 2)
			    pubreport.setVisitorType("New");
			   
		    
		    
		    return pubreport;
		  }
		  
  
  
  public List<PublisherReport> getUserdetailsCityChannel(String startdate, String enddate, String channel_name,Map<String,String> filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	  List<PublisherReport> pubreport = new ArrayList();
	  int size = filter.size();
      String queryfilterbuilder = "";
      String formattedString = "";
      String query = "";
      int j =0;
      for (Map.Entry<String, String> entry : filter.entrySet())
      {
      	if (j==0){
              formattedString = addCommaString(entry.getValue());
      		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
      	
      	}
          else{
          formattedString = addCommaString(entry.getValue());	
          queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
     
          }
          j++;
       
      }
	  
	  
	    String query4 = "Select count(*),city from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" group by city";
	    CSVResult csvResult4 = getCsvResult(false, query4);
	    List<String> headers4 = csvResult4.getHeaders();
	    List<String> lines4 = csvResult4.getLines();
	    if ((lines4 != null) && (!lines4.isEmpty()) && (!((String)lines4.get(0)).isEmpty()))
	    {
	      for (int i = 0; i < lines4.size(); i++)
	      {
	        PublisherReport obj = new PublisherReport();
	        
	        String[] data1 = ((String)lines4.get(i)).split(",");
	        String locationproperties = citycodeMap.get(data1[0]);
	        data1[0]=data1[0].replace("_"," ").replace("-"," ");
	        data1[0]=capitalizeString(data1[0]);
	          obj.setCity(data1[0]);
	          obj.setCount(data1[1]);
	          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	          pubreport.add(obj);
	       
	      }
	      //System.out.println(headers1);
	      //System.out.println(lines1);
	    }
  
          return pubreport;
  
		  }
  
  
  public List<PublisherReport> getUserdetailsISPChannel(String startdate, String enddate, String channel_name,Map<String,String> filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    
	  List<PublisherReport> pubreport = new ArrayList();
	  int size = filter.size();
    String queryfilterbuilder = "";
    String formattedString = "";
    String query = "";
    int j =0;
    for (Map.Entry<String, String> entry : filter.entrySet())
    {
    	if (j==0){
            formattedString = addCommaString(entry.getValue());
    		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
    	
    	}
        else{
        formattedString = addCommaString(entry.getValue());	
        queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
   
        }
        j++;
     
    }
	  
	  
    String query7 = "Select count(*),ISP from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" group by ISP";
    CSVResult csvResult7 = getCsvResult(false, query7);
    List<String> headers7 = csvResult7.getHeaders();
    List<String> lines7 = csvResult7.getLines();
    
	    if ((lines7 != null) && (!lines7.isEmpty()) && (!((String)lines7.get(0)).isEmpty()))
	    {
	      for (int i = 0; i < lines7.size(); i++)
	      {
	        PublisherReport obj = new PublisherReport();
	        
	        String[] data1 = ((String)lines7.get(i)).split(",");
	          if(data1[0]!=null && !data1[0].isEmpty()){
	         
	          data1[0] = data1[0].replace("_"," ");	  
	        	
	          obj.setISP( capitalizeString(data1[0]));
	          obj.setCount(data1[1]);
	          }
	          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	          pubreport.add(obj);
	       
	      }
	      //System.out.println(headers1);
	      //System.out.println(lines1);
	    }

        return pubreport;

		  }

  
  public List<PublisherReport> getUserdetailsSegmentChannel(String startdate, String enddate, String channel_name,Map<String,String> filter)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
	    
	  List<PublisherReport> pubreport = new ArrayList();
	  String queryfield = "audience_segment";
	  List<String> groupby = new ArrayList<String>();
	  groupby.add("subcategory");
	  
	  
	  pubreport = getQueryFieldChannelFilterGroupBy(queryfield, startdate, enddate, channel_name, groupby, "", filter);
	  
      return pubreport;
	  
	  /*  
	  
	  int size = filter.size();
    String queryfilterbuilder = "";
    String formattedString = "";
    String query = "";
    int j =0;
    for (Map.Entry<String, String> entry : filter.entrySet())
    {
    	if (j==0){
            formattedString = addCommaString(entry.getValue());
    		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
    	
    	}
        else{
        formattedString = addCommaString(entry.getValue());	
        queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
   
        }
        j++;
     
    }
	  
	    String query8 = "Select count(*),audience_segment,subcategory from enhanceduserdatabeta1 where "+queryfilterbuilder+"and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'"+" group by audience_segment,subcategory";
	    CSVResult csvResult8 = getCsvResult(false, query8);
	    List<String> headers8 = csvResult8.getHeaders();
	    List<String> lines8 = csvResult8.getLines();

	    if ((lines8 != null) && (!lines8.isEmpty()) && (!((String)lines8.get(0)).isEmpty()))
	    {
	    	 List<List<String>> data = new ArrayList<List<String>>();
			    for (int i = 0; i < lines8.size(); i++) {
		            List<String> objects = new ArrayList<String>();
		            String [] parts = lines8.get(i).split(",");
		            for(j =0; j< parts.length; j++)
		              objects.add(parts[j]);
		           
		            data.add(objects);
		        }
			    
			    
			    ResultSet obj = ListtoResultSet.getResultSet(headers8, data);
			    String queryfield = "audience_segment";
			    List<String> groupby = new ArrayList();
			    groupby.add("subcategory"); 
		        String filter1 = null;
			    
			    pubreport= NestedJSON.getNestedJSONObject(obj, queryfield, groupby,filter1); 
			 //   System.out.println(nestedJson);
			    return pubreport;
	      //System.out.println(headers1);
	      //System.out.println(lines1);
	    }
*/
     
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  }
  
  
  
  
  
  
  public List<PublisherReport> countBrandNameChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws CsvExtractorException, Exception
		  {
		    String query = "SELECT COUNT(*)as count,brandName FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by brandName";
		    //System.out.println(query);
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        if(data[0].trim().toLowerCase().contains("logitech")==false && data[0].trim().toLowerCase().contains("mozilla")==false && data[0].trim().toLowerCase().contains("web_browser")==false && data[0].trim().toLowerCase().contains("microsoft")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false){ 
		        obj.setBrandname(data[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		        } 
		       }
		  //    //System.out.println(headers);
		  //    //System.out.println(lines);
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> countBrowserChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "SELECT COUNT(*)as count,browser_name FROM enhanceduserdatabeta1 where channel_name ='" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by browser_name";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        obj.setBrowser(data[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		      //System.out.println(headers);
		      //System.out.println(lines);
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> countOSChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "SELECT COUNT(*)as count,system_os FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by system_os";
		    System.out.println(query);
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        String osproperties = oscodeMap.get(data[0]);
		        data[0]=data[0].replace("_"," ").replace("-", " ");
		        obj.setOs(data[0]);
		        obj.setOscode(osproperties);
		        System.out.println(data[0]);
		        obj.setCount(data[1]);
		        System.out.println(osproperties);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		    }
		    
		    return pubreport;
		  }
		  
		  public List<PublisherReport> countModelChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "SELECT COUNT(*)as count,modelName FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by modelName";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");

		        if(data[0].trim().toLowerCase().contains("logitech_revue")==false && data[0].trim().toLowerCase().contains("mozilla_firefox")==false && data[0].trim().toLowerCase().contains("apple_safari")==false && data[0].trim().toLowerCase().contains("generic_web")==false && data[0].trim().toLowerCase().contains("google_compute")==false && data[0].trim().toLowerCase().contains("microsoft_xbox")==false && data[0].trim().toLowerCase().contains("google_chromecast")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false && data[0].trim().toLowerCase().contains("laptop")==false){    
		        String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
		        	
		        obj.setMobile_device_model_name(mobiledeviceproperties[1]);
		        System.out.println(mobiledeviceproperties[1]);
		        obj.setDevicecode(mobiledeviceproperties[0]);
		        System.out.println(mobiledeviceproperties[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		        
		        }
		    }
		  
		    System.out.println(pubreport.toString());
		    return pubreport;
		  }
		  
		  public List<PublisherReport> countCityChannelArticle(String startdate, String enddate, String channel_name, String articlename, String filter)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
			
			  String query = "";
			  
			  String queryfield = "city";
			  
			  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					   
			      
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    Integer accumulatedCount = 0;
		    
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		      
		        String[] data = ((String)lines.get(i)).split(",");
		        if(i<10 && !data[0].equals("undetermined")){
		        String locationproperties = citycodeMap.get(data[0]);
		        data[0]=data[0].replace("_"," ").replace("-"," ");
		        if(citylatlongMap1.get(data[0])!=null && !citylatlongMap1.get(data[0]).isEmpty())
		        obj.setCitylatlong(citylatlongMap1.get(data[0]));
		        obj.setCity(capitalizeString(data[0]));
		        System.out.println(data[0]);
		        obj.setLocationcode(locationproperties);
		        System.out.println(locationproperties);
		     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					obj.setCount(data[1]);
				//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				//	obj.setEngagementTime(data[1]);
				//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				//	obj.setVisitorCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		       }
		       else{
		    	   
		    	  accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
		    	  
		    	  if(i == (lines.size()-1)){
		    		 obj.setCity("Others"); 
		    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				//     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(accumulatedCount.toString());
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(accumulatedCount.toString());
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(accumulatedCount.toString());
		    		 pubreport.add(obj);
		    		 System.out.println("Others");
                     System.out.println(accumulatedCount.toString());
		    	  }
		       }
		       }
		    }
		   
		    System.out.println(pubreport.toString());
		    return pubreport;
		  }
		  
		  
		  public List<PublisherReport> countStateChannelArticle(String startdate, String enddate, String channel_name, String articlename, String filter)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  //  String query = "SELECT COUNT(*)as count,state FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by state order by count desc";
				   
			       String query = "";
			       String queryfield = "state";
			      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					   
			      
			  
			  
			  
			        CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    Integer accumulatedCount = 0;
				    
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				      
				        String[] data = ((String)lines.get(i)).split(",");
				        if(i<10 && !data[0].equals("undetermined")){
				        	data[0]=data[0].replace("_", " ");
				        	String stateId = StateMap1.get(data[0]);
				            obj.setStateId(stateId);

				        	data[0] = capitalizeString(data[0]);
			            	obj.setState(data[0]);
				    //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data[1]);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(data[1]);
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				        pubreport.add(obj);
				       }
				       else{
				    	   
				    	  accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
				    	  
				    	  if(i == (lines.size()-1)){
				    		 obj.setState("Others"); 
				    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
						  //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(accumulatedCount.toString());
								//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								//	obj.setEngagementTime(accumulatedCount.toString());
								//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								//	obj.setVisitorCount(accumulatedCount.toString());
				    		 pubreport.add(obj);
				    		 System.out.println("Others");
		                     System.out.println(accumulatedCount.toString());
				    	  }
				       }
				       }
				    }
				   
				    System.out.println(pubreport.toString());
				    return pubreport;
				  }
		  
		  
		  
		  public List<PublisherReport> countCountryChannelArticle(String startdate, String enddate, String channel_name, String articlename, String filter)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  //  String query = "SELECT COUNT(*)as count,country FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by country order by count desc";
				    
			       String query = "";
			       String queryfield = "country";
			  
			      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				    query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				    
			      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					   
			      
			  
			  
			  
			  
			        CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    Integer accumulatedCount = 0;
				    
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				      
				        String[] data = ((String)lines.get(i)).split(",");
				        if(i<10 && !data[0].equals("undetermined")){
				        	data[0]=data[0].replace("_", " ");
				        	String countryId = CountryMap1.get(data[0]);
				            obj.setCountryId(countryId);
				        	data[0] = capitalizeString(data[0]);
			            	obj.setCountry(data[0]);
				     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data[1]);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(data[1]);
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				        pubreport.add(obj);
				       }
				       else{
				    	   
				    	  accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
				    	  
				    	  if(i == (lines.size()-1)){
				    		 obj.setCountry("Others"); 
				    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
						  //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(accumulatedCount.toString());
								//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								//	obj.setEngagementTime(accumulatedCount.toString());
								//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								//	obj.setVisitorCount(accumulatedCount.toString());
				    		 pubreport.add(obj);
				    		 System.out.println("Others");
		                     System.out.println(accumulatedCount.toString());
				    	  }
				       }
				       }
				    }
				   
				    System.out.println(pubreport.toString());
				    return pubreport;
				  }
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  public List<PublisherReport> countfingerprintChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws CsvExtractorException, Exception
		  {
			  
			  
		//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
			  
		    
			  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
			  
			//	 CSVResult csvResult00 = getCsvResult(false, query00);
				// List<String> headers00 = csvResult00.getHeaders();
		//		 List<String> lines00 = csvResult00.getLines();
			//	 List<PublisherReport> pubreport00 = new ArrayList();  
				
				 
			//	System.out.println(headers00);
			//	System.out.println(lines00);  
				  
				//  for (int i = 0; i < lines00.size(); i++)
			    //  {
			       
			     //   String[] data = ((String)lines00.get(i)).split(",");
			  //      //System.out.println(data[0]);
			     
				  
				  
				  
				//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
			    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
			      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
			      CSVResult csvResult = getCsvResult(false, query);
			      List<String> headers = csvResult.getHeaders();
			      List<String> lines = csvResult.getLines();
			      List<PublisherReport> pubreport = new ArrayList();
			      System.out.println(headers);
			      System.out.println(lines);
			      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
			      for (int i = 0; i < lines.size(); i++)
			      {
			        PublisherReport obj = new PublisherReport();
			        
			        String[] data = ((String)lines.get(i)).split(",");
			       // obj.setDate(data[0]);
			        obj.setReach(data[0]);
			        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
			        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
			        pubreport.add(obj);
			      }
			    }  
			    
		    return pubreport;
		  }
		  
		  
		  
		  
		  
		  public List<PublisherReport> countfingerprintChannelFilter(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					//  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setReach(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					   //     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
	
		  public List<PublisherReport> countbenchmarkfingerprintChannelArticle(String startdate, String enddate, String channel_name, String articlename)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					  String time = startdate;
                      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                      Date date1 = df.parse(time);
                     
                      String time1 = enddate;
                      Date date2 = df.parse(time1);
                            
                     
                     
                      int days = getDifferenceDays(date2, date1)-2;
                      Calendar cal = Calendar.getInstance();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, days);
                      Date benchmarkStartDate1 = cal.getTime();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, -1);
                      Date benchmarkEndDate1 = cal.getTime();


                      String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                      String benchmarkEndDate  = df.format(benchmarkEndDate1);	
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setReach(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  public List<PublisherReport> countbenchmarkfingerprintChannelFilter(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
				//	  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					  String time = startdate;
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                    Date date1 = df.parse(time);
                   
                    String time1 = enddate;
                    Date date2 = df.parse(time1);
                          
                   
                   
                    int days = getDifferenceDays(date2, date1)-2;
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(date1);
                    cal.add(Calendar.DAY_OF_YEAR, days);
                    Date benchmarkStartDate1 = cal.getTime();
                    cal.setTime(date1);
                    cal.add(Calendar.DAY_OF_YEAR, -1);
                    Date benchmarkEndDate1 = cal.getTime();


                    String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                    String benchmarkEndDate  = df.format(benchmarkEndDate1);	
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setReach(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      //  String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  
		  
		  
		  public List<PublisherReport> countfingerprintChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		 
		  
		  
		  
		  public List<PublisherReport> countfingerprintChannelFilterDatewise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					//  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder+" and channel_name = '" + 
						//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					    //    String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  public List<PublisherReport> countbenchmarkfingerprintChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
			  String time = startdate;
              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
              Date date1 = df.parse(time);
             
              String time1 = enddate;
              Date date2 = df.parse(time1);
                    
             
             
              int days = getDifferenceDays(date2, date1)-2;
              Calendar cal = Calendar.getInstance();
              cal.setTime(date1);
              cal.add(Calendar.DAY_OF_YEAR, days);
              Date benchmarkStartDate1 = cal.getTime();
              cal.setTime(date1);
              cal.add(Calendar.DAY_OF_YEAR, -1);
              Date benchmarkEndDate1 = cal.getTime();


              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
					  
              
              String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + benchmarkStartDate  + "'" + " and " + "'" + benchmarkEndDate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  public List<PublisherReport> countbenchmarkfingerprintChannelFilterDatewise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
			  String time = startdate;
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            Date date1 = df.parse(time);
           
            String time1 = enddate;
            Date date2 = df.parse(time1);
                  
           
           
            int days = getDifferenceDays(date2, date1)-2;
            Calendar cal = Calendar.getInstance();
            cal.setTime(date1);
            cal.add(Calendar.DAY_OF_YEAR, days);
            Date benchmarkStartDate1 = cal.getTime();
            cal.setTime(date1);
            cal.add(Calendar.DAY_OF_YEAR, -1);
            Date benchmarkEndDate1 = cal.getTime();


            String benchmarkStartDate = df.format(benchmarkStartDate1);	  
            String benchmarkEndDate  = df.format(benchmarkEndDate1);	
					  
            
          //  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
			//			      channel_name + "' and date between " + "'" + benchmarkStartDate  + "'" + " and " + "'" + benchmarkEndDate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					    //    String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  public List<PublisherReport> countfingerprintChannelArticleHourwise(String startdate, String enddate, String channel_name, String articlename)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  
		  public List<PublisherReport> countfingerprintChannelFilterHourwise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
				//	  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
					//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					   //     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  public List<PublisherReport> countbenchmarkfingerprintChannelArticleHourwise(String startdate, String enddate, String channel_name, String articlename)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
					  String time = startdate;
                      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                      Date date1 = df.parse(time);
                     
                      String time1 = enddate;
                      Date date2 = df.parse(time1);
                            
                     
                     
                      int days = getDifferenceDays(date2, date1)-2;
                      Calendar cal = Calendar.getInstance();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, days);
                      Date benchmarkStartDate1 = cal.getTime();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, -1);
                      Date benchmarkEndDate1 = cal.getTime();


                      String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                      String benchmarkEndDate  = df.format(benchmarkEndDate1);	
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  public List<PublisherReport> countbenchmarkfingerprintChannelFilterHourwise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					//  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
						//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
					  String time = startdate;
                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                    Date date1 = df.parse(time);
                   
                    String time1 = enddate;
                    Date date2 = df.parse(time1);
                          
                   
                   
                    int days = getDifferenceDays(date2, date1)-2;
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(date1);
                    cal.add(Calendar.DAY_OF_YEAR, days);
                    Date benchmarkStartDate1 = cal.getTime();
                    cal.setTime(date1);
                    cal.add(Calendar.DAY_OF_YEAR, -1);
                    Date benchmarkEndDate1 = cal.getTime();


                    String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                    String benchmarkEndDate  = df.format(benchmarkEndDate1);	
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        obj.setDate(data[0]);
					        obj.setReach(data[1]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					  //      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
		  
		  
		  
		  
		  public List<PublisherReport> countbenchmarktotalvisitorsChannelArticle(String startdate, String enddate, String channel_name, String articlename)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					  String time = startdate;
                      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                      Date date1 = df.parse(time);
                     
                      String time1 = enddate;
                      Date date2 = df.parse(time1);
                            
                     
                     
                      int days = getDifferenceDays(date2, date1)-2;
                      Calendar cal = Calendar.getInstance();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, days);
                      Date benchmarkStartDate1 = cal.getTime();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, -1);
                      Date benchmarkEndDate1 = cal.getTime();


                      String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                      String benchmarkEndDate  = df.format(benchmarkEndDate1);	
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" +benchmarkEndDate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setTotalvisits(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
			
		  
		  
		  public List<PublisherReport> countbenchmarktotalvisitorsChannelFilter(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
				//	  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
				//		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					  String time = startdate;
                      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                      Date date1 = df.parse(time);
                     
                      String time1 = enddate;
                      Date date2 = df.parse(time1);
                            
                     
                     
                      int days = getDifferenceDays(date2, date1)-2;
                      Calendar cal = Calendar.getInstance();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, days);
                      Date benchmarkStartDate1 = cal.getTime();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, -1);
                      Date benchmarkEndDate1 = cal.getTime();


                      String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                      String benchmarkEndDate  = df.format(benchmarkEndDate1);	
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" +benchmarkEndDate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setTotalvisits(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					  //      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
		  
		  
		  
			
		  
		  public List<PublisherReport> counttotalvisitorsChannelArticle(String startdate, String enddate, String channel_name, String articlename)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setTotalvisits(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
				  
		  
		  
		  
		  public List<PublisherReport> counttotalvisitorsChannelFilter(String startdate, String enddate, String channel_name, String queryfilterbuilder)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					//  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setTotalvisits(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					   //     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
				  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
				  
				  public List<PublisherReport> counttotalvisitorsChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
		  
				  
				  public List<PublisherReport> counttotalvisitorsChannelFilterDatewise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
						//	  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							 //       String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
		  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countbenchmarktotalvisitorsChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
							  
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" +  benchmarkEndDate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        days = getDifferenceDays(date2, date1)-2;
								       
							        if (days < 0) {
							            days *= -1;
							        }
							        
							        Long unixtimestamp = Long.parseLong(data[0]);
							        
							        Date date3= toDate(unixtimestamp); 
							        
							        
							        cal.setTime(date3);
							        cal.add(Calendar.DAY_OF_YEAR, days);
							        Date date4 = cal.getTime();
							        
							       
							        Long unixTime = date4.getTime(); 
							      
							        obj.setDate(unixTime.toString());
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  public List<PublisherReport> countbenchmarktotalvisitorsChannelFilterDatewise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							//  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
							  
							  String time = startdate;
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                            Date date1 = df.parse(time);
                           
                            String time1 = enddate;
                            Date date2 = df.parse(time1);
                                  
                           
                           
                            int days = getDifferenceDays(date2, date1)-2;
                            Calendar cal = Calendar.getInstance();
                            cal.setTime(date1);
                            cal.add(Calendar.DAY_OF_YEAR, days);
                            Date benchmarkStartDate1 = cal.getTime();
                            cal.setTime(date1);
                            cal.add(Calendar.DAY_OF_YEAR, -1);
                            Date benchmarkEndDate1 = cal.getTime();


                            String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                            String benchmarkEndDate  = df.format(benchmarkEndDate1);	
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" +  benchmarkEndDate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							      //  String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
		  
				  public List<PublisherReport> EngagementTimeChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
				  
				  

				  public List<PublisherReport> EngagementTimeChannelFilterDatewise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							//  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							 //       String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> benchmarkEngagementTimeChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
					  
					  String time = startdate;
					  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					  Date date1 = df.parse(time);
					  
					  String time1 = enddate;
					  Date date2 = df.parse(time1);
					         
					  
					  
					  int days = getDifferenceDays(date1, date2);
					  Calendar cal = Calendar.getInstance();
					  cal.add(Calendar.DATE, days);
					  Date benchmarkStartDate = cal.getTime();
					  Date benchmarkEndDate = date1;
					
					  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
				  
				  
				  
				  
				  public List<PublisherReport> benchmarkEngagementTimeChannelFilterDatewise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
					  
					  String time = startdate;
					  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					  Date date1 = df.parse(time);
					  
					  String time1 = enddate;
					  Date date2 = df.parse(time1);
					         
					  
					  
					  int days = getDifferenceDays(date1, date2);
					  Calendar cal = Calendar.getInstance();
					  cal.add(Calendar.DATE, days);
					  Date benchmarkStartDate = cal.getTime();
					  Date benchmarkEndDate = date1;
					
					  
						    
					//		  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						//		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							    //    String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> EngagementTimeChannelArticle(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setEngagementTime(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
				
				  
				  
				  public List<PublisherReport> EngagementTimeChannelFilter(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							 // String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setEngagementTime(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							   //     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> benchmarkEngagementTimeChannelArticle(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1; 
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setEngagementTime(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
				  
				  
				  public List<PublisherReport> benchmarkEngagementTimeChannelFilter(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							//  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1; 
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setEngagementTime(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							    //    String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
		  
				  public List<PublisherReport> counttotalvisitorsChannelArticleHourwise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							
							  /*
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1;
							*/
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
		  
				  
				  
				  
				  public List<PublisherReport> counttotalvisitorsChannelFilterHourwise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							//  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1;
							
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							   //     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countbenchmarktotalvisitorsChannelArticleHourwise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
							  
							  
							  
							  
							  
							  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate+ "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
		  
				  
				  
				  public List<PublisherReport> countbenchmarktotalvisitorsChannelFilterHourwise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							//  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
							  String time = startdate;
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                            Date date1 = df.parse(time);
                           
                            String time1 = enddate;
                            Date date2 = df.parse(time1);
                                  
                           
                           
                            int days = getDifferenceDays(date2, date1)-2;
                            Calendar cal = Calendar.getInstance();
                            cal.setTime(date1);
                            cal.add(Calendar.DAY_OF_YEAR, days);
                            Date benchmarkStartDate1 = cal.getTime();
                            cal.setTime(date1);
                            cal.add(Calendar.DAY_OF_YEAR, -1);
                            Date benchmarkEndDate1 = cal.getTime();


                            String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                            String benchmarkEndDate  = df.format(benchmarkEndDate1);	
							  
							  
							  
							  
							  
							  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate+ "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setTotalvisits(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							    //    String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
		   
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
		  
				  public List<PublisherReport> EngagementTimeChannelArticleHourwise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
		  
				  
				  public List<PublisherReport> EngagementTimeChannelFilterHourwise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							//  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							   //     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
		  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  

				  public List<PublisherReport> benchmarkEngagementTimeChannelArticleHourwise(String startdate, String enddate, String channel_name, String articlename)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							  
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1;
							
							  
							  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate  + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
				  public List<PublisherReport> benchmarkEngagementTimeChannelFilterHourwise(String startdate, String enddate, String channel_name, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
					//		  String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						//		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							  
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1;
							
							  
							  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate  + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setEngagementTime(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							     //   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
		  
		  
		  
				  
		  public List<PublisherReport> countAudiencesegmentChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws CsvExtractorException, Exception
		  {
		      List<PublisherReport> pubreport = new ArrayList(); 
			  
			  String querya1 = "SELECT COUNT(distinct(cookiehash)) FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate +"' limit 20000000";   
			  
			    //Divide count in different limits 
			
			  
			  List<String> Query = new ArrayList();
			  


			    System.out.println(querya1);
			    
			    final long startTime2 = System.currentTimeMillis();
				
			    
			    CSVResult csvResult1 = null;
				try {
					csvResult1 = AggregationModule.getCsvResult(false, querya1);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    
			    final long endTime2 = System.currentTimeMillis();
				
			    List<String> headers = csvResult1.getHeaders();
			    List<String> lines = csvResult1.getLines();
			    
			    
			    String count = lines.get(0);
			    Double countv1 = Double.parseDouble(count);
			    Double n = 0.0;
			    if(countv1 >= 250000)
			       n=10.0;
			    
			    if(countv1 >= 100000 && countv1 <= 250000 )
			       n=10.0;
			    
			    if(countv1 <= 100000 && countv1 > 100)
		           n=10.0;	    
			   
			    if(countv1 <= 100)
			    	n=1.0;
			    
			    if(countv1 == 0 || countv1 > 50000)
			    {
			    	
			    	return pubreport;
			    	
			    }
			    
			    Double total_length = countv1 - 0;
			    Double subrange_length = total_length/n;	
			    
			    Double current_start = 0.0;
			    for (int i = 0; i < n; ++i) {
			      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
			      Double startlimit = current_start;
			      Double finallimit = current_start + subrange_length;
			      Double index = startlimit +1;
			      if(countv1 == 1)
			    	  index=0.0;
			      String query = "SELECT distinct(cookie_id) FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' Order by cookie_id limit "+index.intValue()+","+finallimit.intValue();  	
				  System.out.println(query);
			  //    Query.add(query);
			      current_start += subrange_length;
			      Query.add(query);
			      
			    }
			    
			    
			    	
			    
			  
			  ExecutorService executorService = Executors.newFixedThreadPool(2000);
		        
		       List<Callable<FastMap<String,Double>>> lst = new ArrayList<Callable<FastMap<String,Double>>>();
		    
		       for(int i=0 ; i < Query.size(); i++ ){
		       lst.add(new AudienceSegmentQueryExecutionThreads(Query.get(i),client,searchDao));
		    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
		       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
		       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
		       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
		        
		       // returns a list of Futures holding their status and results when all complete
		       lst.add(new SubcategoryQueryExecutionThreads(Query.get(i),client,searchDao));
		   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
		       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
		       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
		       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
		       }
		       
		       
		       List<Future<FastMap<String,Double>>> maps = executorService.invokeAll(lst);
		        
		       System.out.println(maps.size() +" Responses recieved.\n");
		        
		       for(Future<FastMap<String,Double>> task : maps)
		       {
		    	   try{
		           if(task!=null)
		    	   System.out.println(task.get().toString());
		    	   }
		    	   catch(Exception e)
		    	   {
		    		   e.printStackTrace();
		    		   continue;
		    	   }
		    	    
		    	   
		    	   }
		        
		       /* shutdown your thread pool, else your application will keep running */
		       executorService.shutdown();
			  
			
			  //  //System.out.println(headers1);
			 //   //System.out.println(lines1);
			    
			    
		       
		       FastMap<String,Double> audiencemap = new FastMap<String,Double>();
		       
		       FastMap<String,Double> subcatmap = new FastMap<String,Double>();
		       
		       Double count1 = 0.0;
		       
		       Double count2 = 0.0;
		       
		       String key ="";
		       String key1 = "";
		       Double value = 0.0;
		       Double vlaue1 = 0.0;
		       
			    for (int i = 0; i < maps.size(); i++)
			    {
			    
			    	if(maps!=null && maps.get(i)!=null){
			        FastMap<String,Double> map = (FastMap<String, Double>) maps.get(i).get();
			    	
			       if(map.size() > 0){
			       
			       if(map.containsKey("audience_segment")==true){
			       for (Map.Entry<String, Double> entry : map.entrySet())
			    	 {
			    	  key = entry.getKey();
			    	  key = key.trim();
			    	  value=  entry.getValue();
			    	if(key.equals("audience_segment")==false) { 
			    	if(audiencemap.containsKey(key)==false)
			    	audiencemap.put(key,value);
			    	else
			    	{
			         count1 = audiencemap.get(key);
			         if(count1!=null)
			         audiencemap.put(key,count1+value);	
			    	}
			      }
			    }
			  }   

			       if(map.containsKey("subcategory")==true){
			       for (Map.Entry<String, Double> entry : map.entrySet())
			    	 {
			    	   key = entry.getKey();
			    	   key = key.trim();
			    	   value=  entry.getValue();
			    	if(key.equals("subcategory")==false) {    
			    	if(subcatmap.containsKey(key)==false)
			    	subcatmap.put(key,value);
			    	else
			    	{
			         count1 = subcatmap.get(key);
			         if(count1!=null)
			         subcatmap.put(key,count1+value);	
			    	}
			    }  
			    	
			   }
			      
			     	       }
			           
			       } 
			    
			    	} 	
			   }    
			    
			    String subcategory = null;
			   
			    if(audiencemap.size()>0){
			   
			    	for (Map.Entry<String, Double> entry : audiencemap.entrySet()) {
			    	//System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
			    

			        PublisherReport obj = new PublisherReport();
			        
			   //     String[] data = ((String)lines.get(i)).split(",");
			        
			     //   if(data[0].trim().toLowerCase().contains("festivals"))
			      //  obj.setAudience_segment("");
			      //  else
			        obj.setAudience_segment( entry.getKey());	
			      //  obj.setCount(String.valueOf(entry.getValue()));
			      
			        if ((!entry.getKey().equals("tech")) && (!entry.getKey().equals("india")) && (!entry.getKey().trim().toLowerCase().equals("foodbeverage")) )
			        {
			         for (Map.Entry<String, Double> entry1 : subcatmap.entrySet()) {
			        	 
			        	    
			        	 
			        	 PublisherReport obj1 = new PublisherReport();
			            
			           
			            if (entry1.getKey().contains(entry.getKey()))
			            {
			             // String substring = "_" + entry.getKey() + "_";
			              subcategory = entry1.getKey();
			           //   if(data[0].trim().toLowerCase().contains("festivals"))
			           //   obj1.setAudience_segment("");
			           //   else
			        
			              //System.out.println(" \n\n\n Key : " + subcategory + " Value : " + entry1.getValue());  
			              obj.setSubcategory(subcategory);
			              obj.setCount(String.valueOf(entry1.getValue()));
			          //    obj.getAudience_segment_data().add(obj1);
			            }
			         
			            pubreport.add(obj);
			         
			         }
			         
			        }
			      
			    }
			    }
			    return pubreport;
		  }
		  
		  public List<PublisherReport> gettimeofdayChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query = "Select count(*) from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        obj.setTime_of_day(data[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		     
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> countPinCodeChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "SELECT COUNT(*)as count,postalcode FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by postalcode";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        String[] data1 = data[0].split("_");
		        String locationproperties  = citycodeMap.get(data1[0]);
		        obj.setPostalcode(data[0]);
		        obj.setCount(data[1]);
		        obj.setLocationcode(locationproperties);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> countLatLongChannelArticle(String startdate, String enddate, String channel_name, String articlename, String filter)
		    throws CsvExtractorException, Exception
		  {
		    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "SELECT COUNT(*)as count,latitude_longitude FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by latitude_longitude";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        String[] data1 = data[0].split("_");
		        String locationproperties  = citycodeMap.get(data1[0]);
		        String[] dashcount = data[0].split("_");
		        if ((dashcount.length == 3) && (data[0].charAt(data[0].length() - 1) != '_'))
		        {
		          if (!dashcount[2].isEmpty())
		          {
		            obj.setLatitude_longitude(data[0]);
		            
		         //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		            obj.setCount(data[1]);
		               
		         //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		          //  obj.setEngagementTime(data[1]);
		        
                   //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		            // obj.setVisitorCount(data[1]);
		            
                     obj.setLocationcode(locationproperties);
		            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		            String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		          }
		          pubreport.add(obj);
		        }
		      }
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> gettimeofdayQuarterChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query = "Select count(*) from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='4h')";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        obj.setTime_of_day(data[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		     
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> gettimeofdayDailyChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query = "Select count(*) from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1d')";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        obj.setTime_of_day(data[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		      System.out.println(headers);
		      System.out.println(lines);
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> getdayQuarterdataChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query = "Select count(*),QuarterValue from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY QuarterValue";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    System.out.println(headers);
		      System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        if (data[0].equals("quarter1")) {
		          data[0] = "quarter1 (00 - 04 AM)";
		        }
		        if (data[0].equals("quarter2")) {
		          data[0] = "quarter2 (04 - 08 AM)";
		        }
		        if (data[0].equals("quarter3")) {
		          data[0] = "quarter3 (08 - 12 AM)";
		        }
		        if (data[0].equals("quarter4")) {
		          data[0] = "quarter4 (12 - 16 PM)";
		        }
		        if (data[0].equals("quarter5")) {
		          data[0] = "quarter5 (16 - 20 PM)";
		        }
		        if (data[0].equals("quarter6")) {
		          data[0] = "quarter6 (20 - 24 PM)";
		        }
		        obj.setTime_of_day(data[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		      System.out.println(headers);
		      System.out.println(lines);
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> getGenderChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query = "Select count(*),gender from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY gender";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    List<PublisherReport> pubreport = new ArrayList();
		    
		    System.out.println(headers);
		    System.out.println(lines);
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        obj.setGender(capitalizeString(data[0]));
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		      System.out.println(headers);
		      System.out.println(lines);
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> getAgegroupChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query = "Select count(*),agegroup from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY agegroup";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        obj.setAge(data[0]);
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		    
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> getISPChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query = "Select count(*),ISP from enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY ISP";
		    CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    System.out.println(headers);
		    System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        if(data[0].trim().toLowerCase().equals("_ltd")==false){ 
		        obj.setISP(capitalizeString(data[0]));
		        obj.setCount(data[1]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		        String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		         }
		        }
		     // System.out.println(headers);
		     // System.out.println(lines);
		    }
		    return pubreport;
		  }
		  
		  public List<PublisherReport> getOrgChannelArticle(String startdate, String enddate, String channel_name, String articlename)
		    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
		  {
		    String query1 = "Select count(*),organisation from enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY organisation";
		    CSVResult csvResult1 = getCsvResult(false, query1);
		    List<String> headers1 = csvResult1.getHeaders();
		    List<String> lines1 = csvResult1.getLines();
		    System.out.println(headers1);
		      System.out.println(lines1);
		    List<PublisherReport> pubreport = new ArrayList();
		    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
		    {
		      for (int i = 0; i < lines1.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data1 = ((String)lines1.get(i)).split(",");
		        if ((data1[0].length() > 3) && (data1[0].charAt(0) != '_') && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("communication")) && (!data1[0].trim().toLowerCase().contains("cable")) && (!data1[0].trim().toLowerCase().contains("telecom")) && (!data1[0].trim().toLowerCase().contains("network")) && (!data1[0].trim().toLowerCase().contains("isp")) && (!data1[0].trim().toLowerCase().contains("hathway")) && (!data1[0].trim().toLowerCase().contains("internet")) && (!data1[0].trim().toLowerCase().equals("_ltd")) && (!data1[0].trim().toLowerCase().contains("googlebot")) && (!data1[0].trim().toLowerCase().contains("sify")) && (!data1[0].trim().toLowerCase().contains("bsnl")) && (!data1[0].trim().toLowerCase().contains("reliance")) && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("tata")) && (!data1[0].trim().toLowerCase().contains("nextra")))
		        {
		          obj.setOrganisation(capitalizeString(data1[0]));
		          obj.setCount(data1[1]);
		          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		          pubreport.add(obj);
		        }
		      }
		    //  System.out.println(headers1);
		    //  System.out.println(lines1);
		    }
		    return pubreport;
		  }
		  
		  
		  public List<PublisherReport> getChannelSectionArticleList(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines1.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data1 = ((String)lines1.get(i)).split(",");
				      
				        
				          String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				          obj.setCount(data1[1]);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          obj.setSection(sectionname);
				          pubreport.add(obj);
				        
				      }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				    }
				    return pubreport;
				  }
		  
		  
		  
		  public List<PublisherReport> getChannelArticleReferrerList(String startdate, String enddate, String channel_name, String articlename)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines1.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data1 = ((String)lines1.get(i)).split(",");
				        if ((data1[0].trim().toLowerCase().contains("facebook") || (data1[0].trim().toLowerCase().contains("google"))))
				        {
				          //if(data1[0].equals()) 
				         
				          obj.setReferrerSource(data1[0]);
				          obj.setCount(data1[1]);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        }
				      }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				    }
				    return pubreport;
				  }
		  
		  
		  public List<PublisherReport> getChannelArticleReferrerList1(String startdate, String enddate, String channel_name, String articlename)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				//    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				 //   {
				    
				    String data0="";
				    String data1="";
				    
				    for (int i = 0; i < 5; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				      //  String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="http://m.facebook.com";
				          data1 = "15.0";
				          }
				          

				          if(i == 1){
				          data0="http://www.facebook.com";
				          data1 = "5.0";
				          }
				          
				          
				          if(i == 2){
					          data0="http://l.facebook.com";
					          data1 = "3.0";
					          }
					    
				          
				          if(i == 3){
					          data0="http://www.google.co.pk";
					          data1 = "3.0";
					          }
					          
				          if(i==4){
				        	  data0="http://www.google.co.in";
				              data1 = "2.0";
				          }
				              
				           obj.setReferrerSource(data0);
				          obj.setCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				   }
				    return pubreport;
		  
		  
		  
		  
		  
				      }  
		  
		  
		 
		  public List<PublisherReport> getDeviceTypeChannelArticle(String startdate, String enddate, String channel_name, String articlename)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				//    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				 //   {
				    String data0="";
				    String data1="";
				    
				    for (int i = 0; i < 3; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="Mobile";
				          data1 = "18.0";
				          }
				          

				          if(i == 1){
				          data0="Tablet";
				          data1 = "5.0";
				          }
				          
				          
				          if(i == 2){
					          data0="Desktop";
					          data1 = "5.0";
					      }
					    
				        
				          obj.setDevice_type(data0);
				          obj.setCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				   }
				    return pubreport;
		  
		  
		  
		  
		  
				      }  
		  
		  
		
		  public List<PublisherReport> getIncomeChannelArticle(String startdate, String enddate, String channel_name, String articlename)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				//    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				 //   {
				   
				    String data0="";
				    String data1="";
				    
				    for (int i = 0; i < 3; i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				       // String[] data1 = ((String)lines1.get(i)).split(",");
				       
				          //if(data1[0].equals()) 
				         
				          if(i == 0){
				          data0="Medium";
				          data1 = "15.0";
				          }
				          

				          if(i == 1){
				          data0="High";
				          data1 = "6.0";
				          }
				          
				          
				          if(i == 2){
					          data0="Low";
					          data1 = "7.0";
					      }
					    
				        
				          obj.setIncomelevel(data0);
				          obj.setCount(data1);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				   }
				    return pubreport;
		  
		  
		  
		  
		  
				      }  
		  
		  
		  public List<PublisherReport> getArticleMetaData(String startdate, String enddate, String channel_name, String articlename)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				//    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				 //   {
				        PublisherReport obj = new PublisherReport();
				     
				     
					    
				        
				          obj.setArticleAuthor("admin");
				          obj.setArticleTags("filmfare,shahid kapoor,deepika padukone,bollywood");
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				   //   }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				  
				    return pubreport;
		  
		  
		  
		  
		  
				      }  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  public List<PublisherReport> getChannelArticleReferredPostsList(String startdate, String enddate, String channel_name, String articlename)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),clickurloriginal from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY clickurloriginal";
				    
				    
				    Site site = GetMiddlewareData.getSiteDetails(channel_name);
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines1.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data1 = ((String)lines1.get(i)).split(",");
				          String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				          obj.setCount(data1[1]);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1]; obj.setArticleTitle(articleTitle1);obj.setArticle(articlename);
				          pubreport.add(obj);
				        
				      }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				    }
				    return pubreport;
				  }
		  
		  public List<PublisherReport> getChannelArticleReferredPostsListInternal(String startdate, String enddate, String channel_name, String articlename, String filter, String typefilter)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),clickurloriginal from enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY clickurloriginal";
				    
				    
				    Site site = GetMiddlewareData.getSiteDetails(channel_name);
				    String siteurl = site.getSiteurl();
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines1.size(); i++)
				      {
				    	try{  
				    	  
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data1 = ((String)lines1.get(i)).split(",");
				        Article article = getArticleMetaData(data1[0]);
				        if(typefilter == null || typefilter.isEmpty() || typefilter.equals("Internal")){
				        if(data1[0].contains(siteurl) && !data1[0].contains("jpg") && !data1[0].contains("png") &&  !data1[0].contains("gif") &&  !data1[0].contains("mp4") && !data1[0].contains("avi") &&  !data1[0].contains("swf")) { 
				        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			            	 obj.setCount(data1[1]);
			               
			            //     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //   obj.setEngagementTime(data1[1]);
			        

			              //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			              //   obj.setVisitorCount(data1[1]);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
				          String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
				          
				          pubreport.add(obj);
				          }
				        }
				        
				        if(typefilter.equals("External")){
					        if(data1[0].contains(siteurl)== false) { 
					        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
					     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				            	 obj.setCount(data1[1]);
				               
				            //     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				             //    obj.setEngagementTime(data1[1]);
				        

				              //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				                // obj.setVisitorCount(data1[1]);
					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
					          String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
					          pubreport.add(obj);
					          }
					        }
				       
				        if(typefilter.equals("image")){
					        if(data1[0].contains("jpg") || data1[0].contains("png") ||  data1[0].contains("gif")  ) { 
					        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
					     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				            	 obj.setCount(data1[1]);
				               
				            //     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				             //    obj.setEngagementTime(data1[1]);
				        

				               //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				               //  obj.setVisitorCount(data1[1]);
					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
					          String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
					          pubreport.add(obj);
					          }
					        }
				        
				        if(typefilter.equals("video")){
					        if(data1[0].contains("mp4") || data1[0].contains("avi") ||  data1[0].contains("swf") ) { 
					        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
					 //       if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				            	 obj.setCount(data1[1]);
				               
				          //       if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				           //      obj.setEngagementTime(data1[1]);
				        

				             //    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				              //   obj.setVisitorCount(data1[1]);
					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
					          String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
					          pubreport.add(obj);
					          }
					        }
				        
				        
				        
				        }
				    	catch(Exception e){
				    		
				    		continue;
				    	}
				        
				        
				        
				      }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				    }
				    return pubreport;
				  }
		  
		  
				  
		  
		  public List<PublisherReport> getChannelSectionArticleCount(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines1.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data1 = ((String)lines1.get(i)).split(",");
				        if ((data1[0].length() > 3) && (data1[0].charAt(0) != '_') && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("communication")) && (!data1[0].trim().toLowerCase().contains("cable")) && (!data1[0].trim().toLowerCase().contains("telecom")) && (!data1[0].trim().toLowerCase().contains("network")) && (!data1[0].trim().toLowerCase().contains("isp")) && (!data1[0].trim().toLowerCase().contains("hathway")) && (!data1[0].trim().toLowerCase().contains("internet")) && (!data1[0].trim().toLowerCase().equals("_ltd")) && (!data1[0].trim().toLowerCase().contains("googlebot")) && (!data1[0].trim().toLowerCase().contains("sify")) && (!data1[0].trim().toLowerCase().contains("bsnl")) && (!data1[0].trim().toLowerCase().contains("reliance")) && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("tata")) && (!data1[0].trim().toLowerCase().contains("nextra")))
				        {
				          String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				          obj.setCount(data1[1]);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          obj.setSection(sectionname);
				          pubreport.add(obj);
				        }
				      }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				    }
				    return pubreport;
				  }
		  
		  public List<PublisherReport> countBrandNameChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
				    String query = "SELECT COUNT(*)as count,brandName FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by brandName";
				    //System.out.println(query);
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if(data[0].trim().toLowerCase().contains("logitech")==false && data[0].trim().toLowerCase().contains("mozilla")==false && data[0].trim().toLowerCase().contains("web_browser")==false && data[0].trim().toLowerCase().contains("microsoft")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false){ 
				        obj.setBrandname(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				        } 
				       }
				  //    //System.out.println(headers);
				  //    //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countBrowserChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = "SELECT COUNT(*)as count,browser_name FROM enhanceduserdatabeta1 where channel_name ='" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by browser_name";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setBrowser(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countOSChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = "SELECT COUNT(*)as count,system_os FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by system_os";
				    System.out.println(query);
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setOs(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countModelChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = "SELECT COUNT(*)as count,modelName FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by modelName";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");

				        if(data[0].trim().toLowerCase().contains("logitech_revue")==false && data[0].trim().toLowerCase().contains("mozilla_firefox")==false && data[0].trim().toLowerCase().contains("apple_safari")==false && data[0].trim().toLowerCase().contains("generic_web")==false && data[0].trim().toLowerCase().contains("google_compute")==false && data[0].trim().toLowerCase().contains("microsoft_xbox")==false && data[0].trim().toLowerCase().contains("google_chromecast")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false && data[0].trim().toLowerCase().contains("laptop")==false){    
				        obj.setMobile_device_model_name(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				        
				        }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countCityChannelSection(String startdate, String enddate, String channel_name, String sectionname, String filter)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  //  String query = "SELECT COUNT(*)as count,city FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by city order by count desc";
				  

					    String query = "";
					    String queryfield = "city";
					  
				        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
					   
				        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						   
				        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";    
					  
					  
					System.out.println(query);
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    Integer accumulatedCount = 0;
				    
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if(i<10 && !data[0].equals("undetermined")){
				        	String locationproperties = citycodeMap.get(data[0]);
					        data[0]=data[0].replace("_"," ").replace("-"," ");
					        if(citylatlongMap1.get(data[0])!=null && !citylatlongMap1.get(data[0]).isEmpty())
					        obj.setCitylatlong(citylatlongMap1.get(data[0]));
					        data[0]=capitalizeString(data[0]);
					        obj.setCity(capitalizeString(data[0]));
					        System.out.println(data[0]);
					        obj.setLocationcode(locationproperties);
				     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data[1]);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(data[1]);
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				        }
				        else{
					    	   
				        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
					    	  if(i == (lines.size()-1)){
					    		 obj.setCity("Others"); 
					    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					    		 obj.setSection(sectionname);
					    	//	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(accumulatedCount.toString());
									//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									//	obj.setEngagementTime(accumulatedCount.toString());
									//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									//	obj.setVisitorCount(accumulatedCount.toString());
					    		 pubreport.add(obj);
					    	  }
					       }
				        
				      
				      
				      
				      }
				    }
				    return pubreport;
				  }
				  
				  
				  public List<PublisherReport> countStateChannelSection(String startdate, String enddate, String channel_name, String sectionname, String filter)
						    throws CsvExtractorException, Exception
						  {
						    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
						    //String query = "SELECT COUNT(*)as count,state FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by state order by count desc";
						    
					      

					    String query = "";
					    String queryfield = "state";
					  
				        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
					   
				        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						   
				        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					  
					  
					        System.out.println(query);
						    CSVResult csvResult = getCsvResult(false, query);
						    List<String> headers = csvResult.getHeaders();
						    List<String> lines = csvResult.getLines();
						    System.out.println(headers);
						    System.out.println(lines);
						    Integer accumulatedCount = 0;
						    
						    List<PublisherReport> pubreport = new ArrayList();
						    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
						      for (int i = 0; i < lines.size(); i++)
						      {
						        PublisherReport obj = new PublisherReport();
						        
						        String[] data = ((String)lines.get(i)).split(",");
						        if(i < 10 && !data[0].equals("undetermined")){
						        	data[0]=data[0].replace("_", " ");
						        	String stateId = StateMap1.get(data[0]);
						            obj.setStateId(stateId);

						        	data[0] = capitalizeString(data[0]);
					            	obj.setState(data[0]);
						       // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(data[1]);
								//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									//obj.setEngagementTime(data[1]);
									//if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									//obj.setVisitorCount(data[1]);
						        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						        obj.setSection(sectionname);
						        pubreport.add(obj);
						        }
						        else{
							    	   
						        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
							    	  if(i == (lines.size()-1)){
							    		 obj.setState("Others"); 
							    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							    		 obj.setSection(sectionname);
							    //		 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
												obj.setCount(accumulatedCount.toString());
										//		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
										//		obj.setEngagementTime(accumulatedCount.toString());
											//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
											//	obj.setVisitorCount(accumulatedCount.toString());
							    		 pubreport.add(obj);
							    	  }
							       }
						        
						      
						      
						      
						      }
						    }
						    return pubreport;
						  }
				  
				  public List<PublisherReport> countCountryChannelSection(String startdate, String enddate, String channel_name, String sectionname, String filter)
						    throws CsvExtractorException, Exception
						  {
						    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
						//    String query = "SELECT COUNT(*)as count,country FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by country order by count desc";
						    

					    String query = "";
					    String queryfield = "country";
					  
				        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
					   
				        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						   
				        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				        query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					  
					  
					        System.out.println(query);
						    CSVResult csvResult = getCsvResult(false, query);
						    List<String> headers = csvResult.getHeaders();
						    List<String> lines = csvResult.getLines();
						    System.out.println(headers);
						    System.out.println(lines);
						    Integer accumulatedCount = 0;
						    
						    List<PublisherReport> pubreport = new ArrayList();
						    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
						      for (int i = 0; i < lines.size(); i++)
						      {
						        PublisherReport obj = new PublisherReport();
						        
						        String[] data = ((String)lines.get(i)).split(",");
						        if(i < 10 && !data[0].equals("undetermined")){
						        	data[0]=data[0].replace("_", " ");
						        	String countryId = CountryMap1.get(data[0]);
						            obj.setCountryId(countryId);
						        	data[0] = capitalizeString(data[0]);
					            	obj.setCountry(data[0]);
						  //      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(data[1]);
								//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								//	obj.setEngagementTime(data[1]);
								//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								//	obj.setVisitorCount(data[1]);
						        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						        obj.setSection(sectionname);
						        pubreport.add(obj);
						        }
						        else{
							    	   
						        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
							    	  if(i == (lines.size()-1)){
							    		 obj.setCountry("Others"); 
							    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							    		 obj.setSection(sectionname);
							    		// if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
												obj.setCount(accumulatedCount.toString());
											//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
											//	obj.setEngagementTime(accumulatedCount.toString());
											//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
											//	obj.setVisitorCount(accumulatedCount.toString());
							    		 pubreport.add(obj);
							    	  }
							       }
						        
						      
						      
						      
						      }
						    }
						    return pubreport;
						  }
				  
				  
				  
				  public List<PublisherReport> countfingerprintChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
					  
					  
				//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					      CSVResult csvResult = getCsvResult(false, query);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					      System.out.println(headers);
					      System.out.println(lines);
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					       // obj.setDate(data[0]);
					        obj.setReach(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        obj.setSection(sectionname);
					        pubreport.add(obj);
					      }
					    }  
					    
				    return pubreport;
				  }
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countbenchmarkfingerprintChannelSection(String startdate, String enddate, String channel_name, String sectionname)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setReach(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionname);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
						  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
			
				  public List<PublisherReport> countfingerprintChannelDatewise(String startdate, String enddate, String channel_name)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				
				  
				  public List<PublisherReport> countBenchmarkfingerprintChannelDatewise(String startdate, String enddate, String channel_name)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
					  String time = startdate;
                      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                      Date date1 = df.parse(time);
                     
                      String time1 = enddate;
                      Date date2 = df.parse(time1);
                            
                     
                     
                      int days = getDifferenceDays(date2, date1)-2;
                      Calendar cal = Calendar.getInstance();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, days);
                      Date benchmarkStartDate1 = cal.getTime();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, -1);
                      Date benchmarkEndDate1 = cal.getTime();


                      String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                      String benchmarkEndDate  = df.format(benchmarkEndDate1);	
                      
                      
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        
							        days = getDifferenceDays(date2, date1)-2;
								       
							        if (days < 0) {
							            days *= -1;
							        }
							        
							        Long unixtimestamp = Long.parseLong(data[0]);
							        
							        Date date3= toDate(unixtimestamp); 
							        
							        
							        cal.setTime(date3);
							        cal.add(Calendar.DAY_OF_YEAR, days);
							        Date date4 = cal.getTime();
							        
							       
							        Long unixTime = date4.getTime(); 
							      
							        obj.setDate(unixTime.toString());
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  public static Date toDate(long timestamp) {
					    Date date = new Date (timestamp);
					    return date;
					}
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countfingerprintChannelDateHourwise(String startdate, String enddate, String channel_name)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  public List<PublisherReport> countbenchmarkfingerprintChannelDateHourwise(String startdate, String enddate, String channel_name)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate  + "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        days = getDifferenceDays(date2, date1)-2;
								       
							        if (days < 0) {
							            days *= -1;
							        }
							        
							        
							        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							        Date date = dateFormat.parse(data[0]);
							        
							        Long unixtimestamp = date.getTime();
							        
							        Date date3= toDate(unixtimestamp); 
							        
							        
							        cal.setTime(date3);
							        cal.add(Calendar.DAY_OF_YEAR, days);
							        Date date4 = cal.getTime();
							        
							       
							        Long unixTime = date4.getTime(); 
							      
							        
							        obj.setDate(dateFormat.format(date4));
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  			  
				  
				  
				  
				  
				  public List<PublisherReport> countfingerprintChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionname);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  public List<PublisherReport> countbenchmarkfingerprintChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							 
					  
					  String time = startdate;
                      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                      Date date1 = df.parse(time);
                     
                      String time1 = enddate;
                      Date date2 = df.parse(time1);
                            
                     
                     
                      int days = getDifferenceDays(date2, date1)-2;
                      Calendar cal = Calendar.getInstance();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, days);
                      Date benchmarkStartDate1 = cal.getTime();
                      cal.setTime(date1);
                      cal.add(Calendar.DAY_OF_YEAR, -1);
                      Date benchmarkEndDate1 = cal.getTime();


                      String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                      String benchmarkEndDate  = df.format(benchmarkEndDate1);	
					  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionname);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countfingerprintChannelSectionDateHourwise(String startdate, String enddate, String channel_name, String sectionname)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionname);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  public List<PublisherReport> countbenchmarkfingerprintChannelSectionDateHourwise(String startdate, String enddate, String channel_name, String sectionname)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" +  benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        obj.setDate(data[0]);
							        obj.setReach(data[1]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionname);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> counttotalvisitorsChannelSection(String startdate, String enddate, String channel_name, String sectionname)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setTotalvisits(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionname);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
						  
					
				  
				  public List<PublisherReport> countbenchmarktotalvisitorsChannelSection(String startdate, String enddate, String channel_name, String sectionname)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							      System.out.println(headers);
							      System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setTotalvisits(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        obj.setSection(sectionname);
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
						  
						  public List<PublisherReport> counttotalvisitorsChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
				  
						  
						  public List<PublisherReport> counbenchmarktotalvisitorsChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
							  
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1;
							  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" +benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate  + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  public List<PublisherReport> countbenchmarktotalvisitorsChannelSectionDateHourwise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									  String time = startdate;
		                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		                              Date date1 = df.parse(time);
		                             
		                              String time1 = enddate;
		                              Date date2 = df.parse(time1);
		                                    
		                             
		                             
		                              int days = getDifferenceDays(date2, date1)-2;
		                              Calendar cal = Calendar.getInstance();
		                              cal.setTime(date1);
		                              cal.add(Calendar.DAY_OF_YEAR, days);
		                              Date benchmarkStartDate1 = cal.getTime();
		                              cal.setTime(date1);
		                              cal.add(Calendar.DAY_OF_YEAR, -1);
		                              Date benchmarkEndDate1 = cal.getTime();


		                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
		                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
									  
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" +  benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  
						  
						  
						  
						  
						  
						  
						  public List<PublisherReport> counttotalvisitorsChannelSectionDateHourwise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  public List<PublisherReport> engagementTimeChannelSection(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									       // obj.setDate(data[0]);
									        obj.setEngagementTime(data[0]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }		  
						  
						  public List<PublisherReport> benchmarkengagementTimeChannelSection(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									  String time = startdate;
									  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
									  Date date1 = df.parse(time);
									  
									  String time1 = enddate;
									  Date date2 = df.parse(time1);
									         
									  
									  
									  int days = getDifferenceDays(date1, date2);
									  Calendar cal = Calendar.getInstance();
									  cal.add(Calendar.DATE, days);
									  Date benchmarkStartDate = cal.getTime();
									  Date benchmarkEndDate = date1;
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" +benchmarkEndDate + "'";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									       // obj.setDate(data[0]);
									        obj.setEngagementTime(data[0]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }		  
						  
						  
						  
						  
						  
						
						  public List<PublisherReport> engagementTimeChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  
						  public List<PublisherReport> benchmarkengagementTimeChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
							  String time = startdate;
							  DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							  Date date1 = df.parse(time);
							  
							  String time1 = enddate;
							  Date date2 = df.parse(time1);
							         
							  
							  
							  int days = getDifferenceDays(date1, date2);
							  Calendar cal = Calendar.getInstance();
							  cal.add(Calendar.DATE, days);
							  Date benchmarkStartDate = cal.getTime();
							  Date benchmarkEndDate = date1;
							  
							  
							  
							  
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate 
									      + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
						  
						  
						  
						  
						  
						  
						  
						  
						  
				   
						  public List<PublisherReport> engagementTimeChannelSectionDateHourwise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				   
						  public List<PublisherReport> benchmarkengagementTimeChannelSectionDateHourwise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									
									  String time = startdate;
                                      DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                      Date date1 = df.parse(time);
                                     
                                      String time1 = enddate;
                                      Date date2 = df.parse(time1);
                                            
                                     
                                     
                                      int days = getDifferenceDays(date1, date2);
                                      Calendar cal = Calendar.getInstance();
                                      cal.add(Calendar.DATE, days);
                                      Date benchmarkStartDate = cal.getTime();
                                      Date benchmarkEndDate = date1;

										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate  + "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
						  
						  
						  
						  
						  public List<PublisherReport> counttotalvisitorsChannelDatewise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  public List<PublisherReport> countBenchmarktotalvisitorsChannelDatewise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
							  
							  
							  
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate+ "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        days = getDifferenceDays(date2, date1)-2;
										       
									        if (days < 0) {
									            days *= -1;
									        }
									        
									        Long unixtimestamp = Long.parseLong(data[0]);
									        
									        Date date3= toDate(unixtimestamp); 
									        
									        
									        cal.setTime(date3);
									        cal.add(Calendar.DAY_OF_YEAR, days);
									        Date date4 = cal.getTime();
									        
									       
									        Long unixTime = date4.getTime(); 
									      
									        obj.setDate(unixTime.toString());
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  public List<PublisherReport> engagementTimeChannel(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime)as eT FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									      //  obj.setDate(data[0]);
									        obj.setEngagementTime(data[0]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  public List<PublisherReport> engagementTimeChannelLive(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime)as eT FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									      //  obj.setDate(data[0]);
									        obj.setEngagementTime(data[0]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  public List<PublisherReport> benchmarkengagementTimeChannel(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
									  String time = startdate;
		                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		                              Date date1 = df.parse(time);
		                             
		                              String time1 = enddate;
		                              Date date2 = df.parse(time1);
		                                    
		                             
		                             
		                              int days = getDifferenceDays(date2, date1)-2;
		                              Calendar cal = Calendar.getInstance();
		                              cal.setTime(date1);
		                              cal.add(Calendar.DAY_OF_YEAR, days);
		                              Date benchmarkStartDate1 = cal.getTime();
		                              cal.setTime(date1);
		                              cal.add(Calendar.DAY_OF_YEAR, -1);
		                              Date benchmarkEndDate1 = cal.getTime();


		                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
		                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime)as eT FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									      //  obj.setDate(data[0]);
									        obj.setEngagementTime(data[0]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
						  
						  
						  
						  
						  
						  
						  
						  public List<PublisherReport> engagementTimeChannelDatewise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime)as eT,date FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  
						  public List<PublisherReport> benchmarkengagementTimeChannelDatewise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
							  
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime)as eT,date FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" +  benchmarkStartDate+ "'" + " and " + "'" + benchmarkEndDate + "'" + " group by date";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        days = getDifferenceDays(date2, date1)-2;
										       
									        if (days < 0) {
									            days *= -1;
									        }
									        
									        Long unixtimestamp = Long.parseLong(data[0]);
									        
									        Date date3= toDate(unixtimestamp); 
									        
									        
									        cal.setTime(date3);
									        cal.add(Calendar.DAY_OF_YEAR, days);
									        Date date4 = cal.getTime();
									        
									       
									        Long unixTime = date4.getTime(); 
									      
									        obj.setDate(unixTime.toString());
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  public List<PublisherReport> engagementTimeChannelDateHourwise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime)as eT,date FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  
						  
						  public List<PublisherReport> benchmarkengagementTimeChannelDateHourwise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
									  String time = startdate;
		                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		                              Date date1 = df.parse(time);
		                             
		                              String time1 = enddate;
		                              Date date2 = df.parse(time1);
		                                    
		                             
		                             
		                              int days = getDifferenceDays(date2, date1)-2;
		                              Calendar cal = Calendar.getInstance();
		                              cal.setTime(date1);
		                              cal.add(Calendar.DAY_OF_YEAR, days);
		                              Date benchmarkStartDate1 = cal.getTime();
		                              cal.setTime(date1);
		                              cal.add(Calendar.DAY_OF_YEAR, -1);
		                              Date benchmarkEndDate1 = cal.getTime();

		                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
		                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT SUM(engagementTime)as eT,date FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        days = getDifferenceDays(date2, date1)-2;
										       
									        if (days < 0) {
									            days *= -1;
									        }
									        
									        
									        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
									        Date date = dateFormat.parse(data[0]);
									        
									        Long unixtimestamp = date.getTime();
									        
									        Date date3= toDate(unixtimestamp); 
									        
									        
									        cal.setTime(date3);
									        cal.add(Calendar.DAY_OF_YEAR, days);
									        Date date4 = cal.getTime();
									        
									       
									        Long unixTime = date4.getTime(); 
									      
									        
									        obj.setDate(dateFormat.format(date4));
									        obj.setEngagementTime(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									       
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						   
						  
						  
						  
						  
						  
						  
						  
						  public List<PublisherReport> counttotalvisitorsChannelSectionDateHourlywise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									//  String query00 = "SELECT date_histogram(field=request_time,interval=1h)cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits,gender FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY gender, date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
				  
				  
						  public List<PublisherReport> counttotalvisitorsChannelSectionDateHourlyMinutewise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									//  String query00 = "SELECT date_histogram(field=request_time,interval=1h)cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
						  public List<PublisherReport> counttotalvisitorsChannelDateHourlywise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									//  String query00 = "SELECT date_histogram(field=request_time,interval=1h)cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
				  
						  
						  public List<PublisherReport> countbenchmarktotalvisitorsChannelDateHourlywise(String startdate, String enddate, String channel_name)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									//  String query00 = "SELECT date_histogram(field=request_time,interval=1h)cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();


                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits FROM enhanceduserdatabeta1 where channel_name = '" + 
									      channel_name + "' and date between " + "'" + benchmarkStartDate + "'" + " and " + "'" + benchmarkEndDate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        days = getDifferenceDays(date2, date1)-2;
										       
									        if (days < 0) {
									            days *= -1;
									        }
									        
									        
									        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
									        Date date = dateFormat.parse(data[0]);
									        
									        Long unixtimestamp = date.getTime();
									        
									        Date date3= toDate(unixtimestamp); 
									        
									        
									        cal.setTime(date3);
									        cal.add(Calendar.DAY_OF_YEAR, days);
									        Date date4 = cal.getTime();
									        
									       
									        Long unixTime = date4.getTime(); 
									      
									        
									        obj.setDate(dateFormat.format(date4));
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
				  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
				  
						  public List<PublisherReport> counttotalvisitorsChannelDateHourlyMinutewise(String startdate, String enddate, String channel_name, String sectionname)
								    throws CsvExtractorException, Exception
								  {
									  
									  
								//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
									  
								    
									//  String query00 = "SELECT date_histogram(field=request_time,interval=1h)cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
									//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
									  
									//	 CSVResult csvResult00 = getCsvResult(false, query00);
										// List<String> headers00 = csvResult00.getHeaders();
								//		 List<String> lines00 = csvResult00.getLines();
									//	 List<PublisherReport> pubreport00 = new ArrayList();  
										
										 
									//	System.out.println(headers00);
									//	System.out.println(lines00);  
										  
										//  for (int i = 0; i < lines00.size(); i++)
									    //  {
									       
									     //   String[] data = ((String)lines00.get(i)).split(",");
									  //      //System.out.println(data[0]);
									     
										  
										  
										  
										//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
									    String query = "SELECT count(*)as visits FROM enhanceduserdatabeta1 where refcurrentoriginal channel_name = '" + 
									      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
									      CSVResult csvResult = getCsvResult(false, query);
									      List<String> headers = csvResult.getHeaders();
									      List<String> lines = csvResult.getLines();
									      List<PublisherReport> pubreport = new ArrayList();
									      System.out.println(headers);
									      System.out.println(lines);
									      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
									      for (int i = 0; i < lines.size(); i++)
									      {
									        PublisherReport obj = new PublisherReport();
									        
									        String[] data = ((String)lines.get(i)).split(",");
									        obj.setDate(data[0]);
									        obj.setTotalvisits(data[1]);
									        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
									        obj.setSection(sectionname);
									        pubreport.add(obj);
									      }
									    }  
									    
								    return pubreport;
								  }
				  
				  
				  
				  
				  
				  
				  
						  
				  public List<PublisherReport> countAudiencesegmentChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
				      List<PublisherReport> pubreport = new ArrayList(); 
					  
					  String querya1 = "SELECT COUNT(distinct(cookiehash)) FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate +"' limit 20000000";   
					  
					    //Divide count in different limits 
					
					  
					  List<String> Query = new ArrayList();
					  


					    System.out.println(querya1);
					    
					    final long startTime2 = System.currentTimeMillis();
						
					    
					    CSVResult csvResult1 = null;
						try {
							csvResult1 = AggregationModule.getCsvResult(false, querya1);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					    
					    final long endTime2 = System.currentTimeMillis();
						
					    List<String> headers = csvResult1.getHeaders();
					    List<String> lines = csvResult1.getLines();
					    
					    
					    String count = lines.get(0);
					    Double countv1 = Double.parseDouble(count);
					    Double n = 0.0;

					    if(countv1 >= 100000 && countv1 <= 120000)
					       n=10.0;
					    
					    if(countv1 <= 100000 && countv1 > 100)
				           n=10.0;	    
					   
					    if(countv1 <= 100)
					    	n=1.0;
					    
					    if(countv1 == 0 || countv1 > 50000)
					    {
					    	
					    	return pubreport;
					    	
					    }
					    
					    Double total_length = countv1 - 0;
					    Double subrange_length = total_length/n;	
					    
					    Double current_start = 0.0;
					    for (int i = 0; i < n; ++i) {
					      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
					      Double startlimit = current_start;
					      Double finallimit = current_start + subrange_length;
					      Double index = startlimit +1;
					      if(countv1 == 1)
					    	  index=0.0;
					      String query = "SELECT distinct(cookie_id) FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+sectionname+"' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' Order by cookie_id limit "+index.intValue()+","+finallimit.intValue();  	
						  System.out.println(query);
					  //    Query.add(query);
					      current_start += subrange_length;
					      Query.add(query);
					      
					    }
					    
					    
					    	
					    
					  
					  ExecutorService executorService = Executors.newFixedThreadPool(2000);
				        
				       List<Callable<FastMap<String,Double>>> lst = new ArrayList<Callable<FastMap<String,Double>>>();
				    
				       for(int i=0 ; i < Query.size(); i++ ){
				       lst.add(new AudienceSegmentQueryExecutionThreads(Query.get(i),client,searchDao));
				    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				        
				       // returns a list of Futures holding their status and results when all complete
				       lst.add(new SubcategoryQueryExecutionThreads(Query.get(i),client,searchDao));
				   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				       }
				       
				       
				       List<Future<FastMap<String,Double>>> maps = executorService.invokeAll(lst);
				        
				       System.out.println(maps.size() +" Responses recieved.\n");
				        
				       for(Future<FastMap<String,Double>> task : maps)
				       {
				    	   try{
				           if(task!=null)
				    	   System.out.println(task.get().toString());
				    	   }
				    	   catch(Exception e)
				    	   {
				    		   e.printStackTrace();
				    		   continue;
				    	   }
				    	    
				    	   
				    	   }
				        
				       /* shutdown your thread pool, else your application will keep running */
				       executorService.shutdown();
					  
					
					  //  //System.out.println(headers1);
					 //   //System.out.println(lines1);
					    
					    
				       
				       FastMap<String,Double> audiencemap = new FastMap<String,Double>();
				       
				       FastMap<String,Double> subcatmap = new FastMap<String,Double>();
				       
				       Double count1 = 0.0;
				       
				       Double count2 = 0.0;
				       
				       String key ="";
				       String key1 = "";
				       Double value = 0.0;
				       Double vlaue1 = 0.0;
				       
					    for (int i = 0; i < maps.size(); i++)
					    {
					    
					    	if(maps!=null && maps.get(i)!=null){
					        FastMap<String,Double> map = (FastMap<String, Double>) maps.get(i).get();
					    	
					       if(map.size() > 0){
					       
					       if(map.containsKey("audience_segment")==true){
					       for (Map.Entry<String, Double> entry : map.entrySet())
					    	 {
					    	  key = entry.getKey();
					    	  key = key.trim();
					    	  value=  entry.getValue();
					    	if(key.equals("audience_segment")==false) { 
					    	if(audiencemap.containsKey(key)==false)
					    	audiencemap.put(key,value);
					    	else
					    	{
					         count1 = audiencemap.get(key);
					         if(count1!=null)
					         audiencemap.put(key,count1+value);	
					    	}
					      }
					    }
					  }   

					       if(map.containsKey("subcategory")==true){
					       for (Map.Entry<String, Double> entry : map.entrySet())
					    	 {
					    	   key = entry.getKey();
					    	   key = key.trim();
					    	   value=  entry.getValue();
					    	if(key.equals("subcategory")==false) {    
					    	if(subcatmap.containsKey(key)==false)
					    	subcatmap.put(key,value);
					    	else
					    	{
					         count1 = subcatmap.get(key);
					         if(count1!=null)
					         subcatmap.put(key,count1+value);	
					    	}
					    }  
					    	
					   }
					      
					     	       }
					           
					       } 
					    
					    	} 	
					   }    
					    
					    String subcategory = null;
					   
					    if(audiencemap.size()>0){
					   
					    	for (Map.Entry<String, Double> entry : audiencemap.entrySet()) {
					    	//System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
					    

					        PublisherReport obj = new PublisherReport();
					        
					   //     String[] data = ((String)lines.get(i)).split(",");
					        
					     //   if(data[0].trim().toLowerCase().contains("festivals"))
					      //  obj.setAudience_segment("");
					      //  else
					        obj.setAudience_segment( entry.getKey());	
					  //      obj.setCount(String.valueOf(entry.getValue()));
					      
					        if ((!entry.getKey().equals("tech")) && (!entry.getKey().equals("india")) && (!entry.getKey().trim().toLowerCase().equals("foodbeverage")) )
					        {
					         for (Map.Entry<String, Double> entry1 : subcatmap.entrySet()) {
					        	 
					        	    
					        	 
					        	 PublisherReport obj1 = new PublisherReport();
					            
					           
					            if (entry1.getKey().contains(entry.getKey()))
					            {
					              //String substring = "_" + entry.getKey() + "_";
					              subcategory = entry1.getKey();
					           //   if(data[0].trim().toLowerCase().contains("festivals"))
					           //   obj1.setAudience_segment("");
					           //   else
					        
					              //System.out.println(" \n\n\n Key : " + subcategory + " Value : " + entry1.getValue());  
					              obj.setSubcategory(subcategory);
					              obj.setCount(String.valueOf(entry1.getValue()));
					           //   obj.getAudience_segment_data().add(obj1);
					            }
					          }
					          pubreport.add(obj);
					        }
					      
					    }
					    }
					    return pubreport;
				  }
				  
				  public List<PublisherReport> gettimeofdayChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*) from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				     
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countPinCodeChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = "SELECT COUNT(*)as count,postalcode FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by postalcode";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				    	  PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        String[] data1 = data[0].split("_");
					        String locationproperties  = citycodeMap.get(data1[0]);
					        obj.setPostalcode(data[0]);
					        obj.setCount(data[1]);
					        obj.setLocationcode(locationproperties);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            obj.setSection(sectionname);
				            pubreport.add(obj);
				      
				      }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countLatLongChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = "SELECT COUNT(*)as count,latitude_longitude FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by latitude_longitude";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        String[] dashcount = data[0].split("_");
				        if ((dashcount.length == 3) && (data[0].charAt(data[0].length() - 1) != '_'))
				        {
				          if (!dashcount[2].isEmpty())
				          {
				            obj.setLatitude_longitude(data[0]);
				            obj.setCount(data[1]);
				            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            obj.setSection(sectionname);
				          }
				          pubreport.add(obj);
				        }
				      }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> gettimeofdayQuarterChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*) from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='4h')";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				     
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> gettimeofdayDailyChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*) from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1d')";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				      System.out.println(headers);
				      System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getdayQuarterdataChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),QuarterValue from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY QuarterValue";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    System.out.println(headers);
				      System.out.println(lines);
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if (data[0].equals("quarter1")) {
				          data[0] = "quarter1 (00 - 04 AM)";
				        }
				        if (data[0].equals("quarter2")) {
				          data[0] = "quarter2 (04 - 08 AM)";
				        }
				        if (data[0].equals("quarter3")) {
				          data[0] = "quarter3 (08 - 12 AM)";
				        }
				        if (data[0].equals("quarter4")) {
				          data[0] = "quarter4 (12 - 16 PM)";
				        }
				        if (data[0].equals("quarter5")) {
				          data[0] = "quarter5 (16 - 20 PM)";
				        }
				        if (data[0].equals("quarter6")) {
				          data[0] = "quarter6 (20 - 24 PM)";
				        }
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				      System.out.println(headers);
				      System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getGenderChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),gender from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY gender";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    
				    System.out.println(headers);
				    System.out.println(lines);
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setGender(capitalizeString(data[0]));
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				      System.out.println(headers);
				      System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getAgegroupChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),agegroup from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY agegroup";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setAge(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				      }
				    
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getISPChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),ISP from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY ISP";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    System.out.println(headers);
				    System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if(data[0].trim().toLowerCase().equals("_ltd")==false){ 
				        obj.setISP(capitalizeString(data[0]));
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        obj.setSection(sectionname);
				        pubreport.add(obj);
				         }
				        }
				     // System.out.println(headers);
				     // System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getOrgChannelSection(String startdate, String enddate, String channel_name, String sectionname)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),organisation from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY organisation";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    System.out.println(headers1);
				      System.out.println(lines1);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines1.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data1 = ((String)lines1.get(i)).split(",");
				        if ((data1[0].length() > 3) && (data1[0].charAt(0) != '_') && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("communication")) && (!data1[0].trim().toLowerCase().contains("cable")) && (!data1[0].trim().toLowerCase().contains("telecom")) && (!data1[0].trim().toLowerCase().contains("network")) && (!data1[0].trim().toLowerCase().contains("isp")) && (!data1[0].trim().toLowerCase().contains("hathway")) && (!data1[0].trim().toLowerCase().contains("internet")) && (!data1[0].trim().toLowerCase().equals("_ltd")) && (!data1[0].trim().toLowerCase().contains("googlebot")) && (!data1[0].trim().toLowerCase().contains("sify")) && (!data1[0].trim().toLowerCase().contains("bsnl")) && (!data1[0].trim().toLowerCase().contains("reliance")) && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("tata")) && (!data1[0].trim().toLowerCase().contains("nextra")))
				        {
				          obj.setOrganisation(capitalizeString(data1[0]));
				          obj.setCount(data1[1]);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          obj.setSection(sectionname);
				          pubreport.add(obj);
				        }
				      }
				    //  System.out.println(headers1);
				    //  System.out.println(lines1);
				    }
				    return pubreport;
				  }
				  
				  
				
				  
				  
				  
				  public List<PublisherReport> getChannelSectionReferrerList(String startdate, String enddate, String channel_name, String sectionname)
						    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
						  {
						    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where refcurrent like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
						    CSVResult csvResult1 = getCsvResult(false, query1);
						    List<String> headers1 = csvResult1.getHeaders();
						    List<String> lines1 = csvResult1.getLines();
						    System.out.println(headers1);
						      System.out.println(lines1);
						    List<PublisherReport> pubreport = new ArrayList();
						    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
						    {
						      for (int i = 0; i < lines1.size(); i++)
						      {
						        PublisherReport obj = new PublisherReport();
						        
						        String[] data1 = ((String)lines1.get(i)).split(",");
						        if ((data1[0].trim().toLowerCase().contains("facebook") || (data1[0].trim().toLowerCase().contains("google"))))
						        {
						          obj.setReferrerSource(data1[0]);
						          obj.setCount(data1[1]);
						          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						          obj.setSection(sectionname);
						          pubreport.add(obj);
						        }
						      }
						    //  System.out.println(headers1);
						    //  System.out.println(lines1);
						    }
						    return pubreport;
						  }
				  
				  
				  public List<PublisherReport> getChannelSectionReferredPostsList(String startdate, String enddate, String channel_name, String sectionname)
						    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
						  {
						    String query1 = "Select count(*),clickedurl from enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY clickedurl";
						    CSVResult csvResult1 = getCsvResult(false, query1);
						    List<String> headers1 = csvResult1.getHeaders();
						    List<String> lines1 = csvResult1.getLines();
						    System.out.println(headers1);
						      System.out.println(lines1);
						    List<PublisherReport> pubreport = new ArrayList();
						    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
						    {
						      for (int i = 0; i < lines1.size(); i++)
						      {
						        PublisherReport obj = new PublisherReport();
						        
						        String[] data1 = ((String)lines1.get(i)).split(",");
						          String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
						          obj.setCount(data1[1]);
						          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						          obj.setSection(sectionname);
						          pubreport.add(obj);
						        
						      }
						    //  System.out.println(headers1);
						    //  System.out.println(lines1);
						    }
						    return pubreport;
						  }
				  
				  
				  
				  public List<PublisherReport> countNewUsersChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname, String filter)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query00);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							//      System.out.println(headers);
							//      System.out.println(lines);
							      Double count = 0.0;
							      String cookieIds = "";
							      String count1= "";
							      String count2= "";
							      
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							       
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        if (Double.parseDouble(data[1].trim()) < 2.0)
							        {
							        count++;
							        
							        
							        cookieIds = cookieIds+"'"+data[0].trim()+"'"+",";
							        }
							        
							       }
							    }  
							       
							      
							      cookieIds = cookieIds.substring(0,cookieIds.length()-1);
							      
							      if(filter == null || filter.isEmpty() || filter.equals("pageviews"))
							      {
							    	  
							    	  String query01 = "SELECT COUNT(*)as count FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							    	  
							    	  CSVResult csvResult1 = getCsvResult(false, query01);
								      List<String> headers1 = csvResult1.getHeaders();
								      List<String> lines1 = csvResult1.getLines();
							    	  
								      if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty())) {
									      for (int i = 0; i < lines1.size(); i++)
									      {
									       
									        
									        String[] data2 = ((String)lines1.get(i)).split(",");
									        count1 = data2[0];
									        
									       }
									    }  
								      
								      
								      
							      }
							      
							      
							      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
							      {
							    	  
							    	  String query02 = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							    	  
							    	  CSVResult csvResult2 = getCsvResult(false, query02);
								      List<String> headers2 = csvResult2.getHeaders();
								      List<String> lines2 = csvResult2.getLines();
							    	  
								      if ((lines2 != null) && (!lines2.isEmpty()) && (!((String)lines2.get(0)).isEmpty())) {
									      for (int i = 0; i < lines2.size(); i++)
									      {
									       
									        
									        String[] data3 = ((String)lines2.get(i)).split(",");
									        count2 = data3[0];
									        
									       }
									    }  
								      
								      
								      
							      }
							      
							      
							      
							      
							      
							      PublisherReport obj = new PublisherReport();
							      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(count1);
										if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
										obj.setCount(count2);
										if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
										obj.setCount(count.toString());
							      obj.setVisitorType("New Visitors");
							      obj.setSection(sectionname);
							      pubreport.add(obj);
							      System.out.println("Section:"+sectionname+"Count:"+count);
							      
						    return pubreport;
						  }
				  
				  
				  public List<PublisherReport> countReturningUsersChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname, String filter)
						    throws CsvExtractorException, Exception
						  {
							  
							  
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     String cookieIds = "";
					     String count1 = "";
						 String count2 = ""; 
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					   //   System.out.println(headers);
					   //   System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) >= 2.0)
					        {
					        count++;
					       
					        cookieIds = cookieIds+"'"+data[0].trim()+"'"+",";
					        }
					        
					       }
					    }  
					       
					      
					      cookieIds = cookieIds.substring(0,cookieIds.length()-1);
					      
					      if(filter == null || filter.isEmpty() || filter.equals("pageviews"))
					      {
					    	  
					    	  String query01 = "SELECT COUNT(*)as count FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult1 = getCsvResult(false, query01);
						      List<String> headers1 = csvResult1.getHeaders();
						      List<String> lines1 = csvResult1.getLines();
					    	  
						      if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty())) {
							      for (int i = 0; i < lines1.size(); i++)
							      {
							       
							        
							        String[] data2 = ((String)lines1.get(i)).split(",");
							        count1 = data2[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
					      {
					    	  
					    	  String query02 = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult2 = getCsvResult(false, query02);
						      List<String> headers2 = csvResult2.getHeaders();
						      List<String> lines2 = csvResult2.getLines();
					    	  
						      if ((lines2 != null) && (!lines2.isEmpty()) && (!((String)lines2.get(0)).isEmpty())) {
							      for (int i = 0; i < lines2.size(); i++)
							      {
							       
							        
							        String[] data3 = ((String)lines2.get(i)).split(",");
							        count2 = data3[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count1);
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(count2);
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count.toString());
					      obj.setVisitorType("Returning Visitors");
					      obj.setSection(sectionname);
					      pubreport.add(obj);
					      System.out.println("Section:"+sectionname+"Count:"+count);
					      
				          return pubreport;
						  }
				  
				  
				  
				  public List<PublisherReport> countLoyalUsersChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname,String filter)
						    throws CsvExtractorException, Exception
						  {
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 String cookieIds = "";
						 String count1 = "";
						 String count2 = "";
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					//      System.out.println(headers);
					 //     System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count++;
					        count++;
					        cookieIds = cookieIds+"'"+data[0].trim()+"'"+",";
					        }
					        
					       }
					    }  
					       
					      
					      cookieIds = cookieIds.substring(0,cookieIds.length()-1);
					      
					      if(filter == null || filter.isEmpty() || filter.equals("pageviews"))
					      {
					    	  
					    	  String query01 = "SELECT COUNT(*)as count FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult1 = getCsvResult(false, query01);
						      List<String> headers1 = csvResult1.getHeaders();
						      List<String> lines1 = csvResult1.getLines();
					    	  
						      if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty())) {
							      for (int i = 0; i < lines1.size(); i++)
							      {
							       
							        
							        String[] data2 = ((String)lines1.get(i)).split(",");
							        count1 = data2[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
					      {
					    	  
					    	  String query02 = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult2 = getCsvResult(false, query02);
						      List<String> headers2 = csvResult2.getHeaders();
						      List<String> lines2 = csvResult2.getLines();
					    	  
						      if ((lines2 != null) && (!lines2.isEmpty()) && (!((String)lines2.get(0)).isEmpty())) {
							      for (int i = 0; i < lines2.size(); i++)
							      {
							       
							        
							        String[] data3 = ((String)lines2.get(i)).split(",");
							        count2 = data3[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count1);
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(count2);
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count.toString());
					      obj.setVisitorType("Loyal Visitors");
					      obj.setSection(sectionname);
					      pubreport.add(obj);
					      System.out.println("Section:"+sectionname+"Count:"+count);
					      
				          return pubreport;
							  
						
						  }
			
				  
				  
				  public List<PublisherReport> countNewUsersChannelDatewiseFilter(String startdate, String enddate, String channel_name, String filter,Map<String,String>filter1)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					    int size = filter1.size();
				        String queryfilterbuilder = "";
				        String formattedString = "";
				        String query = "";
				        int j =0;
				        for (Map.Entry<String, String> entry : filter1.entrySet())
				        {
				        	if (j==0){
				                formattedString = addCommaString(entry.getValue());
				        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
				        	
				        	}
				            else{
				            formattedString = addCommaString(entry.getValue());	
				            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
				       
				            }
				            j++;
				         
				        }
					  
					  
					  
					  
					  
						    
							  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      
							  
							   
							  
							  
							  
							  
							      CSVResult csvResult = getCsvResult(false, query00);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							//      System.out.println(headers);
							 //     System.out.println(lines);
							      Double count = 0.0;
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							       
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        if (Double.parseDouble(data[1].trim()) < 2.0)
							        {
							        count++;
							        
							        }
							        
							       }
							    }  
							
							      PublisherReport obj = new PublisherReport();
							   //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(count.toString());
									//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									//	obj.setEngagementTime(numberFormat.format(count));
									//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									//	obj.setVisitorCount(numberFormat.format(count));
							      obj.setVisitorType("New Visitors");
							      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							      pubreport.add(obj);
							   
							      
						    return pubreport;
						  }
				  
				  
				  public List<PublisherReport> countReturningUsersChannelDatewiseFilter(String startdate, String enddate, String channel_name, String filter,Map<String,String>filter1)
						    throws CsvExtractorException, Exception
						  {
							  
							  
					  
					  
					  
					  int size = filter1.size();
				        String queryfilterbuilder = "";
				        String formattedString = "";
				        String query = "";
				        int j =0;
				        for (Map.Entry<String, String> entry : filter1.entrySet())
				        {
				        	if (j==0){
				                formattedString = addCommaString(entry.getValue());
				        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
				        	
				        	}
				            else{
				            formattedString = addCommaString(entry.getValue());	
				            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
				       
				            }
				            j++;
				         
				        }
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      
					   
					  
					  
					  
					  
					  
					  
					  
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					   //   System.out.println(headers);
					   //   System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) >= 2.0)
					        {
					        count++;
					        
					        }
					        
					       }
					    }  
					
					      PublisherReport obj = new PublisherReport();
					//      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count.toString());
						//		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(numberFormat.format(count));
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(numberFormat.format(count));
					      obj.setVisitorType("Returning Visitors");
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      pubreport.add(obj);
					      
				          return pubreport;
						  }
				  
				  
				  
				  public List<PublisherReport> countLoyalUsersChannelDatewiseFilter(String startdate, String enddate, String channel_name, String filter,Map<String,String>filter1)
						    throws CsvExtractorException, Exception
						  {
					 
					  
					  
					  int size = filter1.size();
				        String queryfilterbuilder = "";
				        String formattedString = "";
				        String query = "";
				        int j =0;
				        for (Map.Entry<String, String> entry : filter1.entrySet())
				        {
				        	if (j==0){
				                formattedString = addCommaString(entry.getValue());
				        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
				        	
				        	}
				            else{
				            formattedString = addCommaString(entry.getValue());	
				            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
				       
				            }
				            j++;
				         
				        }
								  
					  
					  
					  
					  
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      
					      
					   
					  
					  
					  
					  
					  
					  
					  
					  
					  
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					 //     System.out.println(headers);
					 //     System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count++;
					        
					        }
					        
					       }
					    }  
					
					      PublisherReport obj = new PublisherReport();
					  //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(numberFormat.format(count));
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(numberFormat.format(count));
					      obj.setVisitorType("Loyal Visitors");
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      pubreport.add(obj);
					  
					      
				          return pubreport;
						  }			 
				  
				  
				  public List<PublisherReport> countUsersChannelDatewiseFilter(String startdate, String enddate, String channel_name, String filter,Map<String,String>filter1)
						    throws CsvExtractorException, Exception
						  {
					 
					  
					  
					  int size = filter1.size();
				        String queryfilterbuilder = "";
				        String formattedString = "";
				        String query = "";
				        int j =0;
				        for (Map.Entry<String, String> entry : filter1.entrySet())
				        {
				        	if (j==0){
				                
				        		if(entry.getKey().contains("tag"))
				        	    queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";
				        		else{
				        		formattedString = addCommaString(entry.getValue());
				        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
				        		}
				        	}
				            else{
				            
				            	if(entry.getKey().contains("tag"))
					        	    queryfilterbuilder = queryfilterbuilder+" and "+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";	
				            else{	
				            formattedString = addCommaString(entry.getValue());	
				            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
				            }
				            }
				            j++;
				         
				        }
				        
					  
					  
					  
					  
				        String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
						  
						//	 CSVResult csvResult00 = getCsvResult(false, query00);
							// List<String> headers00 = csvResult00.getHeaders();
					//		 List<String> lines00 = csvResult00.getLines();
						//	 List<PublisherReport> pubreport00 = new ArrayList();  
							
							 
						//	System.out.println(headers00);
						//	System.out.println(lines00);  
							  
							//  for (int i = 0; i < lines00.size(); i++)
						    //  {
						       
						     //   String[] data = ((String)lines00.get(i)).split(",");
						  //      //System.out.println(data[0]);
						     
							  
							  
						//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
						  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
						    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
						      CSVResult csvResult = getCsvResult(false, query00);
						      List<String> headers = csvResult.getHeaders();
						      List<String> lines = csvResult.getLines();
						      List<PublisherReport> pubreport = new ArrayList();
						 //     System.out.println(headers);
						 //     System.out.println(lines);
						    
						      
						      Double count1 = 0.0;
						      Double pageViews1 = 0.0;
						      Double engagementTime1 = 0.0;
						      
						      
						      
						      Double count2 = 0.0;
						      Double pageViews2 = 0.0;
						      Double engagementTime2 = 0.0;
						      
						      Double count3 = 0.0;
						      Double pageViews3 = 0.0;
						      Double engagementTime3 = 0.0;
						      StringBuilder sb = new StringBuilder();
						      Long st = System.currentTimeMillis();
						      if ((lines != null) && (!lines.isEmpty())) {
						      for (int i = 0; i < lines.size(); i++)
						      {
						       
						        
						        String[] data = ((String)lines.get(i)).split(",");
						        
						        if (Double.parseDouble(data[1].trim()) < 2.0)
						        {
						        count1++;
						        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
						        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
						        
						        }
						        
						        
						        
						        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
						        {
						        count2++;
						        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
						        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
						        
						        }
						        
						        
						        if (Double.parseDouble(data[1].trim()) > 7.0)
						        {
						        count3++;
						        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
						        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
						        
						        }
						        
						       }
						    }  
						       
						      
						     
						      
						      
						      
						      
						      PublisherReport obj = new PublisherReport();
						      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(pageViews1.toString());
									if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									obj.setCount(engagementTime1.toString());
									if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									obj.setCount(count1.toString());
						      obj.setVisitorType("New Visitors");
						    
						      
						      PublisherReport obj1 = new PublisherReport();
						      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj1.setCount(pageViews2.toString());
									if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									obj1.setCount(engagementTime2.toString());
									if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									obj1.setCount(count2.toString());
						      obj1.setVisitorType("Returning Visitors");

						      
						      PublisherReport obj2 = new PublisherReport();
						      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj2.setCount(pageViews3.toString());
									if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									obj2.setCount(engagementTime3.toString());
									if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									obj2.setCount(count3.toString());
						      obj2.setVisitorType("Loyal Visitors");

						      
						      
						      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						      pubreport.add(obj);
						      pubreport.add(obj1);
						      pubreport.add(obj2);
						      
					          return pubreport;
						  }			 
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countNewUsersChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename, String filter)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
							  String cookieIds ="";
							  String count1= "";
							  String count2="";
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query00);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							 //     System.out.println(headers);
							 //     System.out.println(lines);
							      Double count = 0.0;
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							       
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        if (Double.parseDouble(data[1].trim()) < 2.0)
							        {
							        count++;
							        
							        
							        cookieIds = cookieIds+"'"+data[0].trim()+"'"+",";
							        }
							        
							       }
							    }  
							       
							      
							      cookieIds = cookieIds.substring(0,cookieIds.length()-1);
							      
							      if(filter == null || filter.isEmpty() || filter.equals("pageviews"))
							      {
							    	  
							    	  String query01 = "SELECT COUNT(*)as count FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							    	  
							    	  CSVResult csvResult1 = getCsvResult(false, query01);
								      List<String> headers1 = csvResult1.getHeaders();
								      List<String> lines1 = csvResult1.getLines();
							    	  
								      if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty())) {
									      for (int i = 0; i < lines1.size(); i++)
									      {
									       
									        
									        String[] data2 = ((String)lines1.get(i)).split(",");
									        count1 = data2[0];
									        
									       }
									    }  
								      
								      
								      
							      }
							      
							      
							      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
							      {
							    	  
							    	  String query02 = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							    	  
							    	  CSVResult csvResult2 = getCsvResult(false, query02);
								      List<String> headers2 = csvResult2.getHeaders();
								      List<String> lines2 = csvResult2.getLines();
							    	  
								      if ((lines2 != null) && (!lines2.isEmpty()) && (!((String)lines2.get(0)).isEmpty())) {
									      for (int i = 0; i < lines2.size(); i++)
									      {
									       
									        
									        String[] data3 = ((String)lines2.get(i)).split(",");
									        count2 = data3[0];
									        
									       }
									    }  
								      
								      
								      
							      }
							      
							      
							      
							      
							      
							      PublisherReport obj = new PublisherReport();
							      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(count1);
										if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
										obj.setCount(count2);
										if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
										obj.setCount(count.toString());
							      obj.setVisitorType("New Visitors");
							      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							      pubreport.add(obj);
							      System.out.println("Article:"+articlename+"Count:"+count);
							      
						    return pubreport;
						  }
				  
				  
				  
				  
				  public List<PublisherReport> countNewUsersChannelArticleDatewiseFilter(String startdate, String enddate, String channel_name, String articlename, String filter, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder + " and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query00);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							 //     System.out.println(headers);
							 //     System.out.println(lines);
							      Double count = 0.0;
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							       
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        if (Double.parseDouble(data[1].trim()) < 2.0)
							        {
							        count++;
							        
							        }
							        
							       }
							    }  
							
							      PublisherReport obj = new PublisherReport();
							  //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(count.toString());
									//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									//	obj.setEngagementTime(numberFormat.format(count));
									//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									//	obj.setVisitorCount(numberFormat.format(count));
							      obj.setVisitorType("New Visitors");
							      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							      pubreport.add(obj);
							      System.out.println("Article:"+articlename+"Count:"+count);
							      
						    return pubreport;
						  }
				  
				  
				  public List<PublisherReport> countNewUsersChannelSectionDatewiseFilter(String startdate, String enddate, String channel_name, String sectionname, String filter, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder + " and section like '%"+sectionname+"%' and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query00);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							 //     System.out.println(headers);
							 //     System.out.println(lines);
							      Double count = 0.0;
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							       
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        if (Double.parseDouble(data[1].trim()) < 2.0)
							        {
							        count++;
							        
							        }
							        
							       }
							    }  
							
							      PublisherReport obj = new PublisherReport();
							  //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(count.toString());
									//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									//	obj.setEngagementTime(numberFormat.format(count));
									//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									//	obj.setVisitorCount(numberFormat.format(count));
							      obj.setVisitorType("New Visitors");
							    //  String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
							      pubreport.add(obj);
							  //    System.out.println("Article:"+articlename+"Count:"+count);
							      
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countReturningUsersChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename, String filter)
						    throws CsvExtractorException, Exception
						  {
							  
							  
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  String count1="";
						  String count2="";
						  String cookieIds="";
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					//      System.out.println(headers);
					//      System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) >= 2.0)
					        {
					        count++;
					        
					        
					        cookieIds = cookieIds+"'"+data[0].trim()+"'"+",";
					        }
					        
					       }
					    }  
					       
					      
					      cookieIds = cookieIds.substring(0,cookieIds.length()-1);
					      
					      if(filter == null || filter.isEmpty() || filter.equals("pageviews"))
					      {
					    	  
					    	  String query01 = "SELECT COUNT(*)as count FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult1 = getCsvResult(false, query01);
						      List<String> headers1 = csvResult1.getHeaders();
						      List<String> lines1 = csvResult1.getLines();
					    	  
						      if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty())) {
							      for (int i = 0; i < lines1.size(); i++)
							      {
							       
							        
							        String[] data2 = ((String)lines1.get(i)).split(",");
							        count1 = data2[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
					      {
					    	  
					    	  String query02 = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult2 = getCsvResult(false, query02);
						      List<String> headers2 = csvResult2.getHeaders();
						      List<String> lines2 = csvResult2.getLines();
					    	  
						      if ((lines2 != null) && (!lines2.isEmpty()) && (!((String)lines2.get(0)).isEmpty())) {
							      for (int i = 0; i < lines2.size(); i++)
							      {
							       
							        
							        String[] data3 = ((String)lines2.get(i)).split(",");
							        count2 = data3[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count1);
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(count2);
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count.toString());
					      obj.setVisitorType("Returning Visitors");
					      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					      System.out.println("Article:"+articlename+"Count:"+count);
					      
				          return pubreport;
						  }
				  
				  
				  public List<PublisherReport> countReturningUsersChannelArticleDatewiseFilter(String startdate, String enddate, String channel_name, String articlename, String filter, String queryfilterbuilder )
						    throws CsvExtractorException, Exception
						  {
							  
							  
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder + " and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					//      System.out.println(headers);
					//      System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) >= 2.0)
					        {
					        count++;
					        
					        }
					        
					       }
					    }  
					
					      PublisherReport obj = new PublisherReport();
					  //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(numberFormat.format(count));
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(numberFormat.format(count));
					      obj.setVisitorType("Returning Visitors");
					      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					      System.out.println("Article:"+articlename+"Count:"+count);
					      
				          return pubreport;
						  }
				  
				  
				  public List<PublisherReport> countReturningUsersChannelSectionDatewiseFilter(String startdate, String enddate, String channel_name, String sectionname, String filter, String queryfilterbuilder )
						    throws CsvExtractorException, Exception
						  {
							  
							  
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder + " and section like '%"+sectionname+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					//      System.out.println(headers);
					//      System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) >= 2.0)
					        {
					        count++;
					        
					        }
					        
					       }
					    }  
					
					      PublisherReport obj = new PublisherReport();
					  //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(numberFormat.format(count));
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(numberFormat.format(count));
					      obj.setVisitorType("Returning Visitors");
					      //String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					     // System.out.println("Article:"+articlename+"Count:"+count);
					      
				          return pubreport;
						  }
				    
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countLoyalUsersChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename,String filter)
						    throws CsvExtractorException, Exception
						  {
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  String cookieIds = "";
						  String count1= "";
						  String count2="";
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					  //    System.out.println(headers);
					  //    System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count++;
					       
					        cookieIds = cookieIds+"'"+data[0].trim()+"'"+",";
					        }
					        
					       }
					    }  
					       
					      
					      cookieIds = cookieIds.substring(0,cookieIds.length()-1);
					      
					      if(filter == null || filter.isEmpty() || filter.equals("pageviews"))
					      {
					    	  
					    	  String query01 = "SELECT COUNT(*)as count FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult1 = getCsvResult(false, query01);
						      List<String> headers1 = csvResult1.getHeaders();
						      List<String> lines1 = csvResult1.getLines();
					    	  
						      if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty())) {
							      for (int i = 0; i < lines1.size(); i++)
							      {
							       
							        
							        String[] data2 = ((String)lines1.get(i)).split(",");
							        count1 = data2[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime"))
					      {
					    	  
					    	  String query02 = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and cookie_id in ("+cookieIds+")"+" and channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    	  
					    	  CSVResult csvResult2 = getCsvResult(false, query02);
						      List<String> headers2 = csvResult2.getHeaders();
						      List<String> lines2 = csvResult2.getLines();
					    	  
						      if ((lines2 != null) && (!lines2.isEmpty()) && (!((String)lines2.get(0)).isEmpty())) {
							      for (int i = 0; i < lines2.size(); i++)
							      {
							       
							        
							        String[] data3 = ((String)lines2.get(i)).split(",");
							        count2 = data3[0];
							        
							       }
							    }  
						      
						      
						      
					      }
					      
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count1);
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(count2);
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count.toString());
					      obj.setVisitorType("Loyal Visitors");
					      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					      System.out.println("Article:"+articlename+"Count:"+count);
					      
				          return pubreport;
						  }			  
						
				  
				  
				  
				  
				  public List<PublisherReport> countLoyalUsersChannelArticleDatewiseFilter(String startdate, String enddate, String channel_name, String articlename,String filter, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder + " and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					  //    System.out.println(headers);
					  //    System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count++;
					        
					        }
					        
					       }
					    }  
					
					      PublisherReport obj = new PublisherReport();
					   //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(numberFormat.format(count));
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(numberFormat.format(count));
					      obj.setVisitorType("Loyal Visitors");
					      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					      System.out.println("Article:"+articlename+"Count:"+count);
					      
				          return pubreport;
						  }			  
						
				  
				  
				  public List<PublisherReport> countLoyalUsersChannelSectionDatewiseFilter(String startdate, String enddate, String channel_name, String sectionname,String filter, String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder + " and section like '%"+sectionname+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					  //    System.out.println(headers);
					  //    System.out.println(lines);
					      Double count = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count++;
					        
					        }
					        
					       }
					    }  
					
					      PublisherReport obj = new PublisherReport();
					   //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(count.toString());
							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
							//	obj.setEngagementTime(numberFormat.format(count));
							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
							//	obj.setVisitorCount(numberFormat.format(count));
					      obj.setVisitorType("Loyal Visitors");
					    //  String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					     // System.out.println("Article:"+articlename+"Count:"+count);
					      
				          return pubreport;
						  }			  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countNewUsersChannelDatewise(String startdate, String enddate, String channel_name, String filter)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							
							  String cookieIds = "";
							  String count1 = "";
							  String count2 = "";
							  
							  //	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query00);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							//      System.out.println(headers);
							 //     System.out.println(lines);
							      Double count = 0.0;
							      Double pageViews = 0.0;
							      Double engagementTime = 0.0;
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							       
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        if (Double.parseDouble(data[1].trim()) < 2.0)
							        {
							        count++;
							        pageViews = pageViews + Double.parseDouble(data[1]);
							        engagementTime = engagementTime + Double.parseDouble(data[2]);
							        }
							        
							       }
							    }  
							       
							     
							      
							      
							      
							      PublisherReport obj = new PublisherReport();
							      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(pageViews.toString());
										if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
										obj.setCount(engagementTime.toString());
										if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
										obj.setCount(count.toString());
							      obj.setVisitorType("New Visitors");
							      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							      pubreport.add(obj);
							   
							      
						    return pubreport;
						  }
				  
				  
				  
				  public List<PublisherReport> countNewUsersChannelDatewisegroupby(String startdate, String enddate, String channel_name, String groupby)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT COUNT(*)as count, cookie_id,"+groupby+" FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +" group by cookie_id,"+groupby+" limit 20000000";
							  
							
							  
							  if(groupby.equals("hour")){
						    		query00 =  "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1h') limit 20000000";
						    	}

			                
							  if(groupby.equals("minute")){
				                	query00 =  "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
										      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1m') limit 20000000";	
						    	}

						       
							  
							  
							  //	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
							    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
							      CSVResult csvResult = getCsvResult(false, query00);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							//      System.out.println(headers);
							 //     System.out.println(lines);
							      Double count = 0.0;
							      Map<String,Double> dates =new HashMap<String,Double>();
							      String date = "";
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							       
							        
							        String[] data = ((String)lines.get(i)).split(",");
							        if(data.length>2){
							        date = data[1].trim();
							        if(dates.containsKey(date)==false)
							        dates.put(date,0.0);
							        if (Double.parseDouble(data[2].trim()) < 2.0)
							        {
							        count = dates.get(date);
							        dates.put(date,count+1);
							        
							        }
							        
							       }
							      }
							      
							    }  
							
							      for(Map.Entry<String,Double>entry: dates.entrySet()){
							      PublisherReport obj = new PublisherReport();
							      
							      if(groupby.equals("audience_segment"))
							             obj.setAudience_segment(entry.getKey());
						            	
						            	
						            	if(groupby.equals("gender"))
								             obj.setGender(entry.getKey());
						            	
						            	if(groupby.equals("hour"))
								             obj.setDate(entry.getKey());
						            	
						            	if(groupby.equals("minute"))
								             obj.setDate(entry.getKey());
						            	
						            	
						            	if(groupby.equals("gender"))
								             obj.setGender(entry.getKey());
						            	
						            	
						            	if(groupby.equals("refcurrentoriginal"))
								             obj.setGender(entry.getKey());
							            	
						            	if(groupby.equals("date"))
						            	{ 
						            		Date date1 = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
						            		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
						            		 // give a timezone reference for formating (see comment at the bottom
						            		String formattedDate = sdf.format(date1);
						            		
						            		obj.setDate(formattedDate);
						            		
						            		
						            	}		            	
						            	if(groupby.equals("subcategory"))
								             obj.setSubcategory(entry.getKey());
						            	
						            	if(groupby.equals("agegroup"))
								             obj.setAge(entry.getKey());
							            	
						            	if(groupby.equals("incomelevel"))
								          obj.setIncomelevel(entry.getKey());
							     
						            	if(groupby.equals("city"))
									    {
						            		String locationproperties = citycodeMap.get(entry.getKey());
						    		        String city =entry.getKey().replace("_"," ").replace("-"," ");
						    		        obj.setCity(city);
						    		        System.out.println(city);
						    		        obj.setLocationcode(locationproperties);
									    }
						            	
						            	obj.setVisitorType("New Visitors");
						            	obj.setCount(entry.getValue().toString());
							      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							      pubreport.add(obj);
							      }
							      
						    return pubreport;
						  }
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countReturningUsersChannelDatewisegroupby(String startdate, String enddate, String channel_name,String groupby)
						    throws CsvExtractorException, Exception
						  {
							  
							  
					  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
					    
					  String query00 = "SELECT COUNT(*)as count, cookie_id,"+groupby+" FROM enhanceduserdatabeta1 where channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,"+groupby+" limit 20000000";
					  
					
					  
					  if(groupby.equals("hour")){
				    		query00 =  "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1h') limit 20000000";
				    	}

	                
					  if(groupby.equals("minute")){
		                	query00 =  "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1m') limit 20000000";	
				    	}

				       
					  
					  
					  //	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					//      System.out.println(headers);
					 //     System.out.println(lines);
					      Double count = 0.0;
					      Map<String,Double> dates =new HashMap<String,Double>();
					      String date = "";
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if(data.length > 2){
					        date = data[1].trim();
					        if(dates.containsKey(date)==false)
					        dates.put(date,0.0);
					        if (Double.parseDouble(data[2].trim()) >= 2.0)
					        {
					        count = dates.get(date);
					        dates.put(date,count+1);
					        
					        }
					       
					        } 
					       }
					    }  
					
					      for(Map.Entry<String,Double>entry: dates.entrySet()){
					      PublisherReport obj = new PublisherReport();
					      if(groupby.equals("audience_segment"))
					             obj.setAudience_segment(entry.getKey());
				            	
				            	
				            	if(groupby.equals("gender"))
						             obj.setGender(entry.getKey());
				            	
				            	if(groupby.equals("hour"))
						             obj.setDate(entry.getKey());
				            	
				            	if(groupby.equals("minute"))
						             obj.setDate(entry.getKey());
				            	
				            	
				            	if(groupby.equals("gender"))
						             obj.setGender(entry.getKey());
				            	
				            	
				            	if(groupby.equals("refcurrentoriginal"))
						             obj.setGender(entry.getKey());
					            	
				            	if(groupby.equals("date")){
				            		Date date1 = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
			            		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
			            		 // give a timezone reference for formating (see comment at the bottom
			            		String formattedDate = sdf.format(date1);
			            		
			            		obj.setDate(formattedDate);
				            	}		            	
			            		
				            	if(groupby.equals("subcategory"))
						             obj.setSubcategory(entry.getKey());
				            	
				            	if(groupby.equals("agegroup"))
						             obj.setAge(entry.getKey());
					            	
				            	if(groupby.equals("incomelevel"))
						          obj.setIncomelevel(entry.getKey());
					     
				            	if(groupby.equals("city")){
				            	String locationproperties = citycodeMap.get(entry.getKey());
			    		        String city =entry.getKey().replace("_"," ").replace("-"," ");
			    		        obj.setCity(city);
			    		        System.out.println(city);
			    		        obj.setLocationcode(locationproperties);
				            	}
				          
				          obj.setVisitorType("Returning Visitors");
				          obj.setCount(entry.getValue().toString());
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      pubreport.add(obj);
					      }
					      
				    return pubreport;
						  }
				  
				  
				  
				 
				  
				  
				  public List<PublisherReport> countReturningUsersChannelDatewise(String startdate, String enddate, String channel_name, String filter)
						    throws CsvExtractorException, Exception
						  {
							  
							  
					  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						String cookieIds= ""; 
						
						String count1= "";
					    String count2 = "";
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					   //   System.out.println(headers);
					   //   System.out.println(lines);
					      Double count = 0.0;
					      Double pageviews = 0.0;
					      Double engagementTime = 0.0;
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
					        {
					        count++;
					        pageviews = pageviews + Double.parseDouble(data[1].trim());
					        engagementTime =engagementTime + Double.parseDouble(data[2].trim());
					        
					        }
					        
					       }
					    }  
					       
					      
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(pageviews.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(engagementTime.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count.toString());
					      obj.setVisitorType("Returning Visitors");
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      pubreport.add(obj);
					      
				          return pubreport;
						  }
				  
				  
				  
				  
				  
				  public List<PublisherReport> countUsersChannelDatewise(String startdate, String enddate, String channel_name, String filter)
						    throws CsvExtractorException, Exception
						  {
					 
					  
					  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					 //     System.out.println(headers);
					 //     System.out.println(lines);
					    
					      
					      Double count1 = 0.0;
					      Double pageViews1 = 0.0;
					      Double engagementTime1 = 0.0;
					      
					      
					      
					      Double count2 = 0.0;
					      Double pageViews2 = 0.0;
					      Double engagementTime2 = 0.0;
					      
					      Double count3 = 0.0;
					      Double pageViews3 = 0.0;
					      Double engagementTime3 = 0.0;
					      StringBuilder sb = new StringBuilder();
					      Long st = System.currentTimeMillis();
					      if ((lines != null) && (!lines.isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        
					        if (Double.parseDouble(data[1].trim()) < 2.0)
					        {
					        count1++;
					        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
					        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        
					        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
					        {
					        count2++;
					        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
					        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count3++;
					        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
					        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					       }
					    }  
					       
					      
					     
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(pageViews1.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(engagementTime1.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count1.toString());
					      obj.setVisitorType("New Visitors");
					    
					      
					      PublisherReport obj1 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj1.setCount(pageViews2.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj1.setCount(engagementTime2.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj1.setCount(count2.toString());
					      obj1.setVisitorType("Returning Visitors");

					      
					      PublisherReport obj2 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj2.setCount(pageViews3.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj2.setCount(engagementTime3.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj2.setCount(count3.toString());
					      obj2.setVisitorType("Loyal Visitors");

					      
					      
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      pubreport.add(obj);
					      pubreport.add(obj1);
					      pubreport.add(obj2);
					      
				          return pubreport;
						  }			 
				 
				
				  public List<PublisherReport> countUsersChannelArticleDatewiseFilter(String startdate, String enddate, String channel_name, String articlename,String filter,String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
					 
					  
					  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					 //     System.out.println(headers);
					 //     System.out.println(lines);
					    
					      
					      Double count1 = 0.0;
					      Double pageViews1 = 0.0;
					      Double engagementTime1 = 0.0;
					      
					      
					      
					      Double count2 = 0.0;
					      Double pageViews2 = 0.0;
					      Double engagementTime2 = 0.0;
					      
					      Double count3 = 0.0;
					      Double pageViews3 = 0.0;
					      Double engagementTime3 = 0.0;
					      StringBuilder sb = new StringBuilder();
					      Long st = System.currentTimeMillis();
					      if ((lines != null) && (!lines.isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        
					        if (Double.parseDouble(data[1].trim()) < 2.0)
					        {
					        count1++;
					        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
					        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        
					        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
					        {
					        count2++;
					        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
					        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count3++;
					        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
					        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					       }
					    }  
					       
					      
					     
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(pageViews1.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(engagementTime1.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count1.toString());
					      obj.setVisitorType("New Visitors");
					    
					      
					      PublisherReport obj1 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj1.setCount(pageViews2.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj1.setCount(engagementTime2.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj1.setCount(count2.toString());
					      obj1.setVisitorType("Returning Visitors");

					      
					      PublisherReport obj2 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj2.setCount(pageViews3.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj2.setCount(engagementTime3.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj2.setCount(count3.toString());
					      obj2.setVisitorType("Loyal Visitors");

					      
					      
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					      pubreport.add(obj1);
					      pubreport.add(obj2);
					      
				          return pubreport;
						  }			 
				   
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countUsersChannelArticleDatewise(String startdate, String enddate, String channel_name, String articlename,String filter)
						    throws CsvExtractorException, Exception
						  {
					 
					  
					  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					 //     System.out.println(headers);
					 //     System.out.println(lines);
					    
					      
					      Double count1 = 0.0;
					      Double pageViews1 = 0.0;
					      Double engagementTime1 = 0.0;
					      
					      
					      
					      Double count2 = 0.0;
					      Double pageViews2 = 0.0;
					      Double engagementTime2 = 0.0;
					      
					      Double count3 = 0.0;
					      Double pageViews3 = 0.0;
					      Double engagementTime3 = 0.0;
					      StringBuilder sb = new StringBuilder();
					      Long st = System.currentTimeMillis();
					      if ((lines != null) && (!lines.isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        
					        if (Double.parseDouble(data[1].trim()) < 2.0)
					        {
					        count1++;
					        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
					        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        
					        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
					        {
					        count2++;
					        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
					        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count3++;
					        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
					        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					       }
					    }  
					       
					      
					     
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(pageViews1.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(engagementTime1.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count1.toString());
					      obj.setVisitorType("New Visitors");
					    
					      
					      PublisherReport obj1 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj1.setCount(pageViews2.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj1.setCount(engagementTime2.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj1.setCount(count2.toString());
					      obj1.setVisitorType("Returning Visitors");

					      
					      PublisherReport obj2 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj2.setCount(pageViews3.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj2.setCount(engagementTime3.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj2.setCount(count3.toString());
					      obj2.setVisitorType("Loyal Visitors");

					      
					      
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
					      pubreport.add(obj);
					      pubreport.add(obj1);
					      pubreport.add(obj2);
					      
				          return pubreport;
						  }			 
				   
				  

				  public List<PublisherReport> countUsersChannelSectionDatewise(String startdate, String enddate, String channel_name, String sectionname,String filter)
						    throws CsvExtractorException, Exception
						  {
					 
					  
					  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					 //     System.out.println(headers);
					 //     System.out.println(lines);
					    
					      
					      Double count1 = 0.0;
					      Double pageViews1 = 0.0;
					      Double engagementTime1 = 0.0;
					      
					      
					      
					      Double count2 = 0.0;
					      Double pageViews2 = 0.0;
					      Double engagementTime2 = 0.0;
					      
					      Double count3 = 0.0;
					      Double pageViews3 = 0.0;
					      Double engagementTime3 = 0.0;
					      StringBuilder sb = new StringBuilder();
					      Long st = System.currentTimeMillis();
					      if ((lines != null) && (!lines.isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        
					        if (Double.parseDouble(data[1].trim()) < 2.0)
					        {
					        count1++;
					        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
					        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        
					        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
					        {
					        count2++;
					        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
					        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count3++;
					        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
					        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					       }
					    }  
					       
					      
					     
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(pageViews1.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(engagementTime1.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count1.toString());
					      obj.setVisitorType("New Visitors");
					    
					      
					      PublisherReport obj1 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj1.setCount(pageViews2.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj1.setCount(engagementTime2.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj1.setCount(count2.toString());
					      obj1.setVisitorType("Returning Visitors");

					      
					      PublisherReport obj2 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj2.setCount(pageViews3.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj2.setCount(engagementTime3.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj2.setCount(count3.toString());
					      obj2.setVisitorType("Loyal Visitors");

					      
					      
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      obj.setSection(sectionname);
					      pubreport.add(obj);
					      pubreport.add(obj1);
					      pubreport.add(obj2);
					      
				          return pubreport;
						  }			 
				  
				  
				  
				  
				  public List<PublisherReport> countUsersChannelSectionDatewiseFilter(String startdate, String enddate, String channel_name, String sectionname,String filter,String queryfilterbuilder)
						    throws CsvExtractorException, Exception
						  {
					 
					  
					  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where "+ queryfilterbuilder +" and section like '%"+sectionname+"%' and channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
					//	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					 //     System.out.println(headers);
					 //     System.out.println(lines);
					    
					      
					      Double count1 = 0.0;
					      Double pageViews1 = 0.0;
					      Double engagementTime1 = 0.0;
					      
					      
					      
					      Double count2 = 0.0;
					      Double pageViews2 = 0.0;
					      Double engagementTime2 = 0.0;
					      
					      Double count3 = 0.0;
					      Double pageViews3 = 0.0;
					      Double engagementTime3 = 0.0;
					      StringBuilder sb = new StringBuilder();
					      Long st = System.currentTimeMillis();
					      if ((lines != null) && (!lines.isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        
					        if (Double.parseDouble(data[1].trim()) < 2.0)
					        {
					        count1++;
					        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
					        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        
					        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
					        {
					        count2++;
					        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
					        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					        
					        if (Double.parseDouble(data[1].trim()) > 7.0)
					        {
					        count3++;
					        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
					        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
					        
					        }
					        
					       }
					    }  
					       
					      
					     
					      
					      
					      
					      
					      PublisherReport obj = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj.setCount(pageViews1.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj.setCount(engagementTime1.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj.setCount(count1.toString());
					      obj.setVisitorType("New Visitors");
					    
					      
					      PublisherReport obj1 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj1.setCount(pageViews2.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj1.setCount(engagementTime2.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj1.setCount(count2.toString());
					      obj1.setVisitorType("Returning Visitors");

					      
					      PublisherReport obj2 = new PublisherReport();
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
								obj2.setCount(pageViews3.toString());
								if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								obj2.setCount(engagementTime3.toString());
								if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								obj2.setCount(count3.toString());
					      obj2.setVisitorType("Loyal Visitors");

					      
					      
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      obj.setSection(sectionname);
					      pubreport.add(obj);
					      pubreport.add(obj1);
					      pubreport.add(obj2);
					      
				          return pubreport;
						  }			 
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countLoyalUsersChannelDatewisegroupby(String startdate, String enddate, String channel_name,String groupby)
						    throws CsvExtractorException, Exception
						  {
					  String query00 = "SELECT COUNT(*)as count, cookie_id,"+groupby+" FROM enhanceduserdatabeta1 where channel_name = '" + 
						      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,"+groupby+" limit 20000000";
					  
					
					  
					  if(groupby.equals("hour")){
				    		query00 =  "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1h') limit 20000000";
				    	}

	                
					  if(groupby.equals("minute")){
		                	query00 =  "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1m') limit 20000000";	
				    	}

				       
					  
					  
					  //	 CSVResult csvResult00 = getCsvResult(false, query00);
						// List<String> headers00 = csvResult00.getHeaders();
				//		 List<String> lines00 = csvResult00.getLines();
					//	 List<PublisherReport> pubreport00 = new ArrayList();  
						
						 
					//	System.out.println(headers00);
					//	System.out.println(lines00);  
						  
						//  for (int i = 0; i < lines00.size(); i++)
					    //  {
					       
					     //   String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					     
						  
						  
						  
					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
					    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
					      CSVResult csvResult = getCsvResult(false, query00);
					      List<String> headers = csvResult.getHeaders();
					      List<String> lines = csvResult.getLines();
					      List<PublisherReport> pubreport = new ArrayList();
					//      System.out.println(headers);
					 //     System.out.println(lines);
					      Double count = 0.0;
					      Map<String,Double> dates =new HashMap<String,Double>();
					      String date = "";
					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					       
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        if(data.length > 2){
					        date = data[1].trim();
					        if(dates.containsKey(date)==false)
					        dates.put(date,0.0);
					        if (Double.parseDouble(data[2].trim()) > 7.0)
					        {
					        count = dates.get(date);
					        dates.put(date,count+1);
					        
					         }
					        }  
					       }
					    }  
					
					      for(Map.Entry<String,Double>entry: dates.entrySet()){
					      PublisherReport obj = new PublisherReport();
					      if(groupby.equals("audience_segment"))
					             obj.setAudience_segment(entry.getKey());
				            	
				            	
				            	if(groupby.equals("gender"))
						             obj.setGender(entry.getKey());
				            	
				            	if(groupby.equals("hour"))
						             obj.setDate(entry.getKey());
				            	
				            	if(groupby.equals("minute"))
						             obj.setDate(entry.getKey());
				            	
				            	
				            	if(groupby.equals("gender"))
						             obj.setGender(entry.getKey());
				            	
				            	
				            	if(groupby.equals("refcurrentoriginal"))
						             obj.setGender(entry.getKey());
					            	
				            	if(groupby.equals("date")){
				            		Date date1 = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
				            		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
				            		 // give a timezone reference for formating (see comment at the bottom
				            		String formattedDate = sdf.format(date1);
				            		
				            		obj.setDate(formattedDate);
				            	}		            	
				            	if(groupby.equals("subcategory"))
						             obj.setSubcategory(entry.getKey());
				            	
				            	if(groupby.equals("agegroup"))
						             obj.setAge(entry.getKey());
					            	
				            	if(groupby.equals("incomelevel"))
						          obj.setIncomelevel(entry.getKey());
					     
				            	if(groupby.equals("city")){
				            		String locationproperties = citycodeMap.get(entry.getKey());
				    		        String city =entry.getKey().replace("_"," ").replace("-"," ");
				    		        obj.setCity(city);
				    		        System.out.println(city);
				    		        obj.setLocationcode(locationproperties);
				            	}
							    
				            	 obj.setVisitorType("Loyal Visitors");	    
				            	 obj.setCount(entry.getValue().toString());
					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					      pubreport.add(obj);
					      }
					      
				          return pubreport;
						  }			 
				 
				  
				  
				  
				  
				  
				  public List<PublisherReport> counttotalvisitorsChannel(String startdate, String enddate, String channel_name)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							   //   System.out.println(headers);
							  //    System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setTotalvisits(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }
  
				  
				  public List<PublisherReport> countbenchmarktotalvisitorsChannel(String startdate, String enddate, String channel_name)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
							  String time = startdate;
                              DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                              Date date1 = df.parse(time);
                             
                              String time1 = enddate;
                              Date date2 = df.parse(time1);
                                    
                             
                             
                              int days = getDifferenceDays(date2, date1)-2;
                              Calendar cal = Calendar.getInstance();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, days);
                              Date benchmarkStartDate1 = cal.getTime();
                              cal.setTime(date1);
                              cal.add(Calendar.DAY_OF_YEAR, -1);
                              Date benchmarkEndDate1 = cal.getTime();

                              String benchmarkStartDate = df.format(benchmarkStartDate1);	  
                              String benchmarkEndDate  = df.format(benchmarkEndDate1);	
                              
                              
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where channel_name = '" + 
							      channel_name + "' and date between " + "'" +  benchmarkStartDate  + "'" + " and " + "'" + benchmarkEndDate  + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							   //   System.out.println(headers);
							  //    System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setTotalvisits(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }

				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countUniqueVisitorsChannel(String startdate, String enddate, String channel_name)
						    throws CsvExtractorException, Exception
						  {
							  
							  
						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
							  
						    
							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
								      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
							  
							//	 CSVResult csvResult00 = getCsvResult(false, query00);
								// List<String> headers00 = csvResult00.getHeaders();
						//		 List<String> lines00 = csvResult00.getLines();
							//	 List<PublisherReport> pubreport00 = new ArrayList();  
								
								 
							//	System.out.println(headers00);
							//	System.out.println(lines00);  
								  
								//  for (int i = 0; i < lines00.size(); i++)
							    //  {
							       
							     //   String[] data = ((String)lines00.get(i)).split(",");
							  //      //System.out.println(data[0]);
							     
								  
								  
								  
								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
							    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
							      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
							      CSVResult csvResult = getCsvResult(false, query);
							      List<String> headers = csvResult.getHeaders();
							      List<String> lines = csvResult.getLines();
							      List<PublisherReport> pubreport = new ArrayList();
							  //    System.out.println(headers);
							   //   System.out.println(lines);
							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
							      for (int i = 0; i < lines.size(); i++)
							      {
							        PublisherReport obj = new PublisherReport();
							        
							        String[] data = ((String)lines.get(i)).split(",");
							       // obj.setDate(data[0]);
							        obj.setReach(data[0]);
							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							        
							        pubreport.add(obj);
							      }
							    }  
							    
						    return pubreport;
						  }	  
				  
				  
				  
				  public List<PublisherReport> countBrandNameChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
				    String query = "SELECT COUNT(*)as count,brandName FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by brandName";
				    //System.out.println(query);
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if(data[0].trim().toLowerCase().contains("logitech")==false && data[0].trim().toLowerCase().contains("mozilla")==false && data[0].trim().toLowerCase().contains("web_browser")==false && data[0].trim().toLowerCase().contains("microsoft")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false){ 
				        obj.setBrandname(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				        } 
				       }
				  //    //System.out.println(headers);
				  //    //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countBrowserChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = "SELECT COUNT(*)as count,browser_name FROM enhanceduserdatabeta1 where channel_name ='" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by browser_name";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setBrowser(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countOSChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = String.format("SELECT COUNT(*)as count,system_os FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by system_os", new Object[] { "enhanceduserdatabeta1" });
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				  //  //System.out.println(headers);
				  //  //System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setOs(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countModelChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = String.format("SELECT COUNT(*)as count,modelName FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by modelName", new Object[] { "enhanceduserdatabeta1" });
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");

				        if(data[0].trim().toLowerCase().contains("logitech_revue")==false && data[0].trim().toLowerCase().contains("mozilla_firefox")==false && data[0].trim().toLowerCase().contains("apple_safari")==false && data[0].trim().toLowerCase().contains("generic_web")==false && data[0].trim().toLowerCase().contains("google_compute")==false && data[0].trim().toLowerCase().contains("microsoft_xbox")==false && data[0].trim().toLowerCase().contains("google_chromecast")==false && data[0].trim().toLowerCase().contains("opera")==false && data[0].trim().toLowerCase().contains("epiphany")==false && data[0].trim().toLowerCase().contains("laptop")==false){    
				        obj.setMobile_device_model_name(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				        
				        }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countCityChannelLive(String startdate, String enddate, String channel_name,String filter)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					  
					  String query = "";
					  String queryfield = "city";
					  
					  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					      		
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    Integer accumulatedCount = 0;
				    
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if(i<10 && !data[0].equals("undetermined")){
				        	 String locationproperties = citycodeMap.get(data[0]);
						        data[0]=data[0].replace("_"," ").replace("-"," ");
						        if(citylatlongMap1.get(data[0])!=null && !citylatlongMap1.get(data[0]).isEmpty())
						        obj.setCitylatlong(citylatlongMap1.get(data[0]));
						        obj.setCity(capitalizeString(data[0]));
						        System.out.println(data[0]);
						        obj.setLocationcode(locationproperties);
						        System.out.println(locationproperties);
				     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
							obj.setCount(data[1]);
						//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
						//	obj.setEngagementTime(data[1]);
						//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
						//	obj.setVisitorCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				        }
				        else{
				        	
				        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
				        	 
					    	  if(i == (lines.size()-1)){
					    		 obj.setCity("Others"); 
					    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					    		
					    		// if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
										obj.setCount(accumulatedCount.toString() );
									//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
									//	obj.setEngagementTime(accumulatedCount.toString() );
									//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
									//	obj.setVisitorCount(accumulatedCount.toString() );
					    		 pubreport.add(obj);
					    	  }
				        	
				        }
				      
				      }
				    }
				    return pubreport;
				  }
				  
				  
				  
				  
				  public List<PublisherReport> countStateChannelLive(String startdate, String enddate, String channel_name,String filter)
						    throws CsvExtractorException, Exception
						  {
						    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					      String query = "";
					      String queryfield = "state";
					  
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					      		
						    CSVResult csvResult = getCsvResult(false, query);
						    List<String> headers = csvResult.getHeaders();
						    List<String> lines = csvResult.getLines();
						    List<PublisherReport> pubreport = new ArrayList();
						    Integer accumulatedCount = 0;
						    
						    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
						      for (int i = 0; i < lines.size(); i++)
						      {
						        PublisherReport obj = new PublisherReport();
						        
						        String[] data = ((String)lines.get(i)).split(",");
						        if(i < 10 && !data[0].equals("undetermined")){
						        	data[0]=data[0].replace("_", " ");
						        	String stateId = StateMap1.get(data[0]);
						            obj.setStateId(stateId);

						        	data[0] = capitalizeString(data[0]);
					            	obj.setState(data[0]);
						   //     if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(data[1]);
								//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								//	obj.setEngagementTime(data[1]);
								//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								//	obj.setVisitorCount(data[1]);
						        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						        pubreport.add(obj);
						        }
						        else{
						        	
						        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
						        	 
							    	  if(i == (lines.size()-1)){
							    		 obj.setState("Others"); 
							    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							    		
							    	//	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
												obj.setCount(accumulatedCount.toString() );
										//		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
										//		obj.setEngagementTime(accumulatedCount.toString() );
											//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
											//	obj.setVisitorCount(accumulatedCount.toString() );
							    		 pubreport.add(obj);
							    	  }
						        	
						        }
						      
						      }
						    }
						    return pubreport;
						  }  
				  
				  
				  public List<PublisherReport> countCountryChannelLive(String startdate, String enddate, String channel_name,String filter)
						    throws CsvExtractorException, Exception
						  {
						    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
						  //  String query = "SELECT COUNT(*)as count,country FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by country order by count desc";
						   
					      String query = "";
					      String queryfield = "country";
					  
					      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					      if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
						    
					      if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
					      		
					  
					  
					  
					  
					        CSVResult csvResult = getCsvResult(false, query);
						    List<String> headers = csvResult.getHeaders();
						    List<String> lines = csvResult.getLines();
						    List<PublisherReport> pubreport = new ArrayList();
						    Integer accumulatedCount = 0;
						    
						    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
						      for (int i = 0; i < lines.size(); i++)
						      {
						        PublisherReport obj = new PublisherReport();
						        
						        String[] data = ((String)lines.get(i)).split(",");
						        if(i < 10 && !data[0].equals("undetermined")){
						        	data[0]=data[0].replace("_", " ");
						        	String countryId = CountryMap1.get(data[0]);
						            obj.setCountryId(countryId);
						        	data[0] = capitalizeString(data[0]);
					            	obj.setCountry(data[0]);
						     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
									obj.setCount(data[1]);
								//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
								//	obj.setEngagementTime(data[1]);
								//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
								//	obj.setVisitorCount(data[1]);
						        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
						        pubreport.add(obj);
						        }
						        else{
						        	
						        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
						        	 
							    	  if(i == (lines.size()-1)){
							    		 obj.setCountry("Others"); 
							    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
							    		
							    	//	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
												obj.setCount(accumulatedCount.toString() );
										//		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
											//	obj.setEngagementTime(accumulatedCount.toString() );
											//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
											//	obj.setVisitorCount(accumulatedCount.toString() );
							    		 pubreport.add(obj);
							    	  }
						        	
						        }
						      
						      }
						    }
						    return pubreport;
						  }  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  public List<PublisherReport> countfingerprintChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
					  
					  /*
					  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
					  
				    
					  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
						      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
					  
						 CSVResult csvResult00 = getCsvResult(false, query00);
						 List<String> headers00 = csvResult00.getHeaders();
						 List<String> lines00 = csvResult00.getLines();
						 List<PublisherReport> pubreport00 = new ArrayList();  
							  
						//  //System.out.println(headers00);
						//  //System.out.println(lines00);  
						  
						  for (int i = 0; i < lines00.size(); i++)
					      {
					       
					        String[] data = ((String)lines00.get(i)).split(",");
					  //      //System.out.println(data[0]);
					      }
						*/  
						  
						  
						//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
					    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
					      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
					    CSVResult csvResult = getCsvResult(false, query);
					    List<String> headers = csvResult.getHeaders();
					    List<String> lines = csvResult.getLines();
					    List<PublisherReport> pubreport = new ArrayList();
					    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
					      for (int i = 0; i < lines.size(); i++)
					      {
					        PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					      //  obj.setDate(data[0]);
					        obj.setReach(data[0]);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
					        pubreport.add(obj);
					      }
					    }
					    
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countAudiencesegmentChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
				      List<PublisherReport> pubreport = new ArrayList(); 
					  
					  String querya1 = "SELECT COUNT(distinct(cookiehash)) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate +"' limit 20000000";   
					  
					    //Divide count in different limits 
					
					  
					  List<String> Query = new ArrayList();
					  


					    System.out.println(querya1);
					    
					    final long startTime2 = System.currentTimeMillis();
						
					    
					    CSVResult csvResult1 = null;
						try {
							csvResult1 = AggregationModule.getCsvResult(false, querya1);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					    
					    final long endTime2 = System.currentTimeMillis();
						
					    List<String> headers = csvResult1.getHeaders();
					    List<String> lines = csvResult1.getLines();
					    
					    
					    String count = lines.get(0);
					    Double countv1 = Double.parseDouble(count);
					    Double n = 0.0;
					    if(countv1 >= 250000)
					       n=10.0;
					    
					    if(countv1 >= 100000 && countv1 <= 250000 )
					       n=10.0;
					    
					    if(countv1 <= 100000 && countv1 > 100)
				           n=10.0;	    
					   
					    if(countv1 <= 100)
					    	n=1.0;
					    
					    if(countv1 == 0)
					    {
					    	
					    	return pubreport;
					    	
					    }
					    
					    Double total_length = countv1 - 0;
					    Double subrange_length = total_length/n;	
					    
					    Double current_start = 0.0;
					    for (int i = 0; i < n; ++i) {
					      System.out.println("Smaller range: [" + current_start + ", " + (current_start + subrange_length) + "]");
					      Double startlimit = current_start;
					      Double finallimit = current_start + subrange_length;
					      Double index = startlimit +1;
					      if(countv1 == 1)
					    	  index=0.0;
					      String query = "SELECT distinct(cookie_id) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "' Order by cookie_id limit "+index.intValue()+","+finallimit.intValue();  	
						  System.out.println(query);
					  //    Query.add(query);
					      current_start += subrange_length;
					      Query.add(query);
					     
					    }
					    
					    
					    	
					    
					  
					  ExecutorService executorService = Executors.newFixedThreadPool(2000);
				        
				       List<Callable<FastMap<String,Double>>> lst = new ArrayList<Callable<FastMap<String,Double>>>();
				    
				       for(int i=0 ; i < Query.size(); i++ ){
				       lst.add(new AudienceSegmentQueryExecutionThreads(Query.get(i),client,searchDao));
				    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				        
				       // returns a list of Futures holding their status and results when all complete
				       lst.add(new SubcategoryQueryExecutionThreads(Query.get(i),client,searchDao));
				   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				       }
				       
				       
				       List<Future<FastMap<String,Double>>> maps = executorService.invokeAll(lst);
				        
				       System.out.println(maps.size() +" Responses recieved.\n");
				        
				       for(Future<FastMap<String,Double>> task : maps)
				       {
				    	   try{
				           if(task!=null)
				    	   System.out.println(task.get().toString());
				    	   }
				    	   catch(Exception e)
				    	   {
				    		   e.printStackTrace();
				    		   continue;
				    	   }
				    	    
				    	   
				    	   }
				        
				       /* shutdown your thread pool, else your application will keep running */
				       executorService.shutdown();
					  
					
					  //  //System.out.println(headers1);
					 //   //System.out.println(lines1);
					    
					    
				       
				       FastMap<String,Double> audiencemap = new FastMap<String,Double>();
				       
				       FastMap<String,Double> subcatmap = new FastMap<String,Double>();
				       
				       Double count1 = 0.0;
				       
				       Double count2 = 0.0;
				       
				       String key ="";
				       String key1 = "";
				       Double value = 0.0;
				       Double vlaue1 = 0.0;
				       
					    for (int i = 0; i < maps.size(); i++)
					    {
					    
					    	if(maps!=null && maps.get(i)!=null){
					        FastMap<String,Double> map = (FastMap<String, Double>) maps.get(i).get();
					    	
					       if(map.size() > 0){
					       
					       if(map.containsKey("audience_segment")==true){
					       for (Map.Entry<String, Double> entry : map.entrySet())
					    	 {
					    	  key = entry.getKey();
					    	  key = key.trim();
					    	  value=  entry.getValue();
					    	if(key.equals("audience_segment")==false) { 
					    	if(audiencemap.containsKey(key)==false)
					    	audiencemap.put(key,value);
					    	else
					    	{
					         count1 = audiencemap.get(key);
					         if(count1!=null)
					         audiencemap.put(key,count1+value);	
					    	}
					      }
					    }
					  }   

					       if(map.containsKey("subcategory")==true){
					       for (Map.Entry<String, Double> entry : map.entrySet())
					    	 {
					    	   key = entry.getKey();
					    	   key = key.trim();
					    	   value=  entry.getValue();
					    	if(key.equals("subcategory")==false) {    
					    	if(subcatmap.containsKey(key)==false)
					    	subcatmap.put(key,value);
					    	else
					    	{
					         count1 = subcatmap.get(key);
					         if(count1!=null)
					         subcatmap.put(key,count1+value);	
					    	}
					    }  
					    	
					   }
					      
					     	       }
					           
					       } 
					    
					    	} 	
					   }    
					    
					    String subcategory = null;
					   
					    if(audiencemap.size()>0){
					   
					    	for (Map.Entry<String, Double> entry : audiencemap.entrySet()) {
					    	//System.out.println("Key : " + entry.getKey() + " Value : " + entry.getValue());
					    

					        PublisherReport obj = new PublisherReport();
					        
					   //     String[] data = ((String)lines.get(i)).split(",");
					        
					     //   if(data[0].trim().toLowerCase().contains("festivals"))
					      //  obj.setAudience_segment("");
					      //  else
					        obj.setAudience_segment( entry.getKey());	
					     //   obj.setCount(String.valueOf(entry.getValue()));
					      
					        if ((!entry.getKey().equals("tech")) && (!entry.getKey().equals("india")) && (!entry.getKey().trim().toLowerCase().equals("foodbeverage")) )
					        {
					         for (Map.Entry<String, Double> entry1 : subcatmap.entrySet()) {
					        	 
					        	    
					        	 
					        	 PublisherReport obj1 = new PublisherReport();
					            
					           
					            if (entry1.getKey().contains(entry.getKey()))
					            {
					             // String substring = "_" + entry.getKey() + "_";
					              subcategory = entry1.getKey();
					           //   if(data[0].trim().toLowerCase().contains("festivals"))
					           //   obj1.setAudience_segment("");
					           //   else
					        
					              //System.out.println(" \n\n\n Key : " + subcategory + " Value : " + entry1.getValue());  
					              obj.setSubcategory(subcategory);
					              obj.setCount(String.valueOf(entry1.getValue()));
					             // obj.getAudience_segment_data().add(obj1);
					            }
					          }
					          pubreport.add(obj);
					        }
					      
					    }
					    }
					    return pubreport;
				  }
				  
				  public List<PublisherReport> gettimeofdayChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countPinCodeChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = "SELECT COUNT(*)as count,postalcode FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by postalcode";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    //System.out.println(headers);
				    //System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				    	  PublisherReport obj = new PublisherReport();
					        
					        String[] data = ((String)lines.get(i)).split(",");
					        String[] data1 = data[0].split("_");
					        String locationproperties  = citycodeMap.get(data1[0]);
					        obj.setPostalcode(data[0]);
					        obj.setCount(data[1]);
					        obj.setLocationcode(locationproperties);
					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				            pubreport.add(obj);
				      }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> countLatLongChannelLive(String startdate, String enddate, String channel_name)
				    throws CsvExtractorException, Exception
				  {
				    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				    String query = String.format("SELECT COUNT(*)as count,latitude_longitude FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by latitude_longitude", new Object[] { "enhanceduserdatabeta1" });
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    //System.out.println(headers);
				    //System.out.println(lines);
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        String[] dashcount = data[0].split("_");
				        if ((dashcount.length == 3) && (data[0].charAt(data[0].length() - 1) != '_'))
				        {
				          if (!dashcount[2].isEmpty())
				          {
				            obj.setLatitude_longitude(data[0]);
				            obj.setCount(data[1]);
				            String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          }
				          pubreport.add(obj);
				        }
				      }
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> gettimeofdayQuarterChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='4h')";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> gettimeofdayDailyChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1d')";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getdayQuarterdataChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),QuarterValue from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY QuarterValue";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if (data[0].equals("quarter1")) {
				          data[0] = "quarter1 (00 - 04 AM)";
				        }
				        if (data[0].equals("quarter2")) {
				          data[0] = "quarter2 (04 - 08 AM)";
				        }
				        if (data[0].equals("quarter3")) {
				          data[0] = "quarter3 (08 - 12 AM)";
				        }
				        if (data[0].equals("quarter4")) {
				          data[0] = "quarter4 (12 - 16 PM)";
				        }
				        if (data[0].equals("quarter5")) {
				          data[0] = "quarter5 (16 - 20 PM)";
				        }
				        if (data[0].equals("quarter6")) {
				          data[0] = "quarter6 (20 - 24 PM)";
				        }
				        obj.setTime_of_day(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getGenderChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),gender from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY gender";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    
				    //System.out.println(headers);
				    //System.out.println(lines);
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setGender(capitalizeString(data[0]));
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getAgegroupChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),agegroup from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY agegroup";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        obj.setAge(data[0]);
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				      }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getISPChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query = "Select count(*),ISP from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY ISP";
				    CSVResult csvResult = getCsvResult(false, query);
				    List<String> headers = csvResult.getHeaders();
				    List<String> lines = csvResult.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				        if(data[0].trim().toLowerCase().equals("_ltd")==false){ 
				        obj.setISP(capitalizeString(data[0]));
				        obj.setCount(data[1]);
				        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				        pubreport.add(obj);
				         }
				        }
				      //System.out.println(headers);
				      //System.out.println(lines);
				    }
				    return pubreport;
				  }
				  
				  public List<PublisherReport> getOrgChannelLive(String startdate, String enddate, String channel_name)
				    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  {
				    String query1 = "Select count(*),organisation from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY organisation";
				    CSVResult csvResult1 = getCsvResult(false, query1);
				    List<String> headers1 = csvResult1.getHeaders();
				    List<String> lines1 = csvResult1.getLines();
				    List<PublisherReport> pubreport = new ArrayList();
				    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				    {
				      for (int i = 0; i < lines1.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data1 = ((String)lines1.get(i)).split(",");
				        if ((data1[0].length() > 3) && (data1[0].charAt(0) != '_') && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("communication")) && (!data1[0].trim().toLowerCase().contains("cable")) && (!data1[0].trim().toLowerCase().contains("telecom")) && (!data1[0].trim().toLowerCase().contains("network")) && (!data1[0].trim().toLowerCase().contains("isp")) && (!data1[0].trim().toLowerCase().contains("hathway")) && (!data1[0].trim().toLowerCase().contains("internet")) && (!data1[0].trim().toLowerCase().equals("_ltd")) && (!data1[0].trim().toLowerCase().contains("googlebot")) && (!data1[0].trim().toLowerCase().contains("sify")) && (!data1[0].trim().toLowerCase().contains("bsnl")) && (!data1[0].trim().toLowerCase().contains("reliance")) && (!data1[0].trim().toLowerCase().contains("broadband")) && (!data1[0].trim().toLowerCase().contains("tata")) && (!data1[0].trim().toLowerCase().contains("nextra")))
				        {
				          obj.setOrganisation(capitalizeString(data1[0]));
				          obj.setCount(data1[1]);
				          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				          pubreport.add(obj);
				        }
				      }
				      //System.out.println(headers1);
				      //System.out.println(lines1);
				    }
				    return pubreport;
				  }
				  
				    
				  				  public List<PublisherReport> countNewUsersChannelLiveDatewise(String startdate, String enddate, String channel_name, String filter)
				  						    throws CsvExtractorException, Exception
				  						  {
				  							  
				  							  
				  						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
				  							  
				  						    
				  							  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				  								      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
				  							  
				  							//	 CSVResult csvResult00 = getCsvResult(false, query00);
				  								// List<String> headers00 = csvResult00.getHeaders();
				  						//		 List<String> lines00 = csvResult00.getLines();
				  							//	 List<PublisherReport> pubreport00 = new ArrayList();  
				  								
				  								 
				  							//	System.out.println(headers00);
				  							//	System.out.println(lines00);  
				  								  
				  								//  for (int i = 0; i < lines00.size(); i++)
				  							    //  {
				  							       
				  							     //   String[] data = ((String)lines00.get(i)).split(",");
				  							  //      //System.out.println(data[0]);
				  							     
				  								  
				  								  
				  								  
				  							//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  							  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
				  							    //  channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
				  							      CSVResult csvResult = getCsvResult(false, query00);
				  							      List<String> headers = csvResult.getHeaders();
				  							      List<String> lines = csvResult.getLines();
				  							      List<PublisherReport> pubreport = new ArrayList();
				  							//      System.out.println(headers);
				  							 //     System.out.println(lines);
				  							      Double count = 0.0;
				  							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  							      for (int i = 0; i < lines.size(); i++)
				  							      {
				  							       
				  							        
				  							        String[] data = ((String)lines.get(i)).split(",");
				  							        if (Double.parseDouble(data[1].trim()) < 2.0)
				  							        {
				  							        count++;
				  							        
				  							        }
				  							        
				  							       }
				  							    }  
				  							
				  							      PublisherReport obj = new PublisherReport();
				  							 //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
													obj.setCount(count.toString());
												//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
												//	obj.setEngagementTime(numberFormat.format(count));
												//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
												//	obj.setVisitorCount(numberFormat.format(count));
				  							      obj.setVisitorType("New Visitors");
				  							      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  							      pubreport.add(obj);
				  							   
				  							      
				  						    return pubreport;
				  						  }
				  				  
				  				  
				  				  public List<PublisherReport> countReturningUsersChannelLiveDatewise(String startdate, String enddate, String channel_name,String filter)
				  						    throws CsvExtractorException, Exception
				  						  {
				  							  
				  							  
				  					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				  						      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
				  					  
				  					//	 CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  				//		 List<String> lines00 = csvResult00.getLines();
				  					//	 List<PublisherReport> pubreport00 = new ArrayList();  
				  						
				  						 
				  					//	System.out.println(headers00);
				  					//	System.out.println(lines00);  
				  						  
				  						//  for (int i = 0; i < lines00.size(); i++)
				  					    //  {
				  					       
				  					     //   String[] data = ((String)lines00.get(i)).split(",");
				  					  //      //System.out.println(data[0]);
				  					     
				  						  
				  						  
				  						  
				  					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
				  					    //  channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
				  					      CSVResult csvResult = getCsvResult(false, query00);
				  					      List<String> headers = csvResult.getHeaders();
				  					      List<String> lines = csvResult.getLines();
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					   //   System.out.println(headers);
				  					   //   System.out.println(lines);
				  					      Double count = 0.0;
				  					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  					      for (int i = 0; i < lines.size(); i++)
				  					      {
				  					       
				  					        
				  					        String[] data = ((String)lines.get(i)).split(",");
				  					        if (Double.parseDouble(data[1].trim()) >= 2.0)
				  					        {
				  					        count++;
				  					        
				  					        }
				  					        
				  					       }
				  					    }  
				  					
				  					      PublisherReport obj = new PublisherReport();
				  					//    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
											obj.setCount(count.toString());
										//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
										//	obj.setEngagementTime(numberFormat.format(count));
										//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
										//	obj.setVisitorCount(numberFormat.format(count));
				  					      obj.setVisitorType("Returning Visitors");
				  					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					      pubreport.add(obj);
				  					      
				  				          return pubreport;
				  						  }
				  				  
				  				  
				  				  
				  				  public List<PublisherReport> countLoyalUsersChannelLiveDatewise(String startdate, String enddate, String channel_name, String filter)
				  						    throws CsvExtractorException, Exception
				  						  {
				  					  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				  						      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
				  					  
				  					//	 CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  				//		 List<String> lines00 = csvResult00.getLines();
				  					//	 List<PublisherReport> pubreport00 = new ArrayList();  
				  						
				  						 
				  					//	System.out.println(headers00);
				  					//	System.out.println(lines00);  
				  						  
				  						//  for (int i = 0; i < lines00.size(); i++)
				  					    //  {
				  					       
				  					     //   String[] data = ((String)lines00.get(i)).split(",");
				  					  //      //System.out.println(data[0]);
				  					     
				  						  
				  						  
				  						  
				  					//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  					  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
				  					    //  channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
				  					      CSVResult csvResult = getCsvResult(false, query00);
				  					      List<String> headers = csvResult.getHeaders();
				  					      List<String> lines = csvResult.getLines();
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					 //     System.out.println(headers);
				  					 //     System.out.println(lines);
				  					      Double count = 0.0;
				  					      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  					      for (int i = 0; i < lines.size(); i++)
				  					      {
				  					       
				  					        
				  					        String[] data = ((String)lines.get(i)).split(",");
				  					        if (Double.parseDouble(data[1].trim()) > 7.0)
				  					        {
				  					        count++;
				  					        
				  					        }
				  					        
				  					       }
				  					    }  
				  					
				  					      PublisherReport obj = new PublisherReport();
				  					//    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
											obj.setCount(count.toString());
										//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
										//	obj.setEngagementTime(numberFormat.format(count));
										//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
										//	obj.setVisitorCount(numberFormat.format(count));
				  					      obj.setVisitorType("Loyal Visitors");
				  					      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					      pubreport.add(obj);
				  					  
				  					      
				  				          return pubreport;
				  						  }			 
				  				 
				  				
				  				  
				  				  public List<PublisherReport> counttotalvisitorsChannelLive(String startdate, String enddate, String channel_name)
				  						    throws CsvExtractorException, Exception
				  						  {
				  							  
				  							  
				  						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
				  							  
				  						    
				  							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				  								      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
				  							  
				  							//	 CSVResult csvResult00 = getCsvResult(false, query00);
				  								// List<String> headers00 = csvResult00.getHeaders();
				  						//		 List<String> lines00 = csvResult00.getLines();
				  							//	 List<PublisherReport> pubreport00 = new ArrayList();  
				  								
				  								 
				  							//	System.out.println(headers00);
				  							//	System.out.println(lines00);  
				  								  
				  								//  for (int i = 0; i < lines00.size(); i++)
				  							    //  {
				  							       
				  							     //   String[] data = ((String)lines00.get(i)).split(",");
				  							  //      //System.out.println(data[0]);
				  							     
				  								  
				  								  
				  								  
				  								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  							    String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where channel_name = '" + 
				  							      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
				  							      CSVResult csvResult = getCsvResult(false, query);
				  							      List<String> headers = csvResult.getHeaders();
				  							      List<String> lines = csvResult.getLines();
				  							      List<PublisherReport> pubreport = new ArrayList();
				  							   //   System.out.println(headers);
				  							  //    System.out.println(lines);
				  							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  							      for (int i = 0; i < lines.size(); i++)
				  							      {
				  							        PublisherReport obj = new PublisherReport();
				  							        
				  							        String[] data = ((String)lines.get(i)).split(",");
				  							       // obj.setDate(data[0]);
				  							        obj.setTotalvisits(data[0]);
				  							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  							        
				  							        pubreport.add(obj);
				  							      }
				  							    }  
				  							    
				  						    return pubreport;
				  						  }
				    
				  				  
				  				  public List<PublisherReport> countUniqueVisitorsChannelLive(String startdate, String enddate, String channel_name)
				  						    throws CsvExtractorException, Exception
				  						  {
				  							  
				  							  
				  						//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
				  							  
				  						    
				  							  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				  								      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
				  							  
				  							//	 CSVResult csvResult00 = getCsvResult(false, query00);
				  								// List<String> headers00 = csvResult00.getHeaders();
				  						//		 List<String> lines00 = csvResult00.getLines();
				  							//	 List<PublisherReport> pubreport00 = new ArrayList();  
				  								
				  								 
				  							//	System.out.println(headers00);
				  							//	System.out.println(lines00);  
				  								  
				  								//  for (int i = 0; i < lines00.size(); i++)
				  							    //  {
				  							       
				  							     //   String[] data = ((String)lines00.get(i)).split(",");
				  							  //      //System.out.println(data[0]);
				  							     
				  								  
				  								  
				  								  
				  								//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  							    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
				  							      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
				  							      CSVResult csvResult = getCsvResult(false, query);
				  							      List<String> headers = csvResult.getHeaders();
				  							      List<String> lines = csvResult.getLines();
				  							      List<PublisherReport> pubreport = new ArrayList();
				  							  //    System.out.println(headers);
				  							   //   System.out.println(lines);
				  							      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  							      for (int i = 0; i < lines.size(); i++)
				  							      {
				  							        PublisherReport obj = new PublisherReport();
				  							        
				  							        String[] data = ((String)lines.get(i)).split(",");
				  							       // obj.setDate(data[0]);
				  							        obj.setReach(data[0]);
				  							        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  							        
				  							        pubreport.add(obj);
				  							      }
				  							    }  
				  							    
				  						    return pubreport;
				  						  }	  
								  	  
				  				public List<PublisherReport> getTopPostsbyTotalPageviewschannelLive(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  					    List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      for (int i = 0; i < lines1.size(); i++)
				  					      {
				  					        PublisherReport obj = new PublisherReport();
				  					        
				  					        String[] data1 = ((String)lines1.get(i)).split(",");
				  					      //    String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				  					         
				  					        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]); Article article = getArticleMetaData(data1[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  					        obj.setCount(data1[1]);
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					          
				  					          pubreport.add(obj);
				  					        
				  					      }
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }
								  	  			  
				  				
				  				public List<PublisherReport> getTopPostsbyUniqueViewschannelLive(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select count(distinct(cookies)),refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  					    List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      for (int i = 0; i < lines1.size(); i++)
				  					      {
				  					        PublisherReport obj = new PublisherReport();
				  					        
				  					        String[] data1 = ((String)lines1.get(i)).split(",");
				  					        //  String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				  					          
				  					          String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]); Article article = getArticleMetaData(data1[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  					          obj.setCount(data1[1]);
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					          
				  					          pubreport.add(obj);
				  					        
				  					      }
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }
								  	  			  
				  				  				
				
				  				public List<PublisherReport> getRefererPostsChannelLive(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					 String query1 = "Select count(*),refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  					    List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      for (int i = 0; i < lines1.size(); i++)
				  					      {
				  					        PublisherReport obj = new PublisherReport();
				  					        
				  					        String[] data1 = ((String)lines1.get(i)).split(",");
				  					        if ((data1[0].trim().toLowerCase().contains("facebook") || (data1[0].trim().toLowerCase().contains("google"))))
				  					        {
				  					          obj.setReferrerSource(data1[0]);
				  					          obj.setCount(data1[1]);
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
				  					        }
				  					      }
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }
				  				
				  				public List<PublisherReport> getNewContentChannelLive(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				
				  					    String query2 = "Select refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time < " + "'" + startdate + "' GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult2 = getCsvResult(false, query2);
				  					    List<String> headers2 = csvResult2.getHeaders();
				  					    List<String> lines2 = csvResult2.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				     
				  					     Set<String> list2 = new HashSet<String>();
				  					     list2.addAll(lines2);
				  					      
				  					     for(int i=0;i<lines1.size();i++){
				  					    	 
				  					    	 if(list2.contains(lines1.get(i))){
				  					    		 lines1.remove(i);
				  					    		 
				  					     }
				  					    	 
				  					   }
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      for (int i = 0; i < lines1.size(); i++)
				  					      {
				  					        PublisherReport obj = new PublisherReport();
				  					        
				  					        String data1 = (String)lines1.get(i);
				  					      
				  					          obj.setPublisher_pages(data1);
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
				  					       
				  					      }
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				public List<PublisherReport> getNewContentCountChannelLive(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				
				  					    String query2 = "Select refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time < " + "'" + startdate + "' GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult2 = getCsvResult(false, query2);
				  					    List<String> headers2 = csvResult2.getHeaders();
				  					    List<String> lines2 = csvResult2.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				     
				  					     Set<String> list2 = new HashSet<String>();
				  					     list2.addAll(lines2);
				  					      
				  					     for(int i=0;i<lines1.size();i++){
				  					    	 
				  					    	 if(list2.contains(lines1.get(i))){
				  					    		 lines1.remove(i);
				  					    		 
				  					     }
				  					    	 
				  					   }
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      
				  					          PublisherReport obj = new PublisherReport();
				  					        
				  					      
				  					          Integer newContent = lines1.size();
				  					          obj.setCount(newContent.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
				  					       
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  			  
				  				public List<PublisherReport> getOtherContentCountChannelLive(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				
				  					    String query2 = "Select refcurrentoriginal from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time < " + "'" + startdate + "' GROUP BY refcurrentoriginal";
				  					    CSVResult csvResult2 = getCsvResult(false, query2);
				  					    List<String> headers2 = csvResult2.getHeaders();
				  					    List<String> lines2 = csvResult2.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				     
				  					     Set<String> list2 = new HashSet<String>();
				  					     list2.addAll(lines2);
				  					      
				  					     for(int i=0;i<lines1.size();i++){
				  					    	 
				  					    	 if(list2.contains(lines1.get(i))){
				  					    		 lines1.remove(i);
				  					    		 
				  					     }
				  					    	 
				  					   }
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      
				  					          PublisherReport obj = new PublisherReport();
				  					        
				  					      
				  					          Integer otherContent =  lines2.size() - lines1.size();
				  					          obj.setCount(otherContent.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
				  					       
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				
				  				public List<PublisherReport> getPostsPublishedChannel(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select COUNT(DISTINCT(refcurrentoriginal)) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and publishDatev1 between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				
				  					  
				  					 
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      
				  					          
				  					    	
				  					    	PublisherReport obj = new PublisherReport();
				  					        
				  					    	 Integer posts = (int)Double.parseDouble(lines1.get(0));
				  					          obj.setCount(posts.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
				  					       
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				
				  				
				  				public List<PublisherReport> getPostsPublishedChannelDatewise(String startdate, String enddate, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select COUNT(DISTINCT(refcurrentoriginal)),publishDatev1 from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and publishDatev1 between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY publishDatev1";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					    System.out.println(lines1);
				  				
				  					  
				  					 
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					    	
				  					    	 for (int i = 0; i < lines1.size(); i++)
					  					      {
				  					    	
				  					    	  String[] data1 = ((String)lines1.get(i)).split(",");
				  					          PublisherReport obj = new PublisherReport();
				  					        
      			  					          obj.setDate(data1[0]);
      			  					          Integer posts = (int)Double.parseDouble(data1[1]);
      			  					          obj.setCount(posts.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
					  					     }
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				
				  				
				  				public List<PublisherReport> getPostsPublishedChannelFilter(String startdate, String enddate, String queryfilterbuilder, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select COUNT(DISTINCT(refcurrentoriginal)) from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  channel_name = '" + channel_name + "' and publishDatev1 between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				
				  					  
				  					 
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      
				  					          
				  					    	
				  					    	PublisherReport obj = new PublisherReport();
				  					        
				  					    	Integer posts = (int)Double.parseDouble(lines1.get(0));
				  					          obj.setCount(posts.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
				  					       
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				
				  				
				  				public List<PublisherReport> getPostsPublishedChannelFilterDatewise(String startdate, String enddate,String queryfilterbuilder, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select COUNT(DISTINCT(refcurrentoriginal)),publishDatev1 from enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and publishDatev1 between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY publishDatev1";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					    System.out.println(lines1);
				  				
				  					  
				  					 
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					    	
				  					    	 for (int i = 0; i < lines1.size(); i++)
					  					      {
				  					    	
				  					    	  String[] data1 = ((String)lines1.get(i)).split(",");
				  					          PublisherReport obj = new PublisherReport();
				  					        
      			  					          obj.setDate(data1[0]);
      			  					      Integer posts = (int)Double.parseDouble(data1[1]);
  			  					          obj.setCount(posts.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
					  					     }
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				public List<PublisherReport> getPostsPublishedChannelSection(String startdate, String enddate, String sectionid, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select COUNT(DISTINCT(refcurrentoriginal)) from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and  channel_name = '" + channel_name + "' and publishDatev1 between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					      System.out.println(lines1);
				  				
				  					  
				  					 
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					      
				  					          
				  					    	
				  					    	PublisherReport obj = new PublisherReport();
				  					        
				  					    	Integer posts = (int)Double.parseDouble(lines1.get(0));
				  					          obj.setCount(posts.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
				  					       
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				
				  				
				  				public List<PublisherReport> getPostsPublishedChannelSectionDatewise(String startdate, String enddate,String sectionid, String channel_name)
				  					    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  					  {
				  					    String query1 = "Select COUNT(DISTINCT(refcurrentoriginal)),publishDatev1 from enhanceduserdatabeta1 where section like '%"+sectionid+"%' and channel_name = '" + channel_name + "' and publishDatev1 between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY publishDatev1";
				  					    CSVResult csvResult1 = getCsvResult(false, query1);
				  					    List<String> headers1 = csvResult1.getHeaders();
				  					    List<String> lines1 = csvResult1.getLines();
				  					    System.out.println(headers1);
				  					    System.out.println(lines1);
				  				
				  					  
				  					 
				  					     
				  					     
				  					      
				  					      List<PublisherReport> pubreport = new ArrayList();
				  					    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  					    {
				  					    	
				  					    	 for (int i = 0; i < lines1.size(); i++)
					  					      {
				  					    	
				  					    	  String[] data1 = ((String)lines1.get(i)).split(",");
				  					          PublisherReport obj = new PublisherReport();
				  					        
				  					          obj.setDate(data1[0]);
	      			  					      Integer posts = (int)Double.parseDouble(data1[1]);
	  			  					          obj.setCount(posts.toString());
				  					          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					         
				  					          pubreport.add(obj);
					  					     }
				  					     
				  					    //  System.out.println(headers1);
				  					    //  System.out.println(lines1);
				  					    }
				  					    return pubreport;
				  					  }	
				  				
				  				
				  				
				  				
				  				
				  				
				  				 public List<PublisherReport> countCityChannelFilter(String startdate, String enddate, String channel_name, Map<String,String>filter1, String filter)
				  					    throws CsvExtractorException, Exception
				  					  {
				  					    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  					    
				  				  
				  					 int size = filter1.size();
				  			        String queryfilterbuilder = "";
				  			        String formattedString = "";
				  			        String query = "";
				  			        int j =0;
				  			        for (Map.Entry<String, String> entry : filter1.entrySet())
				  			        {
				  			        	if (j==0){
				  			                
				  			        		if(entry.getKey().contains("tag"))
				  			        	    queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";
				  			        		else{
				  			        		formattedString = addCommaString(entry.getValue());
				  			        		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
				  			        		}
				  			        	}
				  			            else{
				  			            
				  			            	if(entry.getKey().contains("tag"))
				  				        	    queryfilterbuilder = queryfilterbuilder+" and "+ entry.getKey() + " like " + "'%"+entry.getValue()+"%'";	
				  			            else{	
				  			            formattedString = addCommaString(entry.getValue());	
				  			            queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
				  			            }
				  			            }
				  			            j++;
				  			         
				  			        }
				  			        

				  				  
				  				  
				  				        query = "SELECT COUNT(*)as count,city FROM enhanceduserdatabeta1 where  "+queryfilterbuilder+" and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by city order by count desc";
				  					    
				  					   
				  					    CSVResult csvResult = getCsvResult(false, query);
				  					    List<String> headers = csvResult.getHeaders();
				  					    List<String> lines = csvResult.getLines();
				  					    List<PublisherReport> pubreport = new ArrayList();
				  					    Integer accumulatedCount = 0;
				  					    
				  					    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  					      for (int i = 0; i < lines.size(); i++)
				  					      {
				  					        PublisherReport obj = new PublisherReport();
				  					        
				  					        String[] data = ((String)lines.get(i)).split(",");
				  					        if(i<10 && !data[0].equals("undetermined")){
				  					        	String locationproperties = citycodeMap.get(data[0]);
				  						        data[0]=data[0].replace("_"," ").replace("-"," ");
				  						      if(citylatlongMap1.get(data[0])!=null && !citylatlongMap1.get(data[0]).isEmpty())
				  						        obj.setCitylatlong(citylatlongMap1.get(data[0]));
				  						        data[0]=capitalizeString(data[0]);
				  						        obj.setCity(capitalizeString(data[0]));
				  						        System.out.println(data[0]);
				  						        obj.setLocationcode(locationproperties);
				  					      //  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  								obj.setCount(data[1]);
				  							//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  							//	obj.setEngagementTime(data[1]);
				  							//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  							//	obj.setVisitorCount(data[1]);
				  					        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  					        pubreport.add(obj);
				  					        }
				  					        else
				  					        {	   
				  					        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
				  					        	 
				  						    	  if(i == (lines.size()-1)){
				  						    		 obj.setCity("Others"); 
				  						    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  								  //   String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
				  						    		//  if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  											obj.setCount(accumulatedCount.toString());
				  										//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  											//obj.setEngagementTime(accumulatedCount.toString());
				  											//if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  											//obj.setVisitorCount(accumulatedCount.toString());
				  						    		 pubreport.add(obj);
				  						    	  }
				  						       }
				  					      
				  					      
				  					      
				  					      
				  					      }
				  					    }
				  					    return pubreport;
				  					  }
				  			  			  				
				  				
				  				public List<PublisherReport> counttotalvisitorsChannelArticlefilter(
				  						String startdate, String enddate, String channel_name,
				  						String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  					// System.setOut(new PrintStream(new BufferedOutputStream(new
				  					// FileOutputStream("output.txt"))));

				  					String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + "group by cookie_id limit 20000000";

				  					// CSVResult csvResult00 = getCsvResult(false, query00);
				  					// List<String> headers00 = csvResult00.getHeaders();
				  					// List<String> lines00 = csvResult00.getLines();
				  					// List<PublisherReport> pubreport00 = new ArrayList();

				  					// System.out.println(headers00);
				  					// System.out.println(lines00);

				  					// for (int i = 0; i < lines00.size(); i++)
				  					// {

				  					// String[] data = ((String)lines00.get(i)).split(",");
				  					// //System.out.println(data[0]);

				  					// Aggregations result =
				  					// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  					// new Object[] { "enhanceduserprofilestore" }));
				  					String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'";
				  					CSVResult csvResult = getCsvResult(false, query);
				  					List<String> headers = csvResult.getHeaders();
				  					List<String> lines = csvResult.getLines();
				  					List<PublisherReport> pubreport = new ArrayList();
				  					System.out.println(headers);
				  					System.out.println(lines);
				  					if ((lines != null) && (!lines.isEmpty())
				  							&& (!((String) lines.get(0)).isEmpty())) {
				  						for (int i = 0; i < lines.size(); i++) {
				  							PublisherReport obj = new PublisherReport();

				  							String[] data = ((String) lines.get(i)).split(",");
				  							// obj.setDate(data[0]);
				  							obj.setTotalvisits(data[0]);
				  							String[] channels = channel_name.split("_");
				  							String channel_name1 = channels[0];
				  							channel_name1 = capitalizeString(channel_name1);
				  							obj.setChannelName(channel_name1);
				  							String articleparts[] = articlename.split("/");
				  							String articleTitle = articleparts[articleparts.length - 1];
				  							articleTitle = articleTitle.replace("-", " ");
				  							articleTitle = capitalizeString(articleTitle);
				  							obj.setArticleTitle(articleTitle);
				  							obj.setArticle(articlename);
				  							pubreport.add(obj);
				  						}
				  					}

				  					return pubreport;
				  				}

				  				public List<PublisherReport> counttotalvisitorsChannelArticleDatewisefilter(
				  						String startdate, String enddate, String channel_name,
				  						String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  					// System.setOut(new PrintStream(new BufferedOutputStream(new
				  					// FileOutputStream("output.txt"))));

				  					String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + "group by cookie_id limit 20000000";

				  					// CSVResult csvResult00 = getCsvResult(false, query00);
				  					// List<String> headers00 = csvResult00.getHeaders();
				  					// List<String> lines00 = csvResult00.getLines();
				  					// List<PublisherReport> pubreport00 = new ArrayList();

				  					// System.out.println(headers00);
				  					// System.out.println(lines00);

				  					// for (int i = 0; i < lines00.size(); i++)
				  					// {

				  					// String[] data = ((String)lines00.get(i)).split(",");
				  					// //System.out.println(data[0]);

				  					// Aggregations result =
				  					// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  					// new Object[] { "enhanceduserprofilestore" }));
				  					String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + " group by date";
				  					CSVResult csvResult = getCsvResult(false, query);
				  					List<String> headers = csvResult.getHeaders();
				  					List<String> lines = csvResult.getLines();
				  					List<PublisherReport> pubreport = new ArrayList();
				  					System.out.println(headers);
				  					System.out.println(lines);
				  					if ((lines != null) && (!lines.isEmpty())
				  							&& (!((String) lines.get(0)).isEmpty())) {
				  						for (int i = 0; i < lines.size(); i++) {
				  							PublisherReport obj = new PublisherReport();

				  							String[] data = ((String) lines.get(i)).split(",");
				  							obj.setDate(data[0]);
				  							obj.setTotalvisits(data[1]);
				  							String[] channels = channel_name.split("_");
				  							String channel_name1 = channels[0];
				  							channel_name1 = capitalizeString(channel_name1);
				  							obj.setChannelName(channel_name1);
				  							String articleparts[] = articlename.split("/");
				  							String articleTitle = articleparts[articleparts.length - 1];
				  							articleTitle = articleTitle.replace("-", " ");
				  							articleTitle = capitalizeString(articleTitle);
				  							obj.setArticleTitle(articleTitle);
				  							obj.setArticle(articlename);
				  							pubreport.add(obj);
				  						}
				  					}

				  					return pubreport;
				  				}

				  				public List<PublisherReport> counttotalvisitorsChannelArticleHourwisefilter(
				  						String startdate, String enddate, String channel_name,
				  						String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  					// System.setOut(new PrintStream(new BufferedOutputStream(new
				  					// FileOutputStream("output.txt"))));

				  					String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + "group by cookie_id limit 20000000";

				  					// CSVResult csvResult00 = getCsvResult(false, query00);
				  					// List<String> headers00 = csvResult00.getHeaders();
				  					// List<String> lines00 = csvResult00.getLines();
				  					// List<PublisherReport> pubreport00 = new ArrayList();

				  					// System.out.println(headers00);
				  					// System.out.println(lines00);

				  					// for (int i = 0; i < lines00.size(); i++)
				  					// {

				  					// String[] data = ((String)lines00.get(i)).split(",");
				  					// //System.out.println(data[0]);

				  					/*
				  					 * String time = startdate; DateFormat df = new
				  					 * SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Date date1 = df.parse(time);
				  					 * 
				  					 * String time1 = enddate; Date date2 = df.parse(time1);
				  					 * 
				  					 * 
				  					 * 
				  					 * int days = getDifferenceDays(date1, date2); Calendar cal =
				  					 * Calendar.getInstance(); cal.add(Calendar.DATE, days); Date
				  					 * benchmarkStartDate = cal.getTime(); Date benchmarkEndDate = date1;
				  					 */

				  					// Aggregations result =
				  					// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  					// new Object[] { "enhanceduserprofilestore" }));
				  					String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate
				  							+ "'"
				  							+ " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					CSVResult csvResult = getCsvResult(false, query);
				  					List<String> headers = csvResult.getHeaders();
				  					List<String> lines = csvResult.getLines();
				  					List<PublisherReport> pubreport = new ArrayList();
				  					System.out.println(headers);
				  					System.out.println(lines);
				  					if ((lines != null) && (!lines.isEmpty())
				  							&& (!((String) lines.get(0)).isEmpty())) {
				  						for (int i = 0; i < lines.size(); i++) {
				  							PublisherReport obj = new PublisherReport();

				  							String[] data = ((String) lines.get(i)).split(",");
				  							obj.setDate(data[0]);
				  							obj.setTotalvisits(data[1]);
				  							String[] channels = channel_name.split("_");
				  							String channel_name1 = channels[0];
				  							channel_name1 = capitalizeString(channel_name1);
				  							obj.setChannelName(channel_name1);
				  							String articleparts[] = articlename.split("/");
				  							String articleTitle = articleparts[articleparts.length - 1];
				  							articleTitle = articleTitle.replace("-", " ");
				  							articleTitle = capitalizeString(articleTitle);
				  							obj.setArticleTitle(articleTitle);
				  							obj.setArticle(articlename);
				  							pubreport.add(obj);
				  						}
				  					}

				  					return pubreport;
				  				}


				  			public List<PublisherReport> EngagementTimeChannelArticlefilter(String startdate,
				  						String enddate, String channel_name, String articlename, String queryfilterbuilder)
				  						throws CsvExtractorException, Exception {

				  					// System.setOut(new PrintStream(new BufferedOutputStream(new
				  					// FileOutputStream("output.txt"))));

				  					String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + "group by cookie_id limit 20000000";

				  					// CSVResult csvResult00 = getCsvResult(false, query00);
				  					// List<String> headers00 = csvResult00.getHeaders();
				  					// List<String> lines00 = csvResult00.getLines();
				  					// List<PublisherReport> pubreport00 = new ArrayList();

				  					// System.out.println(headers00);
				  					// System.out.println(lines00);

				  					// for (int i = 0; i < lines00.size(); i++)
				  					// {

				  					// String[] data = ((String)lines00.get(i)).split(",");
				  					// //System.out.println(data[0]);

				  					// Aggregations result =
				  					// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  					// new Object[] { "enhanceduserprofilestore" }));
				  					String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'";
				  					CSVResult csvResult = getCsvResult(false, query);
				  					List<String> headers = csvResult.getHeaders();
				  					List<String> lines = csvResult.getLines();
				  					List<PublisherReport> pubreport = new ArrayList();
				  					System.out.println(headers);
				  					System.out.println(lines);
				  					if ((lines != null) && (!lines.isEmpty())
				  							&& (!((String) lines.get(0)).isEmpty())) {
				  						for (int i = 0; i < lines.size(); i++) {
				  							PublisherReport obj = new PublisherReport();

				  							String[] data = ((String) lines.get(i)).split(",");
				  							// obj.setDate(data[0]);
				  							obj.setEngagementTime(data[0]);
				  							String[] channels = channel_name.split("_");
				  							String channel_name1 = channels[0];
				  							channel_name1 = capitalizeString(channel_name1);
				  							obj.setChannelName(channel_name1);
				  							String articleparts[] = articlename.split("/");
				  							String articleTitle = articleparts[articleparts.length - 1];
				  							articleTitle = articleTitle.replace("-", " ");
				  							articleTitle = capitalizeString(articleTitle);
				  							obj.setArticleTitle(articleTitle);
				  							obj.setArticle(articlename);
				  							pubreport.add(obj);
				  						}
				  					}

				  					return pubreport;
				  				}

				  				public List<PublisherReport> EngagementTimeChannelArticleDatewisefilter(
				  						String startdate, String enddate, String channel_name,
				  						String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  					// System.setOut(new PrintStream(new BufferedOutputStream(new
				  					// FileOutputStream("output.txt"))));

				  					String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + "group by cookie_id limit 20000000";

				  					// CSVResult csvResult00 = getCsvResult(false, query00);
				  					// List<String> headers00 = csvResult00.getHeaders();
				  					// List<String> lines00 = csvResult00.getLines();
				  					// List<PublisherReport> pubreport00 = new ArrayList();

				  					// System.out.println(headers00);
				  					// System.out.println(lines00);

				  					// for (int i = 0; i < lines00.size(); i++)
				  					// {

				  					// String[] data = ((String)lines00.get(i)).split(",");
				  					// //System.out.println(data[0]);

				  					// Aggregations result =
				  					// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  					// new Object[] { "enhanceduserprofilestore" }));
				  					String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + " group by date";
				  					CSVResult csvResult = getCsvResult(false, query);
				  					List<String> headers = csvResult.getHeaders();
				  					List<String> lines = csvResult.getLines();
				  					List<PublisherReport> pubreport = new ArrayList();
				  					System.out.println(headers);
				  					System.out.println(lines);
				  					if ((lines != null) && (!lines.isEmpty())
				  							&& (!((String) lines.get(0)).isEmpty())) {
				  						for (int i = 0; i < lines.size(); i++) {
				  							PublisherReport obj = new PublisherReport();

				  							String[] data = ((String) lines.get(i)).split(",");
				  							obj.setDate(data[0]);
				  							obj.setEngagementTime(data[1]);
				  							String[] channels = channel_name.split("_");
				  							String channel_name1 = channels[0];
				  							channel_name1 = capitalizeString(channel_name1);
				  							obj.setChannelName(channel_name1);
				  							String articleparts[] = articlename.split("/");
				  							String articleTitle = articleparts[articleparts.length - 1];
				  							articleTitle = articleTitle.replace("-", " ");
				  							articleTitle = capitalizeString(articleTitle);
				  							obj.setArticleTitle(articleTitle);
				  							obj.setArticle(articlename);
				  							pubreport.add(obj);
				  						}
				  					}

				  					return pubreport;
				  				}

				  				public List<PublisherReport> EngagementTimeChannelArticleHourwisefilter(
				  						String startdate, String enddate, String channel_name,
				  						String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  					// System.setOut(new PrintStream(new BufferedOutputStream(new
				  					// FileOutputStream("output.txt"))));

				  					String query00 = "SELECT cookie FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate + "'" + "group by cookie_id limit 20000000";

				  					// CSVResult csvResult00 = getCsvResult(false, query00);
				  					// List<String> headers00 = csvResult00.getHeaders();
				  					// List<String> lines00 = csvResult00.getLines();
				  					// List<PublisherReport> pubreport00 = new ArrayList();

				  					// System.out.println(headers00);
				  					// System.out.println(lines00);

				  					// for (int i = 0; i < lines00.size(); i++)
				  					// {

				  					// String[] data = ((String)lines00.get(i)).split(",");
				  					// //System.out.println(data[0]);

				  					// Aggregations result =
				  					// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  					// new Object[] { "enhanceduserprofilestore" }));
				  					String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  							+ articlename
				  							+ "%' and channel_name = '"
				  							+ channel_name
				  							+ "' and date between "
				  							+ "'"
				  							+ startdate
				  							+ "'"
				  							+ " and "
				  							+ "'"
				  							+ enddate
				  							+ "'"
				  							+ " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					CSVResult csvResult = getCsvResult(false, query);
				  					List<String> headers = csvResult.getHeaders();
				  					List<String> lines = csvResult.getLines();
				  					List<PublisherReport> pubreport = new ArrayList();
				  					System.out.println(headers);
				  					System.out.println(lines);
				  					if ((lines != null) && (!lines.isEmpty())
				  							&& (!((String) lines.get(0)).isEmpty())) {
				  						for (int i = 0; i < lines.size(); i++) {
				  							PublisherReport obj = new PublisherReport();

				  							String[] data = ((String) lines.get(i)).split(",");
				  							obj.setDate(data[0]);
				  							obj.setEngagementTime(data[1]);
				  							String[] channels = channel_name.split("_");
				  							String channel_name1 = channels[0];
				  							channel_name1 = capitalizeString(channel_name1);
				  							obj.setChannelName(channel_name1);
				  							String articleparts[] = articlename.split("/");
				  							String articleTitle = articleparts[articleparts.length - 1];
				  							articleTitle = articleTitle.replace("-", " ");
				  							articleTitle = capitalizeString(articleTitle);
				  							obj.setArticleTitle(articleTitle);
				  							obj.setArticle(articlename);
				  							pubreport.add(obj);
				  						}
				  					}

				  					return pubreport;
				  				}
				  				
				  				
				  				
				  				public List<PublisherReport> countfingerprintChannelArticlefilter(
				  							String startdate, String enddate, String channel_name,
				  							String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {
				  				
				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));
				  				
				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal= '"
				  								+ articlename
				  								+ "' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";
				  				
				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();
				  				
				  						// System.out.println(headers00);
				  						// System.out.println(lines00);
				  				
				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {
				  				
				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);
				  				
				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  								+ articlename
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();
				  				
				  								String[] data = ((String) lines.get(i)).split(",");
				  								// obj.setDate(data[0]);
				  								obj.setReach(data[0]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								String articleparts[] = articlename.split("/");
				  								String articleTitle = articleparts[articleparts.length - 1];
				  								articleTitle = articleTitle.replace("-", " ");
				  								articleTitle = capitalizeString(articleTitle);
				  								obj.setArticleTitle(articleTitle);
				  								obj.setArticle(articlename);
				  								pubreport.add(obj);
				  							}
				  						}
				  				
				  						return pubreport;
				  					}
				  				
				  					public List<PublisherReport> countfingerprintChannelArticleDatewisefilter(
				  							String startdate, String enddate, String channel_name,
				  							String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {
				  				
				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));
				  				
				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal= '"
				  								+ articlename
				  								+ "' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";
				  				
				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();
				  				
				  						// System.out.println(headers00);
				  						// System.out.println(lines00);
				  				
				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {
				  				
				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);
				  				
				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  								+ articlename
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + " group by date";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();
				  				
				  								String[] data = ((String) lines.get(i)).split(",");
				  								obj.setDate(data[0]);
				  								obj.setReach(data[1]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								String articleparts[] = articlename.split("/");
				  								String articleTitle = articleparts[articleparts.length - 1];
				  								articleTitle = articleTitle.replace("-", " ");
				  								articleTitle = capitalizeString(articleTitle);
				  								obj.setArticleTitle(articleTitle);
				  								obj.setArticle(articlename);
				  								pubreport.add(obj);
				  							}
				  						}
				  				
				  						return pubreport;
				  					}
				  				
				  					public List<PublisherReport> countfingerprintChannelArticleHourwisefilter(
				  							String startdate, String enddate, String channel_name,
				  							String articlename, String queryfilterbuilder) throws CsvExtractorException, Exception {
				  				
				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));
				  				
				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal= '"
				  								+ articlename
				  								+ "' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";
				  				
				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();
				  				
				  						// System.out.println(headers00);
				  						// System.out.println(lines00);
				  				
				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {
				  				
				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);
				  				
				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and refcurrentoriginal like '%"
				  								+ articlename
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate
				  								+ "'"
				  								+ " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();
				  				
				  								String[] data = ((String) lines.get(i)).split(",");
				  								obj.setDate(data[0]);
				  								obj.setReach(data[1]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								String articleparts[] = articlename.split("/");
				  								String articleTitle = articleparts[articleparts.length - 1];
				  								articleTitle = articleTitle.replace("-", " ");
				  								articleTitle = capitalizeString(articleTitle);
				  								obj.setArticleTitle(articleTitle);
				  								obj.setArticle(articlename);
				  								pubreport.add(obj);
				  							}
				  						}
				  				
				  						return pubreport;
				  					}

				  				
				  				
				  					public List<PublisherReport> countfingerprintChannelSectionfilter(
				  							String startdate, String enddate, String channel_name,
				  							String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));

				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";

				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();

				  						// System.out.println(headers00);
				  						// System.out.println(lines00);

				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {

				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);

				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();

				  								String[] data = ((String) lines.get(i)).split(",");
				  								// obj.setDate(data[0]);
				  								obj.setReach(data[0]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								obj.setSection(sectionname);
				  								pubreport.add(obj);
				  							}
				  						}

				  						return pubreport;
				  					}

				  					public List<PublisherReport> countfingerprintChannelSectionDateHourwisefilter(
				  							String startdate, String enddate, String channel_name,
				  							String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));

				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";

				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();

				  						// System.out.println(headers00);
				  						// System.out.println(lines00);

				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {

				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);

				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate
				  								+ "'"
				  								+ " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();

				  								String[] data = ((String) lines.get(i)).split(",");
				  								obj.setDate(data[0]);
				  								obj.setReach(data[1]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								obj.setSection(sectionname);
				  								pubreport.add(obj);
				  							}
				  						}

				  						return pubreport;
				  					}

				  					public List<PublisherReport> countfingerprintChannelSectionDatewisefilter(
				  							String startdate, String enddate, String channel_name,
				  							String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));

				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";

				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();

				  						// System.out.println(headers00);
				  						// System.out.println(lines00);

				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {

				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);

				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + " group by date";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();

				  								String[] data = ((String) lines.get(i)).split(",");
				  								obj.setDate(data[0]);
				  								obj.setReach(data[1]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								obj.setSection(sectionname);
				  								pubreport.add(obj);
				  							}
				  						}

				  						return pubreport;
				  					}





				  				public List<PublisherReport> counttotalvisitorsChannelSectionfilter(
				  							String startdate, String enddate, String channel_name,
				  							String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));

				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";

				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();

				  						// System.out.println(headers00);
				  						// System.out.println(lines00);

				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {

				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);

				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(*) as visits FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();

				  								String[] data = ((String) lines.get(i)).split(",");
				  								// obj.setDate(data[0]);
				  								obj.setTotalvisits(data[0]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								obj.setSection(sectionname);
				  								pubreport.add(obj);
				  							}
				  						}

				  						return pubreport;
				  					}

				  					

				  					

				  					public List<PublisherReport> counttotalvisitorsChannelSectionDateHourwisefilter(
				  							String startdate, String enddate, String channel_name,
				  							String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));

				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";

				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();

				  						// System.out.println(headers00);
				  						// System.out.println(lines00);

				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {

				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);

				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate
				  								+ "'"
				  								+ " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();

				  								String[] data = ((String) lines.get(i)).split(",");
				  								obj.setDate(data[0]);
				  								obj.setTotalvisits(data[1]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								obj.setSection(sectionname);
				  								pubreport.add(obj);
				  							}
				  						}

				  						return pubreport;
				  					}

				  					public List<PublisherReport> counttotalvisitorsChannelSectionDatewisefilter(
				  							String startdate, String enddate, String channel_name,
				  							String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {

				  						// System.setOut(new PrintStream(new BufferedOutputStream(new
				  						// FileOutputStream("output.txt"))));

				  						String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + "group by cookie_id limit 20000000";

				  						// CSVResult csvResult00 = getCsvResult(false, query00);
				  						// List<String> headers00 = csvResult00.getHeaders();
				  						// List<String> lines00 = csvResult00.getLines();
				  						// List<PublisherReport> pubreport00 = new ArrayList();

				  						// System.out.println(headers00);
				  						// System.out.println(lines00);

				  						// for (int i = 0; i < lines00.size(); i++)
				  						// {

				  						// String[] data = ((String)lines00.get(i)).split(",");
				  						// //System.out.println(data[0]);

				  						// Aggregations result =
				  						// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  						// new Object[] { "enhanceduserprofilestore" }));
				  						String query = "SELECT count(*)as visits,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  								+ sectionname
				  								+ "%' and channel_name = '"
				  								+ channel_name
				  								+ "' and date between "
				  								+ "'"
				  								+ startdate
				  								+ "'"
				  								+ " and "
				  								+ "'"
				  								+ enddate + "'" + " group by date";
				  						CSVResult csvResult = getCsvResult(false, query);
				  						List<String> headers = csvResult.getHeaders();
				  						List<String> lines = csvResult.getLines();
				  						List<PublisherReport> pubreport = new ArrayList();
				  						System.out.println(headers);
				  						System.out.println(lines);
				  						if ((lines != null) && (!lines.isEmpty())
				  								&& (!((String) lines.get(0)).isEmpty())) {
				  							for (int i = 0; i < lines.size(); i++) {
				  								PublisherReport obj = new PublisherReport();

				  								String[] data = ((String) lines.get(i)).split(",");
				  								obj.setDate(data[0]);
				  								obj.setTotalvisits(data[1]);
				  								String[] channels = channel_name.split("_");
				  								String channel_name1 = channels[0];
				  								channel_name1 = capitalizeString(channel_name1);
				  								obj.setChannelName(channel_name1);
				  								obj.setSection(sectionname);
				  								pubreport.add(obj);
				  							}
				  						}

				  						return pubreport;
				  					}





				  					public List<PublisherReport> engagementTimeChannelSectionfilter(String startdate,
				  								String enddate, String channel_name, String sectionname, String queryfilterbuilder)
				  								throws CsvExtractorException, Exception {
				  					
				  							// System.setOut(new PrintStream(new BufferedOutputStream(new
				  							// FileOutputStream("output.txt"))));
				  					
				  							String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  									+ sectionname
				  									+ "%' and channel_name = '"
				  									+ channel_name
				  									+ "' and date between "
				  									+ "'"
				  									+ startdate
				  									+ "'"
				  									+ " and "
				  									+ "'"
				  									+ enddate + "'" + "group by cookie_id limit 20000000";
				  					
				  							// CSVResult csvResult00 = getCsvResult(false, query00);
				  							// List<String> headers00 = csvResult00.getHeaders();
				  							// List<String> lines00 = csvResult00.getLines();
				  							// List<PublisherReport> pubreport00 = new ArrayList();
				  					
				  							// System.out.println(headers00);
				  							// System.out.println(lines00);
				  					
				  							// for (int i = 0; i < lines00.size(); i++)
				  							// {
				  					
				  							// String[] data = ((String)lines00.get(i)).split(",");
				  							// //System.out.println(data[0]);
				  					
				  							// Aggregations result =
				  							// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  							// new Object[] { "enhanceduserprofilestore" }));
				  							String query = "SELECT SUM(engagementTime) as eT FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  									+ sectionname
				  									+ "%' and channel_name = '"
				  									+ channel_name
				  									+ "' and date between "
				  									+ "'"
				  									+ startdate
				  									+ "'"
				  									+ " and "
				  									+ "'"
				  									+ enddate + "'";
				  							CSVResult csvResult = getCsvResult(false, query);
				  							List<String> headers = csvResult.getHeaders();
				  							List<String> lines = csvResult.getLines();
				  							List<PublisherReport> pubreport = new ArrayList();
				  							System.out.println(headers);
				  							System.out.println(lines);
				  							if ((lines != null) && (!lines.isEmpty())
				  									&& (!((String) lines.get(0)).isEmpty())) {
				  								for (int i = 0; i < lines.size(); i++) {
				  									PublisherReport obj = new PublisherReport();
				  					
				  									String[] data = ((String) lines.get(i)).split(",");
				  									// obj.setDate(data[0]);
				  									obj.setEngagementTime(data[0]);
				  									String[] channels = channel_name.split("_");
				  									String channel_name1 = channels[0];
				  									channel_name1 = capitalizeString(channel_name1);
				  									obj.setChannelName(channel_name1);
				  									obj.setSection(sectionname);
				  									pubreport.add(obj);
				  								}
				  							}
				  					
				  							return pubreport;
				  						}
				  					
				  						public List<PublisherReport> engagementTimeChannelSectionDateHourwisefilter(
				  								String startdate, String enddate, String channel_name,
				  								String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {
				  					
				  							// System.setOut(new PrintStream(new BufferedOutputStream(new
				  							// FileOutputStream("output.txt"))));
				  					
				  							String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  									+ sectionname
				  									+ "%' and channel_name = '"
				  									+ channel_name
				  									+ "' and date between "
				  									+ "'"
				  									+ startdate
				  									+ "'"
				  									+ " and "
				  									+ "'"
				  									+ enddate + "'" + "group by cookie_id limit 20000000";
				  					
				  							// CSVResult csvResult00 = getCsvResult(false, query00);
				  							// List<String> headers00 = csvResult00.getHeaders();
				  							// List<String> lines00 = csvResult00.getLines();
				  							// List<PublisherReport> pubreport00 = new ArrayList();
				  					
				  							// System.out.println(headers00);
				  							// System.out.println(lines00);
				  					
				  							// for (int i = 0; i < lines00.size(); i++)
				  							// {
				  					
				  							// String[] data = ((String)lines00.get(i)).split(",");
				  							// //System.out.println(data[0]);
				  					
				  							// Aggregations result =
				  							// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  							// new Object[] { "enhanceduserprofilestore" }));
				  							String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  									+ sectionname
				  									+ "%' and channel_name = '"
				  									+ channel_name
				  									+ "' and date between "
				  									+ "'"
				  									+ startdate
				  									+ "'"
				  									+ " and "
				  									+ "'"
				  									+ enddate
				  									+ "'"
				  									+ " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  							CSVResult csvResult = getCsvResult(false, query);
				  							List<String> headers = csvResult.getHeaders();
				  							List<String> lines = csvResult.getLines();
				  							List<PublisherReport> pubreport = new ArrayList();
				  							System.out.println(headers);
				  							System.out.println(lines);
				  							if ((lines != null) && (!lines.isEmpty())
				  									&& (!((String) lines.get(0)).isEmpty())) {
				  								for (int i = 0; i < lines.size(); i++) {
				  									PublisherReport obj = new PublisherReport();
				  					
				  									String[] data = ((String) lines.get(i)).split(",");
				  									obj.setDate(data[0]);
				  									obj.setEngagementTime(data[1]);
				  									String[] channels = channel_name.split("_");
				  									String channel_name1 = channels[0];
				  									channel_name1 = capitalizeString(channel_name1);
				  									obj.setChannelName(channel_name1);
				  									obj.setSection(sectionname);
				  									pubreport.add(obj);
				  								}
				  							}
				  					
				  							return pubreport;
				  						}
				  					
				  						public List<PublisherReport> engagementTimeChannelSectionDatewisefilter(
				  								String startdate, String enddate, String channel_name,
				  								String sectionname, String queryfilterbuilder) throws CsvExtractorException, Exception {
				  					
				  							// System.setOut(new PrintStream(new BufferedOutputStream(new
				  							// FileOutputStream("output.txt"))));
				  					
				  							String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  									+ sectionname
				  									+ "%' and channel_name = '"
				  									+ channel_name
				  									+ "' and date between "
				  									+ "'"
				  									+ startdate
				  									+ "'"
				  									+ " and "
				  									+ "'"
				  									+ enddate + "'" + "group by cookie_id limit 20000000";
				  					
				  							// CSVResult csvResult00 = getCsvResult(false, query00);
				  							// List<String> headers00 = csvResult00.getHeaders();
				  							// List<String> lines00 = csvResult00.getLines();
				  							// List<PublisherReport> pubreport00 = new ArrayList();
				  					
				  							// System.out.println(headers00);
				  							// System.out.println(lines00);
				  					
				  							// for (int i = 0; i < lines00.size(); i++)
				  							// {
				  					
				  							// String[] data = ((String)lines00.get(i)).split(",");
				  							// //System.out.println(data[0]);
				  					
				  							// Aggregations result =
				  							// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  							// new Object[] { "enhanceduserprofilestore" }));
				  							String query = "SELECT SUM(engagementTime) as eT,date FROM enhanceduserdatabeta1 where " + queryfilterbuilder + " and  refcurrentoriginal like '%"
				  									+ sectionname
				  									+ "%' and channel_name = '"
				  									+ channel_name
				  									+ "' and date between "
				  									+ "'"
				  									+ startdate
				  									+ "'"
				  									+ " and "
				  									+ "'"
				  									+ enddate + "'" + " group by date";
				  							CSVResult csvResult = getCsvResult(false, query);
				  							List<String> headers = csvResult.getHeaders();
				  							List<String> lines = csvResult.getLines();
				  							List<PublisherReport> pubreport = new ArrayList();
				  							System.out.println(headers);
				  							System.out.println(lines);
				  							if ((lines != null) && (!lines.isEmpty())
				  									&& (!((String) lines.get(0)).isEmpty())) {
				  								for (int i = 0; i < lines.size(); i++) {
				  									PublisherReport obj = new PublisherReport();
				  					
				  									String[] data = ((String) lines.get(i)).split(",");
				  									obj.setDate(data[0]);
				  									obj.setEngagementTime(data[1]);
				  									String[] channels = channel_name.split("_");
				  									String channel_name1 = channels[0];
				  									channel_name1 = capitalizeString(channel_name1);
				  									obj.setChannelName(channel_name1);
				  									obj.setSection(sectionname);
				  									pubreport.add(obj);
				  								}
				  							}
				  					
				  							return pubreport;
				  						}
				
				  				
				  				
				  				
				  				
				  				
				  				

				  				
				  				
				  				
				  				
				  				
				  				
				  				
				  				
				  				
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  						public List<PublisherReport> countStateChannelArticlefilter(String startdate,
				  								String enddate, String channel_name, String articlename,
				  								String filter,String queryfilterbuilder) throws CsvExtractorException, Exception {
				  							// Aggregations result =
				  							// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  							// new Object[] { "enhanceduserprofilestore" }));
				  							// String query =
				  							// "SELECT COUNT(*)as count,state FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '"
				  							// + channel_name + "' and date between " + "'" + startdate + "'" +
				  							// " and " + "'" + enddate + "'" +
				  							// " group by state order by count desc";

				  							String query = "";
				  							String queryfield = "state";
				  							if (filter == null || filter.isEmpty() || filter.equals("pageviews"))
				  								query = "Select count(*),"
				  										+ queryfield
				  										+ " from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  										+ articlename + "%' and channel_name = '" + channel_name
				  										+ "' and date between " + "'" + startdate + "'" + " and "
				  										+ "'" + enddate + "'" + " GROUP BY " + queryfield;

				  							if (filter != null && !filter.isEmpty()
				  									&& filter.equals("engagementTime"))
				  								query = "Select SUM(engagementTime),"
				  										+ queryfield
				  										+ " from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  										+ articlename + "%' and channel_name = '" + channel_name
				  										+ "' and date between " + "'" + startdate + "'" + " and "
				  										+ "'" + enddate + "'" + " GROUP BY " + queryfield;

				  							if (filter != null && !filter.isEmpty()
				  									&& filter.equals("visitorCount"))
				  								query = "Select "
				  										+ queryfield
				  										+ ",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  										+ articlename + "%' and channel_name = '" + channel_name
				  										+ "' and date between " + "'" + startdate + "'" + " and "
				  										+ "'" + enddate + "' GROUP by " + queryfield + "";

				  							CSVResult csvResult = getCsvResult(false, query);
				  							List<String> headers = csvResult.getHeaders();
				  							List<String> lines = csvResult.getLines();
				  							System.out.println(headers);
				  							System.out.println(lines);
				  							Integer accumulatedCount = 0;

				  							List<PublisherReport> pubreport = new ArrayList();
				  							if ((lines != null) && (!lines.isEmpty())
				  									&& (!((String) lines.get(0)).isEmpty())) {
				  								for (int i = 0; i < lines.size(); i++) {
				  									PublisherReport obj = new PublisherReport();

				  									String[] data = ((String) lines.get(i)).split(",");
				  									if (i < 10 && !data[0].equals("undetermined")) {
				  										data[0] = data[0].replace("_", " ");
				  										String stateId = StateMap1.get(data[0]);
				  								        obj.setStateId(stateId);

				  										data[0] = capitalizeString(data[0]);
				  										obj.setState(data[0]);
				  										// if(filter == null || filter.isEmpty() ||
				  										// filter.equals("pageviews"))
				  										obj.setCount(data[1]);
				  										// if(filter != null && !filter.isEmpty() &&
				  										// filter.equals("engagementTime") )
				  										// obj.setEngagementTime(data[1]);
				  										// if(filter != null && !filter.isEmpty() &&
				  										// filter.equals("visitorCount") )
				  										// obj.setVisitorCount(data[1]);
				  										String[] channels = channel_name.split("_");
				  										String channel_name1 = channels[0];
				  										channel_name1 = capitalizeString(channel_name1);
				  										obj.setChannelName(channel_name1);
				  										String articleparts[] = articlename.split("/");
				  										String articleTitle = articleparts[articleparts.length - 1];
				  										articleTitle = articleTitle.replace("-", " ");
				  										articleTitle = capitalizeString(articleTitle);
				  										obj.setArticleTitle(articleTitle);
				  										obj.setArticle(articlename);
				  										pubreport.add(obj);
				  									} else {

				  										accumulatedCount = accumulatedCount
				  												+ (int) Double.parseDouble(data[1]);

				  										if (i == (lines.size() - 1)) {
				  											obj.setState("Others");
				  											String[] channels = channel_name.split("_");
				  											String channel_name1 = channels[0];
				  											channel_name1 = capitalizeString(channel_name1);
				  											obj.setChannelName(channel_name1);
				  											String articleparts[] = articlename.split("/");
				  											String articleTitle = articleparts[articleparts.length - 1];
				  											articleTitle = articleTitle.replace("-", " ");
				  											articleTitle = capitalizeString(articleTitle);
				  											obj.setArticleTitle(articleTitle);
				  											obj.setArticle(articlename);
				  											// if(filter == null || filter.isEmpty() ||
				  											// filter.equals("pageviews"))
				  											obj.setCount(accumulatedCount.toString());
				  											// if(filter != null && !filter.isEmpty() &&
				  											// filter.equals("engagementTime") )
				  											// obj.setEngagementTime(accumulatedCount.toString());
				  											// if(filter != null && !filter.isEmpty() &&
				  											// filter.equals("visitorCount") )
				  											// obj.setVisitorCount(accumulatedCount.toString());
				  											pubreport.add(obj);
				  											System.out.println("Others");
				  											System.out.println(accumulatedCount.toString());
				  										}
				  									}
				  								}
				  							}

				  							System.out.println(pubreport.toString());
				  							return pubreport;
				  						}
				  						
				  						
				  						
				  						
				  						public List<PublisherReport> countCityChannelArticlefilter(String startdate,
				  									String enddate, String channel_name, String articlename,
				  									String filter,String queryfilterbuilder) throws CsvExtractorException, Exception {
				  								// Aggregations result =
				  								// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  								// new Object[] { "enhanceduserprofilestore" }));
				  						
				  								String query = "";
				  						
				  								String queryfield = "city";
				  						
				  								if (filter == null || filter.isEmpty() || filter.equals("pageviews"))
				  									query = "Select count(*),"
				  											+ queryfield
				  											+ " from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  											+ articlename + "%' and channel_name = '" + channel_name
				  											+ "' and date between " + "'" + startdate + "'" + " and "
				  											+ "'" + enddate + "'" + " GROUP BY " + queryfield;
				  						
				  								if (filter != null && !filter.isEmpty()
				  										&& filter.equals("engagementTime"))
				  									query = "Select SUM(engagementTime),"
				  											+ queryfield
				  											+ " from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  											+ articlename + "%' and channel_name = '" + channel_name
				  											+ "' and date between " + "'" + startdate + "'" + " and "
				  											+ "'" + enddate + "'" + " GROUP BY " + queryfield;
				  						
				  								if (filter != null && !filter.isEmpty()
				  										&& filter.equals("visitorCount"))
				  									query = "Select "
				  											+ queryfield
				  											+ ",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  											+ articlename + "%' and channel_name = '" + channel_name
				  											+ "' and date between " + "'" + startdate + "'" + " and "
				  											+ "'" + enddate + "' GROUP by " + queryfield + "";
				  						
				  								CSVResult csvResult = getCsvResult(false, query);
				  								List<String> headers = csvResult.getHeaders();
				  								List<String> lines = csvResult.getLines();
				  								System.out.println(headers);
				  								System.out.println(lines);
				  								Integer accumulatedCount = 0;
				  						
				  								List<PublisherReport> pubreport = new ArrayList();
				  								if ((lines != null) && (!lines.isEmpty())
				  										&& (!((String) lines.get(0)).isEmpty())) {
				  									for (int i = 0; i < lines.size(); i++) {
				  										PublisherReport obj = new PublisherReport();
				  						
				  										String[] data = ((String) lines.get(i)).split(",");
				  										if (i<10 && !data[0].equals("undetermined")) {
				  											String locationproperties = citycodeMap.get(data[0]);
				  											data[0] = data[0].replace("_", " ").replace("-", " ");
				  											if(citylatlongMap1.get(data[0])!=null && !citylatlongMap1.get(data[0]).isEmpty())
				  											obj.setCitylatlong(citylatlongMap1.get(data[0]));
				  											obj.setCity(capitalizeString(data[0]));
				  											System.out.println(data[0]);
				  											obj.setLocationcode(locationproperties);
				  											System.out.println(locationproperties);
				  											// if(filter == null || filter.isEmpty() ||
				  											// filter.equals("pageviews"))
				  											obj.setCount(data[1]);
				  											// if(filter != null && !filter.isEmpty() &&
				  											// filter.equals("engagementTime") )
				  											// obj.setEngagementTime(data[1]);
				  											// if(filter != null && !filter.isEmpty() &&
				  											// filter.equals("visitorCount") )
				  											// obj.setVisitorCount(data[1]);
				  											String[] channels = channel_name.split("_");
				  											String channel_name1 = channels[0];
				  											channel_name1 = capitalizeString(channel_name1);
				  											obj.setChannelName(channel_name1);
				  											String articleparts[] = articlename.split("/");
				  											String articleTitle = articleparts[articleparts.length - 1];
				  											articleTitle = articleTitle.replace("-", " ");
				  											articleTitle = capitalizeString(articleTitle);
				  											obj.setArticleTitle(articleTitle);
				  											obj.setArticle(articlename);
				  											pubreport.add(obj);
				  										} else {
				  						
				  											accumulatedCount = accumulatedCount
				  													+ (int) Double.parseDouble(data[1]);
				  						
				  											if (i == (lines.size() - 1)) {
				  												obj.setCity("Others");
				  												String[] channels = channel_name.split("_");
				  												String channel_name1 = channels[0];
				  												channel_name1 = capitalizeString(channel_name1);
				  												obj.setChannelName(channel_name1);
				  												String articleparts[] = articlename.split("/");
				  												String articleTitle = articleparts[articleparts.length - 1];
				  												articleTitle = articleTitle.replace("-", " ");
				  												articleTitle = capitalizeString(articleTitle);
				  												obj.setArticleTitle(articleTitle);
				  												obj.setArticle(articlename);
				  												// if(filter == null || filter.isEmpty() ||
				  												// filter.equals("pageviews"))
				  												obj.setCount(accumulatedCount.toString());
				  												// if(filter != null && !filter.isEmpty() &&
				  												// filter.equals("engagementTime") )
				  												// obj.setEngagementTime(accumulatedCount.toString());
				  												// if(filter != null && !filter.isEmpty() &&
				  												// filter.equals("visitorCount") )
				  												// obj.setVisitorCount(accumulatedCount.toString());
				  												pubreport.add(obj);
				  												System.out.println("Others");
				  												System.out.println(accumulatedCount.toString());
				  											}
				  										}
				  									}
				  								}
				  						
				  								System.out.println(pubreport.toString());
				  								return pubreport;
				  						}
				  						
				  						
				  						
				  						
				  						public List<PublisherReport> countCountryChannelArticlefilter(String startdate,
				  									String enddate, String channel_name, String articlename,
				  									String filter,String queryfilterbuilder) throws CsvExtractorException, Exception {
				  								// Aggregations result =
				  								// query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name",
				  								// new Object[] { "enhanceduserprofilestore" }));
				  								// String query =
				  								// "SELECT COUNT(*)as count,country FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '"
				  								// + channel_name + "' and date between " + "'" + startdate + "'" +
				  								// " and " + "'" + enddate + "'" +
				  								// " group by country order by count desc";
				  						
				  								String query = "";
				  								String queryfield = "country";
				  						
				  								if (filter == null || filter.isEmpty() || filter.equals("pageviews"))
				  									query = "Select count(*),"
				  											+ queryfield
				  											+ " from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  											+ articlename + "%' and channel_name = '" + channel_name
				  											+ "' and date between " + "'" + startdate + "'" + " and "
				  											+ "'" + enddate + "'" + " GROUP BY " + queryfield;
				  						
				  								if (filter != null && !filter.isEmpty()
				  										&& filter.equals("engagementTime"))
				  									query = "Select SUM(engagementTime),"
				  											+ queryfield
				  											+ " from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  											+ articlename + "%' and channel_name = '" + channel_name
				  											+ "' and date between " + "'" + startdate + "'" + " and "
				  											+ "'" + enddate + "'" + " GROUP BY " + queryfield;
				  						
				  								if (filter != null && !filter.isEmpty()
				  										&& filter.equals("visitorCount"))
				  									query = "Select "
				  											+ queryfield
				  											+ ",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  refcurrentoriginal like '%"
				  											+ articlename + "%' and channel_name = '" + channel_name
				  											+ "' and date between " + "'" + startdate + "'" + " and "
				  											+ "'" + enddate + "' GROUP by " + queryfield + "";
				  						
				  								CSVResult csvResult = getCsvResult(false, query);
				  								List<String> headers = csvResult.getHeaders();
				  								List<String> lines = csvResult.getLines();
				  								System.out.println(headers);
				  								System.out.println(lines);
				  								Integer accumulatedCount = 0;
				  						
				  								List<PublisherReport> pubreport = new ArrayList();
				  								if ((lines != null) && (!lines.isEmpty())
				  										&& (!((String) lines.get(0)).isEmpty())) {
				  									for (int i = 0; i < lines.size(); i++) {
				  										PublisherReport obj = new PublisherReport();
				  						
				  										String[] data = ((String) lines.get(i)).split(",");
				  										if (i < 10 && !data[0].equals("undetermined")) {
				  											data[0] = data[0].replace("_", " ");
				  											String countryId = CountryMap1.get(data[0]);
				  									         obj.setCountryId(countryId);
				  											data[0] = capitalizeString(data[0]);
				  											obj.setCountry(data[0]);
				  											// if(filter == null || filter.isEmpty() ||
				  											// filter.equals("pageviews"))
				  											obj.setCount(data[1]);
				  											// if(filter != null && !filter.isEmpty() &&
				  											// filter.equals("engagementTime") )
				  											// obj.setEngagementTime(data[1]);
				  											// if(filter != null && !filter.isEmpty() &&
				  											// filter.equals("visitorCount") )
				  											// obj.setVisitorCount(data[1]);
				  											String[] channels = channel_name.split("_");
				  											String channel_name1 = channels[0];
				  											channel_name1 = capitalizeString(channel_name1);
				  											obj.setChannelName(channel_name1);
				  											String articleparts[] = articlename.split("/");
				  											String articleTitle = articleparts[articleparts.length - 1];
				  											articleTitle = articleTitle.replace("-", " ");
				  											articleTitle = capitalizeString(articleTitle);
				  											obj.setArticleTitle(articleTitle);
				  											obj.setArticle(articlename);
				  											pubreport.add(obj);
				  										} else {
				  						
				  											accumulatedCount = accumulatedCount
				  													+ (int) Double.parseDouble(data[1]);
				  						
				  											if (i == (lines.size() - 1)) {
				  												obj.setCountry("Others");
				  												String[] channels = channel_name.split("_");
				  												String channel_name1 = channels[0];
				  												channel_name1 = capitalizeString(channel_name1);
				  												obj.setChannelName(channel_name1);
				  												String articleparts[] = articlename.split("/");
				  												String articleTitle = articleparts[articleparts.length - 1];
				  												articleTitle = articleTitle.replace("-", " ");
				  												articleTitle = capitalizeString(articleTitle);
				  												obj.setArticleTitle(articleTitle);
				  												obj.setArticle(articlename);
				  												// if(filter == null || filter.isEmpty() ||
				  												// filter.equals("pageviews"))
				  												obj.setCount(accumulatedCount.toString());
				  												// if(filter != null && !filter.isEmpty() &&
				  												// filter.equals("engagementTime") )
				  												// obj.setEngagementTime(accumulatedCount.toString());
				  												// if(filter != null && !filter.isEmpty() &&
				  												// filter.equals("visitorCount") )
				  												// obj.setVisitorCount(accumulatedCount.toString());
				  												pubreport.add(obj);
				  												System.out.println("Others");
				  												System.out.println(accumulatedCount.toString());
				  											}
				  										}
				  									}
				  								}
				  						
				  								System.out.println(pubreport.toString());
				  								return pubreport;
				  							}
		  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  				 
				  					  public List<PublisherReport> countCityChannelSectionfilter(String startdate, String enddate, String channel_name, String sectionname, String filter, String queryfilterbuilder)
				  						    throws CsvExtractorException, Exception
				  						  {
				  						    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  						  //  String query = "SELECT COUNT(*)as count,city FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by city order by count desc";
				  						  

				  							    String query = "";
				  							    String queryfield = "city";
				  							  
				  						        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  						        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  							   
				  						        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  						        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  								   
				  						        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  						        query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";    
				  							  
				  							  
				  							System.out.println(query);
				  						    CSVResult csvResult = getCsvResult(false, query);
				  						    List<String> headers = csvResult.getHeaders();
				  						    List<String> lines = csvResult.getLines();
				  						    System.out.println(headers);
				  						    System.out.println(lines);
				  						    Integer accumulatedCount = 0;
				  						    
				  						    List<PublisherReport> pubreport = new ArrayList();
				  						    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  						      for (int i = 0; i < lines.size(); i++)
				  						      {
				  						        PublisherReport obj = new PublisherReport();
				  						        
				  						        String[] data = ((String)lines.get(i)).split(",");
				  						        if(i<10 && !data[0].equals("undetermined")){
				  						        	String locationproperties = citycodeMap.get(data[0]);
				  							        data[0]=data[0].replace("_"," ").replace("-"," ");
				  							      if(citylatlongMap1.get(data[0])!=null && !citylatlongMap1.get(data[0]).isEmpty())
				  							        obj.setCitylatlong(citylatlongMap1.get(data[0]));
				  							        data[0]=capitalizeString(data[0]);
				  							        obj.setCity(capitalizeString(data[0]));
				  							        System.out.println(data[0]);
				  							        obj.setLocationcode(locationproperties);
				  						     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  									obj.setCount(data[1]);
				  								//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  								//	obj.setEngagementTime(data[1]);
				  								//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  								//	obj.setVisitorCount(data[1]);
				  						        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  						        obj.setSection(sectionname);
				  						        pubreport.add(obj);
				  						        }
				  						        else{
				  							    	   
				  						        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
				  							    	  if(i == (lines.size()-1)){
				  							    		 obj.setCity("Others"); 
				  							    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  							    		 obj.setSection(sectionname);
				  							    	//	 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  												obj.setCount(accumulatedCount.toString());
				  											//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  											//	obj.setEngagementTime(accumulatedCount.toString());
				  											//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  											//	obj.setVisitorCount(accumulatedCount.toString());
				  							    		 pubreport.add(obj);
				  							    	  }
				  							       }
				  						        
				  						      
				  						      
				  						      
				  						      }
				  						    }
				  						    return pubreport;
				  						  }
				  						  
				  						  
				  						  public List<PublisherReport> countStateChannelSectionfilter(String startdate, String enddate, String channel_name, String sectionname, String filter, String queryfilterbuilder)
				  								    throws CsvExtractorException, Exception
				  								  {
				  								    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  								    //String query = "SELECT COUNT(*)as count,state FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by state order by count desc";
				  								    
				  							      

				  							    String query = "";
				  							    String queryfield = "state";
				  							  
				  						        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  						        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  							   
				  						        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  						        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  								   
				  						        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  						        query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				  							  
				  							  
				  							        System.out.println(query);
				  								    CSVResult csvResult = getCsvResult(false, query);
				  								    List<String> headers = csvResult.getHeaders();
				  								    List<String> lines = csvResult.getLines();
				  								    System.out.println(headers);
				  								    System.out.println(lines);
				  								    Integer accumulatedCount = 0;
				  								    
				  								    List<PublisherReport> pubreport = new ArrayList();
				  								    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  								      for (int i = 0; i < lines.size(); i++)
				  								      {
				  								        PublisherReport obj = new PublisherReport();
				  								        
				  								        String[] data = ((String)lines.get(i)).split(",");
				  								        if(i < 10 && !data[0].equals("undetermined")){
				  								        	data[0]=data[0].replace("_", " ");
				  								        	String stateId = StateMap1.get(data[0]);
				  								            obj.setStateId(stateId);

				  								        	data[0] = capitalizeString(data[0]);
				  							            	obj.setState(data[0]);
				  								       // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  											obj.setCount(data[1]);
				  										//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  											//obj.setEngagementTime(data[1]);
				  											//if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  											//obj.setVisitorCount(data[1]);
				  								        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  								        obj.setSection(sectionname);
				  								        pubreport.add(obj);
				  								        }
				  								        else{
				  									    	   
				  								        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
				  									    	  if(i == (lines.size()-1)){
				  									    		 obj.setState("Others"); 
				  									    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  									    		 obj.setSection(sectionname);
				  									    //		 if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  														obj.setCount(accumulatedCount.toString());
				  												//		if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  												//		obj.setEngagementTime(accumulatedCount.toString());
				  													//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  													//	obj.setVisitorCount(accumulatedCount.toString());
				  									    		 pubreport.add(obj);
				  									    	  }
				  									       }
				  								        
				  								      
				  								      
				  								      
				  								      }
				  								    }
				  								    return pubreport;
				  								  }
				  						  
				  						  public List<PublisherReport> countCountryChannelSectionfilter(String startdate, String enddate, String channel_name, String sectionname, String filter, String queryfilterbuilder)
				  								    throws CsvExtractorException, Exception
				  								  {
				  								    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
				  								//    String query = "SELECT COUNT(*)as count,country FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by country order by count desc";
				  								    

				  							    String query = "";
				  							    String queryfield = "country";
				  							  
				  						        if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  						        query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  							   
				  						        if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  						        query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  								   
				  						        if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  						        query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where " + queryfilterbuilder + "  and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+"";  
				  							  
				  							  
				  							        System.out.println(query);
				  								    CSVResult csvResult = getCsvResult(false, query);
				  								    List<String> headers = csvResult.getHeaders();
				  								    List<String> lines = csvResult.getLines();
				  								    System.out.println(headers);
				  								    System.out.println(lines);
				  								    Integer accumulatedCount = 0;
				  								    
				  								    List<PublisherReport> pubreport = new ArrayList();
				  								    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				  								      for (int i = 0; i < lines.size(); i++)
				  								      {
				  								        PublisherReport obj = new PublisherReport();
				  								        
				  								        String[] data = ((String)lines.get(i)).split(",");
				  								        if(i < 10 && !data[0].equals("undetermined")){
				  								        	data[0]=data[0].replace("_", " ");
				  								        	String countryId = CountryMap1.get(data[0]);
				  								            obj.setCountryId(countryId);
				  								        	data[0] = capitalizeString(data[0]);
				  							            	obj.setCountry(data[0]);
				  								  //      if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  											obj.setCount(data[1]);
				  										//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  										//	obj.setEngagementTime(data[1]);
				  										//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  										//	obj.setVisitorCount(data[1]);
				  								        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  								        obj.setSection(sectionname);
				  								        pubreport.add(obj);
				  								        }
				  								        else{
				  									    	   
				  								        	 accumulatedCount = accumulatedCount + (int)Double.parseDouble(data[1]); 
				  									    	  if(i == (lines.size()-1)){
				  									    		 obj.setCountry("Others"); 
				  									    		 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  									    		 obj.setSection(sectionname);
				  									    		// if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  														obj.setCount(accumulatedCount.toString());
				  													//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  													//	obj.setEngagementTime(accumulatedCount.toString());
				  													//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  													//	obj.setVisitorCount(accumulatedCount.toString());
				  									    		 pubreport.add(obj);
				  									    	  }
				  									       }
				  								        
				  								      
				  								      
				  								      
				  								      }
				  								    }
				  								    return pubreport;
				  								  }
				  						  		  				 
				  				 
				  						public List<PublisherReport> getQueryFieldChannelArticleFilterGroupBy(String queryfield,String startdate, String enddate, String channel_name, String articlename, List<String> groupby, String filter, Map<String,String>filter1)
				  							    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  							  {
				  							    
				  						   

				  						  
				  						  
				  						  
				  							if (queryfield.equals("Author")) {
				  					          queryfield =  "authorName";
				  						} 

				  							  
				  							if (queryfield.equals("reforiginal")) {
				  					          queryfield =  "sourceUrl";
				  						}   
				  						  
				  						  
				  						  String querygroupbybuilder = convert(groupby);
				  					    List<PublisherReport> pubreport = new ArrayList();
				  					    String query = "";
				  					    int size = filter1.size();
				  					    String queryfilterbuilder = "";
				  					    String formattedString = "";
				  					   
				  					    int l =0;
				  					    for (Map.Entry<String, String> entry : filter1.entrySet())
				  					    {
				  					    	if (l==0){
				  					            formattedString = addCommaString(entry.getValue());
				  					    		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
				  					    	
				  					    	}
				  					        else{
				  					        formattedString = addCommaString(entry.getValue());	
				  					        queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
				  					   
				  					        }
				  					        l++;
				  					     
				  					    }
				  					   
				  					    /*
				  					    if(queryfilterbuilder.contains("referrerType")){
				  					    	
				  					    	
				  					        queryfilterbuilder = "device in ('mobile')";
				  					    	
				  					    	if(queryfield.equals("referrerType"))
				  					    	{
				  					    		
				  					    		queryfield="device";
				  					    	}
				  					    
				  					    }
				  					    */
				  					   
				  					    l=0;
				  					    
				  					    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	 	query = "Select count(*),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
				  					  	    
				  					  	    
				  					  	    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime"))
				  					  	     	query = "Select SUM(engagementTime),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
				  					  	        
				  					  	    
				  					  	    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount"))
				  					  	     	query = "Select "+queryfield+","+querygroupbybuilder+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+","+querygroupbybuilder+"";  
				  					  	        

				  					  	    if(querygroupbybuilder.equals("hour")){
				  					  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				  					  	   
				  					  	    	
				  					  	    }
				  					  	  
				  					  	    if(querygroupbybuilder.equals("minute")){
				  					  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	     	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second")){
				  					  	   // 	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    //	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("hour")){
				  					  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				  					  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				  					  	   
				  					  	    	
				  					  	    }
				  					  	  
				  					  	    if(querygroupbybuilder.equals("minute")){
				  					  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				  					  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second")){
				  					  	  //  	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				  					  	  //  	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	   
				  					  	    if(querygroupbybuilder.equals("hour")){
				  					  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				  					  	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				  					  	   
				  					  	    	
				  					  	    }
				  					  	  
				  					  	    if(querygroupbybuilder.equals("minute")){
				  					  	   	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				  					  	   	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				  					  	    	   
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second")){
				  					  	    //	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				  					  	    //	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				  					  	    	   
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    
				  					  	    
				  					  	    
				  					  	    
				  					  	    
				  					  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
				  					  	    {
				  					  	    	
				  					  	    	query = "Select count(*) from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					  	    }
				  					  	    
				  					  	    	
				  					  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("totalViews"))
				  					  	    {
				  					  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    	query = "Select count(*) from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				  					  	    }
				  					  	    	
				  					  	    if(querygroupbybuilder.equals("second") && queryfield.equals("totalViews"))
				  					  	    {
				  					  	    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    //	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				  					  	    }
				  					  	    
				  					  	    	
				  					  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
				  					  	    {
				  					  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
				  					  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					  	    	
				  					  	    }
				  					  	 		    
				  					  			    	
				  					  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("uniqueVisitors"))
				  					  	    {
				  					  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
				  					  			      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				  					  	    	
				  					  	    }
				  					  	    	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second") && queryfield.equals("uniqueVisitors"))
				  					  	    {
				  					  	    //	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
				  					  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				  					  	    	
				  					  	    }
				  					  	    
				  					  	    
				  					  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("engagementTime") )
				  					  	    {
				  					  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
				  					  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					  	    	
				  					  	    }
				  					  	 		    
				  					  			    	
				  					  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("engagementTime") )
				  					  	    {
				  					  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
				  					  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				  					  	    	
				  					  	    }
				  					  	    	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second") && queryfield.equals("engagementTime") )
				  					  	    {
				  					  	    //	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where channel_name = '" + 
				  					  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				  					  	    	
				  					  	    }
				  							    	
				  							    
				  					  	    if(queryfield.equals("visitorType")){
				  					  			
				  					  	        List<PublisherReport> pubreport1  = new ArrayList<PublisherReport>();
				  					  	        List<PublisherReport> pubreport2  = new ArrayList<PublisherReport>();
				  					  	        List<PublisherReport> pubreport3  = new ArrayList<PublisherReport>();
				  					  	        
				  					  		   
				  					  	    	AggregationModule module =  AggregationModule.getInstance();
				  					  	    	    try {
				  					  	    			module.setUp();
				  					  	    		} catch (Exception e1) {
				  					  	    			// TODO Auto-generated catch block
				  					  	    			e1.printStackTrace();
				  					  	    		}
				  					  			
				  					  	    	pubreport1=module.countNewUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder);
				  					  			
				  					  	    
				  					  			pubreport2=module.countReturningUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder); 
				  					  			
				  					  	   
				  					  	 		pubreport3=module.countLoyalUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				  					  	 		
				  					  	  
				  					  	        pubreport1.addAll(pubreport2);
				  					  	        pubreport1.addAll(pubreport3);
				  					  	   
				  					  	        
				  					  	       for(int i=0;i<pubreport1.size();i++){    
				  						          	  
				  						          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
				  						          pubreport1.get(i).setCount(numberFormat.format(count)); 
				  						       
				  					       } 
				  					  	   
				  					  	        return pubreport1;
				  					  	   }
				  							    
				  							    
				  							    if(queryfield.equals("newVisitors")){
				  						    		
				  							    	 AggregationModule module =  AggregationModule.getInstance();
				  							    	    try {
				  							    			module.setUp();
				  							    		} catch (Exception e1) {
				  							    			// TODO Auto-generated catch block
				  							    			e1.printStackTrace();
				  							    		}
				  									pubreport=module.countNewUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder);
				  							    	return pubreport;
				  						    	}
				  						       

				  						    	if(queryfield.equals("returningVisitors")){
				  						    		
				  						    		 AggregationModule module =  AggregationModule.getInstance();
				  							    	    try {
				  							    			module.setUp();
				  							    		} catch (Exception e1) {
				  							    			// TODO Auto-generated catch block
				  							    			e1.printStackTrace();
				  							    		}
				  									pubreport=module.countReturningUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				  									return pubreport;
				  						    	
				  						    	
				  						    	}
				  						    
				  						    

				  						    	if(queryfield.equals("LoyalVisitors")){
				  						    		
				  						    		 AggregationModule module =  AggregationModule.getInstance();
				  							    	    try {
				  							    			module.setUp();
				  							    		} catch (Exception e1) {
				  							    			// TODO Auto-generated catch block
				  							    			e1.printStackTrace();
				  							    		}
				  									pubreport=module.countLoyalUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				  									return pubreport;
				  						    		
				  						    	}	
				  							    	
				  							   /* 
				  						    	if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
				  							    {
				  							    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  							    }
				  							    
				  						     	
				  							    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
				  							    {
				  							    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
				  										      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  							    	
				  							    }
				  							    */
				  						    	
				  						    	
				  						    	
				  							   
				  							    
				  							//    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  								    //lines = processList1(lines);
				  							    
				  							    //System.out.println(headers);
				  							    //System.out.println(lines);
				  							 
				  							    if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
				  							    
				  							    
				  							    	 List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
				  							    	  
				  							       	 
				  									    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				  								        
				  								        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  								    
				  								        List<String> Query = new ArrayList();
				  								     
				  								        queryfield = "audience_segment,subcategory";
				  								       
				  										String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  										    
				  										String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  											
				  									    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+queryfield;
				  								       
				  									    
				  									    Query.add(query1);
				  								        Query.add(query2);
				  									    Query.add(query3);
				  									    Query.add("externalWorldQueryfilter@"+startdate+"@"+enddate+"@"+channel_name+"@"+queryfilterbuilder);
				  								       
				  								       for(int j=0 ; j < Query.size(); j++ ){
				  								       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
				  								    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				  								       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				  								       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				  								       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				  								        
				  								       // returns a list of Futures holding their status and results when all complete
				  								    
				  								   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				  								       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				  								       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				  								       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				  								       }
				  								       
				  								       
				  								       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				  									

				  									    for (int k = 0; k < maps.size(); k++)
				  									    {
				  									    
				  									    	if(maps!=null && maps.get(k)!=null){
				  									        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				  									        pubreport1.addAll(map);
				  									    	}
				  									
				  							   }
				  								
				  									    executorService.shutdown();
				  									    
				  									    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				  									    
				  									    List<PublisherReport> object = new ArrayList<PublisherReport>();
				  									    
				  									    
				  									    for(int k=0; k< pubreport1.size(); k++)
				  									    {
				  								         try{ 
				  									    	String audiencesegment = pubreport1.get(k).getAudience_segment();
				  									    	
				  									    	String subcategory = pubreport1.get(k).getSubcategory();
				  									    	
				  									    	  String count =  pubreport1.get(k).getCount();
				  								        		
				  										        String engagementTime =  pubreport1.get(k).getEngagementTime();		
				  										        
				  										        String visitorCount = pubreport1.get(k).getVisitorCount();
				  									    	
				  										        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
				  										        
				  									    	    String key = audiencesegment+"@"+subcategory;
				  										        
				  										        
				  										        if(aggregatedmap.containsKey(key))
				  								        {
				  								       
				  								        PublisherReport obj = aggregatedmap.get(key);
				  								        obj.setAudience_segment(audiencesegment);
				  								        obj.setSubcategory(subcategory);
				  								      
				  								        
				  								        if(count!=null)
				  								        obj.setCount(count);
				  								        	
				  								        if(engagementTime!=null) 	
				  								        	obj.setEngagementTime(engagementTime);
				  								        	
				  								       if(visitorCount!=null) 	
				  								        	obj.setVisitorCount(visitorCount);
				  								        
				  								       if(externalWorldCount!=null)
				  								    	   obj.setExternalWorldCount(externalWorldCount);
				  								       else
				  								    	   obj.setExternalWorldCount("0");
				  								       
				  								       
				  								       
				  								       if(key !=null) {	
				  								    	obj.setAudience_segment(audiencesegment);
				  									        obj.setSubcategory(subcategory);
				  								       }
				  								       
				  								       
				  									    aggregatedmap.put(key, obj);
				  									    
				  								        }
				  								        else{
				  								        	       
				  								        	        PublisherReport obj = new PublisherReport();
				  								        	     
				  								        	        if(count !=null)
				  								        	        obj.setCount(count);
				  								        	        	
				  								        	        if(engagementTime !=null) 	
				  								        	        obj.setEngagementTime(engagementTime);
				  								        	        	
				  								        	       if(visitorCount !=null) 	
				  								        	        obj.setVisitorCount(visitorCount);
				  								        	
				  								        	       
				  								        	       if(externalWorldCount!=null)
				  											    	   obj.setExternalWorldCount(externalWorldCount);
				  								        	       else
				  								        	    	   obj.setExternalWorldCount("0");
				  								        	       
				  								        	       if(key!=null) {	
				  								        	    	obj.setAudience_segment(audiencesegment);
				  								   			        obj.setSubcategory(subcategory);
				  								        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  								        	      
				  								        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  								 		        	
				  								        	       
				  								        	       
				  								        	       }
				  								        	       aggregatedmap.put(key, obj);
				  								        
				  								        
				  								        }
				  								         }
				  								         catch(Exception e){
				  								        	 continue;
				  								         }
				  								      
				  									    }
				  									    
				  									     
				  									    
				  									    List<String> headers1 = new ArrayList<String>();
				  									    headers1.add("audience_segment");
				  									    headers1.add("subcategory");
				  									    headers1.add("count(*)");
				  									    headers1.add("SUM(engagementTime)");
				  									    headers1.add("COUNT(DISTINCT(cookiehash))");
				  									    headers1.add("ExternalWorldCount");
				  									    List<String> lines1= new ArrayList<String>();	
				  									    
				  									    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				  									    
				  									    	
				  									    	try{
				  									    	String key = entry.getKey();
				  									        PublisherReport obj = entry.getValue();
				  									        String [] parts1= key.split("@");
				  									        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
				  									      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  								        	lines1.add(line);
				  									        
				  									        
				  									       
				  									      }
				  									      catch(Exception e){
				  									    	  continue;
				  									      }
				  									    
				  									   
				  									    
				  									    
				  									    
				  									    
				  									    
				  									    
				  									    
				  									    }
				  									    
				  									    

				  									    List<List<String>> data = new ArrayList<List<String>>();
				  									    for (int i = 0; i < lines1.size(); i++) {
				  								            List<String> objects = new ArrayList<String>();
				  								            String [] parts = lines1.get(i).split(",");
				  								            for(int j =0; j< parts.length; j++)
				  								              objects.add(parts[j]);
				  								           
				  								            data.add(objects);
				  								        }
				  									    
				  									    
				  									    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
				  									    
				  									     queryfield = "audience_segment";
				  									//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
				  									 //   String s = json.toString();
				  									    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
				  									 //   System.out.println(nestedJson);
				  									    return pubreport;
				  									    
				  							    
				  							    }
				  							    
				  							    
				  							    System.out.println(query);
				  							    CSVResult csvResult = getCsvResult(false, query);
				  							   
				  							    
				  							    List<String> headers = csvResult.getHeaders();
				  							    List<String> lines = csvResult.getLines();
				  							    
				  							    
				  							    
				  							    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				  							    {
				  							      for (int i = 0; i < lines.size(); i++)
				  							      {
				  							       
				  							    	 try{ 
				  							    	  PublisherReport obj = new PublisherReport();
				  							        
				  							        String[] data = ((String)lines.get(i)).split(",");
				  							     //   String demographicproperties = demographicmap.get(data[0]);
				  							        
				  							            if(queryfield.equals("gender")){
				  							        	
				  							            	String genderId = GenderMap1.get(data[0]);
				  							        		obj.setGenderId(genderId);
				  							            	
				  							            	obj.setGender(capitalizeString(data[0]));
				  							            }
				  							            if(queryfield.equals("device")){
				  							        	
				  							            	String deviceId = deviceMap1.get(data[0]);
				  							        		obj.setDeviceId(deviceId);
				  							            	
				  							            	obj.setDevice_type(capitalizeString(data[0]));
				  							            }
				  							            if(queryfield.equals("state"))
				  						            	{
				  						            	
				  						            	data[0]=data[0].replace("_", " ");
				  						            	data[0] = capitalizeString(data[0]);
				  						            	obj.setState(data[0]);
				  						            	}
				  						            
				  						            
				  						            if(queryfield.equals("country"))
				  						        	  {
				  						        	
				  						            	data[0]=data[0].replace("_", " ");
				  						            	data[0] = capitalizeString(data[0]);
				  						            	obj.setCountry(data[0]);
				  						             	}
				  						        
				  							            
				  							            
				  							            
				  							            if(queryfield.equals("city")){
				  							        		try{
				  							        		String locationproperties = citycodeMap.get(data[0]);
				  									        data[0]=data[0].replace("_"," ").replace("-"," ");
				  									        data[0] = capitalizeString(data[0]);
				  									        obj.setCity(capitalizeString(data[0]));
				  									        System.out.println(data[0]);
				  									        obj.setLocationcode(locationproperties);
				  							        		}
				  							        		catch(Exception e){
				  							        			
				  							        			continue;
				  							        		}
				  							        		
				  							        		}
				  							        	if(queryfield.equals("audience_segment"))
				  							             {
				  							        		String audienceSegment = audienceSegmentMap.get(data[0]);
				  							        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
				  							        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				  							        		obj.setAudience_segment(audienceSegment);
				  							        		obj.setAudienceSegmentCode(audienceSegmentCode);
				  							        		}
				  							        		else
				  							        	    obj.setAudience_segment(data[0]);
				  							             }
				  							        	
				  							        	if(queryfield.equals("sourceUrl")){
				  								         
				  							        		
				  							        		String urlId = UrlMap1.get(data[0]);
				  							        		obj.setUrlId(urlId);
				  							        		
				  							        		obj.setReferrerMasterDomain(data[0]);
				  							        	}
				  							        	if(queryfield.equals("agegroup"))
				  							        	{
				  							        		String ageId = AgeMap1.get(data[0]);
				  							        		obj.setAgeId(ageId);
				  							        		
				  							        		 data[0]=data[0].replace("_","-");
				  							        		 data[0]=data[0]+ " Years";
				  							        		 if(data[0].contains("medium")==false)
				  							        		 obj.setAge(data[0]);
				  							        	}
				  							            	
				  							            	
				  							        			        		        	
				  							        	if(queryfield.equals("incomelevel")){
				  							        		String incomelevelId = IncomeMap1.get(data[0]);
				  							        		obj.setIncomeId(incomelevelId);
				  							        		obj.setIncomelevel(capitalizeString(data[0]));
				  							        	}
				  							        	
				  							        	if(queryfield.equals("system_os")){
				  							        		String osproperties = oscodeMap.get(data[0]);
				  									        data[0]=data[0].replace("_"," ").replace("-", " ");
				  									        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				  									        String [] osParts = oscodeMap1.get(osproperties).split(",");
				  									        obj.setOs(osParts[0]);
				  									        obj.setOSversion(osParts[1]);
				  									        obj.setOscode(osproperties);
				  							        	}
				  							         	
				  							        	if(queryfield.equals("modelName")){
				  								          obj.setMobile_device_model_name(data[0]);
				  								          String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
				  								        	
				  									        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				  									        System.out.println(mobiledeviceproperties[2]);
				  									        obj.setDevicecode(mobiledeviceproperties[0]);
				  									        System.out.println(mobiledeviceproperties[0]);
				  							        	}
				  							        	
				  							        	
				  							        	if(queryfield.equals("brandName")){
				  							        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				  							        		obj.setBrandname(data[0]);
				  							        	}
				  							        	

				  							        	if(queryfield.equals("refcurrentoriginal"))
				  							  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
				  							        	
				  							        	
				  							        	
				  							        	//   obj.setCode(code);
				  						            for(int k = 0; k < groupby.size(); k++)
				  						            {
				  						            	
				  						            	if(groupby.get(k).equals(queryfield)==false)
				  						            	{
				  						                try{
				  						            	if(groupby.get(k).equals("device")){
				  						            	
				  						            		String deviceId = deviceMap1.get(data[k+1]);
				  						            		obj.setDeviceId(deviceId);
				  						            		obj.setDevice_type(capitalizeString(data[k+1]));
				  						            	} 	
				  						            	 if(groupby.get(k).equals("state"))
				  						             	{
				  						             	
				  						             	data[k+1]=data[k+1].replace("_", " ");
				  						             	data[k+1] = capitalizeString(data[k+1]);
				  						             	obj.setState(data[k+1]);
				  						             	}
				  						             
				  						             
				  						             if(groupby.get(k).equals("country"))
				  						         	  {
				  						         	
				  						             	data[k+1]=data[k+1].replace("_", " ");
				  						             	data[k+1] = capitalizeString(data[k+1]);
				  						             	obj.setCountry(data[k+1]);
				  						              	}
				  						            	
				  						            	
				  						            	
				  						            	if(groupby.get(k).equals("city")){
				  						            		try{
				  						            		String locationproperties = citycodeMap.get(data[k+1]);
				  						    		        data[k+1]=data[k+1].replace("_"," ").replace("-"," ");
				  						    		        data[k+1]=capitalizeString(data[k+1]);
				  						    		        obj.setCity(data[k+1]);
				  						    		        System.out.println(data[k+1]);
				  						    		        obj.setLocationcode(locationproperties);
				  						            		}
				  						            		catch(Exception e)
				  						            		{
				  						            			continue;
				  						            		}
				  						            	}
				  						            	if(groupby.get(k).equals("audience_segment"))
				  							             {
				  						            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
				  						            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
				  						            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				  						            		obj.setAudience_segment(audienceSegment);
				  						            		obj.setAudienceSegmentCode(audienceSegmentCode);
				  						            		}
				  						            		else
				  						            	    obj.setAudience_segment(data[k+1]);
				  						            		
				  							             }
				  						            	
				  						            	
				  						            	if(groupby.get(k).equals("gender")){
				  								         
				  						            		String genderId = GenderMap1.get(data[k+1]);
				  						            		obj.setGenderId(genderId);
				  						            		obj.setGender(capitalizeString(data[k+1]));
				  						            	}
				  						            	if(groupby.get(k).equals("hour"))
				  								             obj.setDate(data[k+1]);
				  						            	
				  						            	if(groupby.get(k).equals("minute"))
				  								             obj.setDate(data[k+1]);
				  						            	
				  						            	
				  						            	//if(groupby.get(k).equals("gender"))
				  								           //  obj.setGender(capitalizeString(data[k+1]));
				  						            	
				  						            	
				  						            	if(groupby.get(k).equals("refcurrentoriginal"))
				  								             obj.setGender(capitalizeString(data[k+1]));
				  							            	
				  						            	if(groupby.get(k).equals("date"))
				  								             obj.setDate(data[k+1]);
				  							            		            	
				  						            	if(groupby.get(k).equals("subcategory"))
				  								             {
				  						            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
				  						            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
				  						            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				  						            		obj.setSubcategory(audienceSegment);
				  						            		obj.setSubcategorycode(audienceSegmentCode);
				  						            		}
				  						            		else
				  						            	    obj.setSubcategory(data[k+1]);
				  								             }
				  						            	
				  						            	if(groupby.get(k).equals("agegroup"))
				  						            	{
				  						            		String ageId = AgeMap1.get(data[k+1]);
				  						            		obj.setAgeId(ageId); 
				  						            		
				  						            		data[k+1]=data[k+1].replace("_","-");
				  							        		 data[k+1]=data[k+1]+ " Years";
				  							        		 if(data[k+1].contains("medium")==false)
				  							        		 obj.setAge(data[k+1]);
				  							        	}
				  							            	
				  							            	
				  						            	if(groupby.get(k).equals("incomelevel")){
				  						            		String incomelevelId = IncomeMap1.get(data[k+1]);
				  						            		obj.setIncomeId(incomelevelId);
				  						            		obj.setIncomelevel(capitalizeString(data[k+1]));
				  						            	}
				  					                l++;
				  						                }
				  						                catch(Exception e){
				  						                	continue;
				  						                }
				  						                
				  						                }
				  						            }
				  						           
				  						            
				  						            	            
				  						            if(l!=0){
				  						            	 //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  							            	obj.setCount(data[l+1]);
				  							             
				  								          //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  							             //   obj.setVisitorCount(data[l+1]);
				  							         

				  								         //  if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime") )
				  							             //   obj.setEngagementTime(data[l+1]);
				  							         
				  						            
				  						            
				  						            }       
				  								    String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  							        pubreport.add(obj);
				  							        l=0;
				  							    	 }
				  							    	 catch(Exception e){
				  							    		 continue;
				  							    	 }
				  							    	 
				  							    	 }
				  							      //System.out.println(headers);
				  							      //System.out.println(lines);
				  							    }
				  							    
				  							    
				  							    for(int i=0;i<pubreport.size();i++){    
				  						          	  
				  							          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				  							          pubreport.get(i).setCount(count.toString()); 
				  							       
				  					         }     
				  							    
				  							    
				  							    return pubreport;
				  							  }			  				 
				  				 
				  				 
				  				 
				  						public List<PublisherReport> getQueryFieldChannelSectionFilterGroupBy(String queryfield,String startdate, String enddate, String channel_name, String sectionname, List<String> groupby, String filter, Map<String,String>filter1)
				  							    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  							  {
				  							    
				  						   

				  						  
				  						  
				  						  
				  							if (queryfield.equals("Author")) {
				  					          queryfield =  "authorName";
				  						} 

				  							  
				  							if (queryfield.equals("reforiginal")) {
				  					          queryfield =  "sourceUrl";
				  						}   
				  						  
				  						  
				  						  String querygroupbybuilder = convert(groupby);
				  					    List<PublisherReport> pubreport = new ArrayList();
				  					    String query = "";
				  					    int size = filter1.size();
				  					    String queryfilterbuilder = "";
				  					    String formattedString = "";
				  					   
				  					    int l =0;
				  					    for (Map.Entry<String, String> entry : filter1.entrySet())
				  					    {
				  					    	if (l==0){
				  					            formattedString = addCommaString(entry.getValue());
				  					    		queryfilterbuilder = queryfilterbuilder+ entry.getKey() + " in " + "("+formattedString+")";
				  					    	
				  					    	}
				  					        else{
				  					        formattedString = addCommaString(entry.getValue());	
				  					        queryfilterbuilder = queryfilterbuilder+ " and "+ entry.getKey() + " in " + "("+formattedString+")";
				  					   
				  					        }
				  					        l++;
				  					     
				  					    }
				  					   
				  					    /*
				  					    if(queryfilterbuilder.contains("referrerType")){
				  					    	
				  					    	
				  					        queryfilterbuilder = "device in ('mobile')";
				  					    	
				  					    	if(queryfield.equals("referrerType"))
				  					    	{
				  					    		
				  					    		queryfield="device";
				  					    	}
				  					    
				  					    }
				  					    */
				  					   
				  					    l=0;
				  					    
				  					    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	 	query = "Select count(*),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
				  					  	    
				  					  	    
				  					  	    if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime"))
				  					  	     	query = "Select SUM(engagementTime),"+queryfield+","+querygroupbybuilder+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+querygroupbybuilder;
				  					  	        
				  					  	    
				  					  	    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount"))
				  					  	     	query = "Select "+queryfield+","+querygroupbybuilder+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+ queryfield+","+querygroupbybuilder+"";  
				  					  	        

				  					  	    if(querygroupbybuilder.equals("hour")){
				  					  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				  					  	   
				  					  	    	
				  					  	    }
				  					  	  
				  					  	    if(querygroupbybuilder.equals("minute")){
				  					  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	     	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second")){
				  					  	   // 	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    //	query = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("hour")){
				  					  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				  					  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				  					  	   
				  					  	    	
				  					  	    }
				  					  	  
				  					  	    if(querygroupbybuilder.equals("minute")){
				  					  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				  					  	    	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second")){
				  					  	  //  	if(filter != null && !filter.isEmpty() &&  filter.equals("engagementTime"))
				  					  	  //  	query = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	   
				  					  	    if(querygroupbybuilder.equals("hour")){
				  					  	    	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				  					  	    	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1h')";
				  					  	   
				  					  	    	
				  					  	    }
				  					  	  
				  					  	    if(querygroupbybuilder.equals("minute")){
				  					  	   	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				  					  	   	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1m')";
				  					  	    	   
				  					  	    } 	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second")){
				  					  	    //	if(filter != null && !filter.isEmpty() &&  filter.equals("visitorCount"))
				  					  	    //	query = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield+","+"date_histogram(field='request_time','interval'='1s')";
				  					  	    	   
				  					  	   		    
				  					  	    } 	
				  					  	    
				  					  	    
				  					  	    
				  					  	    
				  					  	    
				  					  	    
				  					  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
				  					  	    {
				  					  	    	
				  					  	    	query = "Select count(*) from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					  	    }
				  					  	    
				  					  	    	
				  					  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("totalViews"))
				  					  	    {
				  					  	    	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    	query = "Select count(*) from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				  					  	    }
				  					  	    	
				  					  	    if(querygroupbybuilder.equals("second") && queryfield.equals("totalViews"))
				  					  	    {
				  					  	    //	if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  					  	    //	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				  					  	    }
				  					  	    
				  					  	    	
				  					  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
				  					  	    {
				  					  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + 
				  					  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					  	    	
				  					  	    }
				  					  	 		    
				  					  			    	
				  					  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("uniqueVisitors"))
				  					  	    {
				  					  	    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + 
				  					  			      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				  					  	    	
				  					  	    }
				  					  	    	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second") && queryfield.equals("uniqueVisitors"))
				  					  	    {
				  					  	    //	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
				  					  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				  					  	    	
				  					  	    }
				  					  	    
				  					  	    
				  					  	    if(querygroupbybuilder.equals("hour") && queryfield.equals("engagementTime") )
				  					  	    {
				  					  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + 
				  					  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  					  	    	
				  					  	    }
				  					  	 		    
				  					  			    	
				  					  	    if(querygroupbybuilder.equals("minute") && queryfield.equals("engagementTime") )
				  					  	    {
				  					  	    	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + 
				  					  				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1m')";
				  					  	    	
				  					  	    }
				  					  	    	
				  					  	    
				  					  	    if(querygroupbybuilder.equals("second") && queryfield.equals("engagementTime") )
				  					  	    {
				  					  	    //	query = "SELECT SUM(engagementTime) FROM enhanceduserdatabeta1 where channel_name = '" + 
				  					  			//	      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1s')";
				  					  	    	
				  					  	    }
				  							    	
				  							    
				  					  	    if(queryfield.equals("visitorType")){
				  					  			
				  					  	        List<PublisherReport> pubreport1  = new ArrayList<PublisherReport>();
				  					  	        List<PublisherReport> pubreport2  = new ArrayList<PublisherReport>();
				  					  	        List<PublisherReport> pubreport3  = new ArrayList<PublisherReport>();
				  					  	        
				  					  		   
				  					  	    	AggregationModule module =  AggregationModule.getInstance();
				  					  	    	    try {
				  					  	    			module.setUp();
				  					  	    		} catch (Exception e1) {
				  					  	    			// TODO Auto-generated catch block
				  					  	    			e1.printStackTrace();
				  					  	    		}
				  					  			
				  					  	    	pubreport1=module.countNewUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder);
				  					  			
				  					  	    
				  					  			pubreport2=module.countReturningUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder); 
				  					  			
				  					  	   
				  					  	 		pubreport3=module.countLoyalUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				  					  	 		
				  					  	  
				  					  	        pubreport1.addAll(pubreport2);
				  					  	        pubreport1.addAll(pubreport3);
				  					  	   
				  					  	        
				  					  	       for(int i=0;i<pubreport1.size();i++){    
				  						          	  
				  						          Integer count = (int) (Double.parseDouble(pubreport1.get(i).getCount()));
				  						          pubreport1.get(i).setCount(numberFormat.format(count)); 
				  						       
				  					       } 
				  					  	   
				  					  	        return pubreport1;
				  					  	   }
				  							    
				  							    
				  							    if(queryfield.equals("newVisitors")){
				  						    		
				  							    	 AggregationModule module =  AggregationModule.getInstance();
				  							    	    try {
				  							    			module.setUp();
				  							    		} catch (Exception e1) {
				  							    			// TODO Auto-generated catch block
				  							    			e1.printStackTrace();
				  							    		}
				  									pubreport=module.countNewUsersChannelDatewisegroupby(startdate, enddate, channel_name, querygroupbybuilder);
				  							    	return pubreport;
				  						    	}
				  						       

				  						    	if(queryfield.equals("returningVisitors")){
				  						    		
				  						    		 AggregationModule module =  AggregationModule.getInstance();
				  							    	    try {
				  							    			module.setUp();
				  							    		} catch (Exception e1) {
				  							    			// TODO Auto-generated catch block
				  							    			e1.printStackTrace();
				  							    		}
				  									pubreport=module.countReturningUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				  									return pubreport;
				  						    	
				  						    	
				  						    	}
				  						    
				  						    

				  						    	if(queryfield.equals("LoyalVisitors")){
				  						    		
				  						    		 AggregationModule module =  AggregationModule.getInstance();
				  							    	    try {
				  							    			module.setUp();
				  							    		} catch (Exception e1) {
				  							    			// TODO Auto-generated catch block
				  							    			e1.printStackTrace();
				  							    		}
				  									pubreport=module.countLoyalUsersChannelDatewisegroupby(startdate, enddate, channel_name,  querygroupbybuilder);
				  									return pubreport;
				  						    		
				  						    	}	
				  							    	
				  							   /* 
				  						    	if(querygroupbybuilder.equals("hour") && queryfield.equals("totalViews"))
				  							    {
				  							    	query = "Select count(*) from enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  							    }
				  							    
				  						     	
				  							    if(querygroupbybuilder.equals("hour") && queryfield.equals("uniqueVisitors"))
				  							    {
				  							    	query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where channel_name = '" + 
				  										      channel_name + "' and request_time between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY date_histogram(field='request_time','interval'='1h')";
				  							    	
				  							    }
				  							    */
				  						    	
				  						    	
				  						    	
				  							   
				  							    
				  							//    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  								    //lines = processList1(lines);
				  							    
				  							    //System.out.println(headers);
				  							    //System.out.println(lines);
				  							 
				  							    if(queryfield.equals("audience_segment") && groupby.get(0).equals("subcategory")== true){
				  							    
				  							    
				  							    	 List<PublisherReport> pubreport1 = new ArrayList<PublisherReport>();
				  							    	  
				  							       	 
				  									    ExecutorService executorService = Executors.newFixedThreadPool(2000);
				  								        
				  								        List<Callable<List<PublisherReport>>> lst = new ArrayList<Callable<List<PublisherReport>>>();
				  								    
				  								        List<String> Query = new ArrayList();
				  								     
				  								        queryfield = "audience_segment,subcategory";
				  								       
				  										String	query1 = "Select count(*),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  										    
				  										String  query2  = "Select SUM(engagementTime),"+queryfield+" from enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY "+queryfield;
				  											
				  									    String query3 = "Select "+queryfield+",COUNT(DISTINCT(cookiehash))  FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and  section like '%"+sectionname+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' GROUP by "+queryfield;
				  								       
				  									    
				  									    Query.add(query1);
				  								        Query.add(query2);
				  									    Query.add(query3);
				  									    Query.add("externalWorldQueryfilter@"+startdate+"@"+enddate+"@"+channel_name+"@"+queryfilterbuilder);
				  								       
				  								       for(int j=0 ; j < Query.size(); j++ ){
				  								       lst.add(new CombinedSegmentQueryExecutionThreads(Query.get(j),client,searchDao));
				  								    /*   lst.add(new AudienceSegmentQueryExecutionThreads(query1,client,searchDao));
				  								       lst.add(new AudienceSegmentQueryExecutionThreads(query2,client,searchDao));
				  								       lst.add(new AudienceSegmentQueryExecutionThreads(query3,client,searchDao));
				  								       lst.add(new AudienceSegmentQueryExecutionThreads(query4,client,searchDao));*/
				  								        
				  								       // returns a list of Futures holding their status and results when all complete
				  								    
				  								   /*    lst.add(new SubcategoryQueryExecutionThreads(query6,client,searchDao));
				  								       lst.add(new SubcategoryQueryExecutionThreads(query7,client,searchDao));
				  								       lst.add(new SubcategoryQueryExecutionThreads(query8,client,searchDao));
				  								       lst.add(new SubcategoryQueryExecutionThreads(query9,client,searchDao)); */
				  								       }
				  								       
				  								       
				  								       List<Future<List<PublisherReport>>> maps = executorService.invokeAll(lst);
				  									

				  									    for (int k = 0; k < maps.size(); k++)
				  									    {
				  									    
				  									    	if(maps!=null && maps.get(k)!=null){
				  									        List<PublisherReport> map = (List<PublisherReport>)maps.get(k).get();
				  									        pubreport1.addAll(map);
				  									    	}
				  									
				  							   }
				  								
				  									    executorService.shutdown();
				  									    
				  									    Map<String,PublisherReport> aggregatedmap = new HashMap<String,PublisherReport>(); 
				  									    
				  									    List<PublisherReport> object = new ArrayList<PublisherReport>();
				  									    
				  									    
				  									    for(int k=0; k< pubreport1.size(); k++)
				  									    {
				  								         try{ 
				  									    	String audiencesegment = pubreport1.get(k).getAudience_segment();
				  									    	
				  									    	String subcategory = pubreport1.get(k).getSubcategory();
				  									    	
				  									    	  String count =  pubreport1.get(k).getCount();
				  								        		
				  										        String engagementTime =  pubreport1.get(k).getEngagementTime();		
				  										        
				  										        String visitorCount = pubreport1.get(k).getVisitorCount();
				  									    	
				  										        String externalWorldCount = pubreport1.get(k).getExternalWorldCount();
				  										        
				  									    	    String key = audiencesegment+"@"+subcategory;
				  										        
				  										        
				  										        if(aggregatedmap.containsKey(key))
				  								        {
				  								       
				  								        PublisherReport obj = aggregatedmap.get(key);
				  								        obj.setAudience_segment(audiencesegment);
				  								        obj.setSubcategory(subcategory);
				  								      
				  								        
				  								        if(count!=null)
				  								        obj.setCount(count);
				  								        	
				  								        if(engagementTime!=null) 	
				  								        	obj.setEngagementTime(engagementTime);
				  								        	
				  								       if(visitorCount!=null) 	
				  								        	obj.setVisitorCount(visitorCount);
				  								        
				  								       if(externalWorldCount!=null)
				  								    	   obj.setExternalWorldCount(externalWorldCount);
				  								       else
				  								    	   obj.setExternalWorldCount("0");
				  								       
				  								       
				  								       
				  								       if(key !=null) {	
				  								    	obj.setAudience_segment(audiencesegment);
				  									        obj.setSubcategory(subcategory);
				  								       }
				  								       
				  								       
				  									    aggregatedmap.put(key, obj);
				  									    
				  								        }
				  								        else{
				  								        	       
				  								        	        PublisherReport obj = new PublisherReport();
				  								        	     
				  								        	        if(count !=null)
				  								        	        obj.setCount(count);
				  								        	        	
				  								        	        if(engagementTime !=null) 	
				  								        	        obj.setEngagementTime(engagementTime);
				  								        	        	
				  								        	       if(visitorCount !=null) 	
				  								        	        obj.setVisitorCount(visitorCount);
				  								        	
				  								        	       
				  								        	       if(externalWorldCount!=null)
				  											    	   obj.setExternalWorldCount(externalWorldCount);
				  								        	       else
				  								        	    	   obj.setExternalWorldCount("0");
				  								        	       
				  								        	       if(key!=null) {	
				  								        	    	obj.setAudience_segment(audiencesegment);
				  								   			        obj.setSubcategory(subcategory);
				  								        	     //	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=AggregationModule.capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);String tags = article.getTag();List<String> tags1 = Arrays.asList(tags.split("\\s*,\\s*")); obj.setArticleTag(tags1); if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  								        	      
				  								        	   // 	String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  								 		        	
				  								        	       
				  								        	       
				  								        	       }
				  								        	       aggregatedmap.put(key, obj);
				  								        
				  								        
				  								        }
				  								         }
				  								         catch(Exception e){
				  								        	 continue;
				  								         }
				  								      
				  									    }
				  									    
				  									     
				  									    
				  									    List<String> headers1 = new ArrayList<String>();
				  									    headers1.add("audience_segment");
				  									    headers1.add("subcategory");
				  									    headers1.add("count(*)");
				  									    headers1.add("SUM(engagementTime)");
				  									    headers1.add("COUNT(DISTINCT(cookiehash))");
				  									    headers1.add("ExternalWorldCount");
				  									    List<String> lines1= new ArrayList<String>();	
				  									    
				  									    for (Map.Entry<String, PublisherReport> entry : aggregatedmap.entrySet()) {
				  									    
				  									    	
				  									    	try{
				  									    	String key = entry.getKey();
				  									        PublisherReport obj = entry.getValue();
				  									        String [] parts1= key.split("@");
				  									        String line = parts1[0]+","+parts1[1]+","+obj.getCount()+","+obj.getEngagementTime()+","+obj.getVisitorCount()+","+obj.getExternalWorldCount();
				  									      //  String articleparts[] = url.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(url); Article article = getArticleMetaData(url);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}
				  								        	lines1.add(line);
				  									        
				  									        
				  									       
				  									      }
				  									      catch(Exception e){
				  									    	  continue;
				  									      }
				  									    
				  									   
				  									    
				  									    
				  									    
				  									    
				  									    
				  									    
				  									    
				  									    }
				  									    
				  									    

				  									    List<List<String>> data = new ArrayList<List<String>>();
				  									    for (int i = 0; i < lines1.size(); i++) {
				  								            List<String> objects = new ArrayList<String>();
				  								            String [] parts = lines1.get(i).split(",");
				  								            for(int j =0; j< parts.length; j++)
				  								              objects.add(parts[j]);
				  								           
				  								            data.add(objects);
				  								        }
				  									    
				  									    
				  									    ResultSet obj = ListtoResultSet.getResultSet(headers1, data);
				  									    
				  									     queryfield = "audience_segment";
				  									//    JSONArray json = Convertor.convertResultSetIntoJSON(obj);
				  									 //   String s = json.toString();
				  									    pubreport= NestedJSON5.getNestedJSONObject(obj, queryfield, groupby,filter); 
				  									 //   System.out.println(nestedJson);
				  									    return pubreport;
				  									    
				  							    
				  							    }
				  							    
				  							    
				  							    System.out.println(query);
				  							    CSVResult csvResult = getCsvResult(false, query);
				  							   
				  							    
				  							    List<String> headers = csvResult.getHeaders();
				  							    List<String> lines = csvResult.getLines();
				  							    
				  							    
				  							    
				  							    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
				  							    {
				  							      for (int i = 0; i < lines.size(); i++)
				  							      {
				  							       
				  							    	 try{ 
				  							    	  PublisherReport obj = new PublisherReport();
				  							        
				  							        String[] data = ((String)lines.get(i)).split(",");
				  							     //   String demographicproperties = demographicmap.get(data[0]);
				  							        
				  							            if(queryfield.equals("gender")){
				  							        	
				  							            	String genderId = GenderMap1.get(data[0]);
				  							        		obj.setGenderId(genderId);
				  							            	
				  							            	obj.setGender(capitalizeString(data[0]));
				  							            }
				  							            if(queryfield.equals("device")){
				  							        	
				  							            	String deviceId = deviceMap1.get(data[0]);
				  							        		obj.setDeviceId(deviceId);
				  							            	
				  							            	obj.setDevice_type(capitalizeString(data[0]));
				  							            }
				  							            if(queryfield.equals("state"))
				  						            	{
				  						            	
				  						            	data[0]=data[0].replace("_", " ");
				  						            	data[0] = capitalizeString(data[0]);
				  						            	obj.setState(data[0]);
				  						            	}
				  						            
				  						            
				  						            if(queryfield.equals("country"))
				  						        	  {
				  						        	
				  						            	data[0]=data[0].replace("_", " ");
				  						            	data[0] = capitalizeString(data[0]);
				  						            	obj.setCountry(data[0]);
				  						             	}
				  						        
				  							            
				  							            
				  							            
				  							            if(queryfield.equals("city")){
				  							        		try{
				  							        		String locationproperties = citycodeMap.get(data[0]);
				  									        data[0]=data[0].replace("_"," ").replace("-"," ");
				  									        data[0] = capitalizeString(data[0]);
				  									        obj.setCity(capitalizeString(data[0]));
				  									        System.out.println(data[0]);
				  									        obj.setLocationcode(locationproperties);
				  							        		}
				  							        		catch(Exception e){
				  							        			
				  							        			continue;
				  							        		}
				  							        		
				  							        		}
				  							        	if(queryfield.equals("audience_segment"))
				  							             {
				  							        		String audienceSegment = audienceSegmentMap.get(data[0]);
				  							        		String audienceSegmentCode = audienceSegmentMap2.get(data[0]);
				  							        		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				  							        		obj.setAudience_segment(audienceSegment);
				  							        		obj.setAudienceSegmentCode(audienceSegmentCode);
				  							        		}
				  							        		else
				  							        	    obj.setAudience_segment(data[0]);
				  							             }
				  							        	
				  							        	if(queryfield.equals("sourceUrl")){
				  							        		String urlId = UrlMap1.get(data[0]);
				  							        		obj.setUrlId(urlId);
				  							        		obj.setReferrerMasterDomain(data[0]);
				  							        	}
				  							        	if(queryfield.equals("agegroup"))
				  							        	{
				  							        		String ageId = AgeMap1.get(data[0]);
				  							        		obj.setAgeId(ageId);
				  							        		
				  							        		 data[0]=data[0].replace("_","-");
				  							        		 data[0]=data[0]+ " Years";
				  							        		 if(data[0].contains("medium")==false)
				  							        		 obj.setAge(data[0]);
				  							        	}
				  							            	
				  							            	
				  							        			        		        	
				  							        	if(queryfield.equals("incomelevel")){
				  							        		String incomelevelId = IncomeMap1.get(data[0]);
				  							        		obj.setIncomeId(incomelevelId);
				  							        		obj.setIncomelevel(capitalizeString(data[0]));
				  							        	}
				  							        	
				  							        	if(queryfield.equals("system_os")){
				  							        		String osproperties = oscodeMap.get(data[0]);
				  									        data[0]=data[0].replace("_"," ").replace("-", " ");
				  									        data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				  									        String [] osParts = oscodeMap1.get(osproperties).split(",");
				  									        obj.setOs(osParts[0]);
				  									        obj.setOSversion(osParts[1]);
				  									        obj.setOscode(osproperties);
				  							        	}
				  							         	
				  							        	if(queryfield.equals("modelName")){
				  								          obj.setMobile_device_model_name(data[0]);
				  								          String[] mobiledeviceproperties = devicecodeMap.get(data[0]).split(",");
				  								        	
				  									        obj.setMobile_device_model_name(mobiledeviceproperties[2]);
				  									        System.out.println(mobiledeviceproperties[2]);
				  									        obj.setDevicecode(mobiledeviceproperties[0]);
				  									        System.out.println(mobiledeviceproperties[0]);
				  							        	}
				  							        	
				  							        	
				  							        	if(queryfield.equals("brandName")){
				  							        		 data[0]= AggregationModule.capitalizeFirstLetter(data[0]);
				  							        		obj.setBrandname(data[0]);
				  							        	}
				  							        	

				  							        	if(queryfield.equals("refcurrentoriginal"))
				  							  	          {String articleparts[] = data[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data[0]); Article article = getArticleMetaData(data[0]);String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);String authorName = article.getAuthor();obj.setArticleAuthor(authorName);String authorId = article.getAuthorId();obj.setAuthorId(authorId);List<String> tags1 = article.getTags(); obj.setArticleTag(tags1);if(article.getArticletitle() != null && !article.getArticletitle().isEmpty()){ articleTitle = article.getArticletitle();obj.setArticleTitle(articleTitle);}}
				  							        	
				  							        	
				  							        	
				  							        	//   obj.setCode(code);
				  						            for(int k = 0; k < groupby.size(); k++)
				  						            {
				  						            	
				  						            	if(groupby.get(k).equals(queryfield)==false)
				  						            	{
				  						                try{
				  						            	if(groupby.get(k).equals("device")){
				  						            	
				  						            		String deviceId = deviceMap1.get(data[k+1]);
				  						            		obj.setDeviceId(deviceId);
				  						            		obj.setDevice_type(capitalizeString(data[k+1]));
				  						            	} 	
				  						            	 if(groupby.get(k).equals("state"))
				  						             	{
				  						             	
				  						             	data[k+1]=data[k+1].replace("_", " ");
				  						             	data[k+1] = capitalizeString(data[k+1]);
				  						             	obj.setState(data[k+1]);
				  						             	}
				  						             
				  						             
				  						             if(groupby.get(k).equals("country"))
				  						         	  {
				  						         	
				  						             	data[k+1]=data[k+1].replace("_", " ");
				  						             	data[k+1] = capitalizeString(data[k+1]);
				  						             	obj.setCountry(data[k+1]);
				  						              	}
				  						            	
				  						            	
				  						            	
				  						            	if(groupby.get(k).equals("city")){
				  						            		try{
				  						            		String locationproperties = citycodeMap.get(data[k+1]);
				  						    		        data[k+1]=data[k+1].replace("_"," ").replace("-"," ");
				  						    		        data[k+1]=capitalizeString(data[k+1]);
				  						    		        obj.setCity(data[k+1]);
				  						    		        System.out.println(data[k+1]);
				  						    		        obj.setLocationcode(locationproperties);
				  						            		}
				  						            		catch(Exception e)
				  						            		{
				  						            			continue;
				  						            		}
				  						            	}
				  						            	if(groupby.get(k).equals("audience_segment"))
				  							             {
				  						            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
				  						            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
				  						            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				  						            		obj.setAudience_segment(audienceSegment);
				  						            		obj.setAudienceSegmentCode(audienceSegmentCode);
				  						            		}
				  						            		else
				  						            	    obj.setAudience_segment(data[k+1]);
				  						            		
				  							             }
				  						            	
				  						            	
				  						            	if(groupby.get(k).equals("gender")){
				  								         
				  						            		String genderId = GenderMap1.get(data[k+1]);
				  						            		obj.setGenderId(genderId);
				  						            		obj.setGender(capitalizeString(data[k+1]));
				  						            	}
				  						            	if(groupby.get(k).equals("hour"))
				  								             obj.setDate(data[k+1]);
				  						            	
				  						            	if(groupby.get(k).equals("minute"))
				  								             obj.setDate(data[k+1]);
				  						            	
				  						            	
				  						            	//if(groupby.get(k).equals("gender"))
				  								           //  obj.setGender(capitalizeString(data[k+1]));
				  						            	
				  						            	
				  						            	if(groupby.get(k).equals("refcurrentoriginal"))
				  								             obj.setGender(capitalizeString(data[k+1]));
				  							            	
				  						            	if(groupby.get(k).equals("date"))
				  								             obj.setDate(data[k+1]);
				  							            		            	
				  						            	if(groupby.get(k).equals("subcategory"))
				  								             {
				  						            		String audienceSegment = audienceSegmentMap.get(data[k+1]);
				  						            		String audienceSegmentCode = audienceSegmentMap2.get(data[k+1]);
				  						            		if(audienceSegment!=null && !audienceSegment.isEmpty()){
				  						            		obj.setSubcategory(audienceSegment);
				  						            		obj.setSubcategorycode(audienceSegmentCode);
				  						            		}
				  						            		else
				  						            	    obj.setSubcategory(data[k+1]);
				  								             }
				  						            	
				  						            	if(groupby.get(k).equals("agegroup"))
				  						            	{
				  						            		String ageId = AgeMap1.get(data[k+1]);
				  						            		obj.setAgeId(ageId); 
				  						            		
				  						            		data[k+1]=data[k+1].replace("_","-");
				  							        		 data[k+1]=data[k+1]+ " Years";
				  							        		 if(data[k+1].contains("medium")==false)
				  							        		 obj.setAge(data[k+1]);
				  							        	}
				  							            	
				  							            	
				  						            	if(groupby.get(k).equals("incomelevel")){
				  						            		String incomelevelId = IncomeMap1.get(data[k+1]);
				  						            		obj.setIncomeId(incomelevelId);
				  						            		obj.setIncomelevel(capitalizeString(data[k+1]));
				  						            	}
				  					                l++;
				  						                }
				  						                catch(Exception e){
				  						                	continue;
				  						                }
				  						                
				  						                }
				  						            }
				  						           
				  						            
				  						            	            
				  						            if(l!=0){
				  						            	 //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  							            	obj.setCount(data[l+1]);
				  							             
				  								          //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  							             //   obj.setVisitorCount(data[l+1]);
				  							         

				  								         //  if(filter != null && !filter.isEmpty()  && filter.equals("engagementTime") )
				  							             //   obj.setEngagementTime(data[l+1]);
				  							         
				  						            
				  						            
				  						            }       
				  								    String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  							        pubreport.add(obj);
				  							        l=0;
				  							    	 }
				  							    	 catch(Exception e){
				  							    		 continue;
				  							    	 }
				  							    	 
				  							    	 }
				  							      //System.out.println(headers);
				  							      //System.out.println(lines);
				  							    }
				  							    
				  							    
				  							    for(int i=0;i<pubreport.size();i++){    
				  						          	  
				  							          Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				  							          pubreport.get(i).setCount(count.toString()); 
				  							       
				  					         }     
				  							    
				  							    
				  							    return pubreport;
				  							  }		  				 
				  				 
  
				  						
				  						 
				  					  public List<PublisherReport> getChannelArticleReferredPostsListInternalFilter(String startdate, String enddate, String channel_name, String articlename, String filter, String typefilter, String queryfilterbuilder )
				  							    throws SQLFeatureNotSupportedException, SqlParseException, CsvExtractorException, Exception
				  							  {
				  							    String query1 = "Select count(*),clickurloriginal from enhanceduserdatabeta1 where " +queryfilterbuilder+" and refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " GROUP BY clickurloriginal";
				  							    
				  							    
				  							    Site site = GetMiddlewareData.getSiteDetails(channel_name);
				  							    String siteurl = site.getSiteurl();
				  							    CSVResult csvResult1 = getCsvResult(false, query1);
				  							    List<String> headers1 = csvResult1.getHeaders();
				  							    List<String> lines1 = csvResult1.getLines();
				  							    System.out.println(headers1);
				  							      System.out.println(lines1);
				  							    List<PublisherReport> pubreport = new ArrayList();
				  							    if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty()))
				  							    {
				  							      for (int i = 0; i < lines1.size(); i++)
				  							      {
				  							    	try{  
				  							    	  
				  							        PublisherReport obj = new PublisherReport();
				  							        
				  							        String[] data1 = ((String)lines1.get(i)).split(",");
				  							        
				  							        Article article = getArticleMetaData(data1[0]);
				  							        
				  							        if(typefilter == null || typefilter.isEmpty() || typefilter.equals("Internal")){
				  							        if(data1[0].contains(siteurl) && !data1[0].contains("jpg") && !data1[0].contains("png") &&  !data1[0].contains("gif") &&  !data1[0].contains("mp4") && !data1[0].contains("avi") &&  !data1[0].contains("swf")) { 
				  							        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				  							     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  						            	 obj.setCount(data1[1]);
				  						               
				  						            //     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  						              //   obj.setEngagementTime(data1[1]);
				  						        

				  						              //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  						              //   obj.setVisitorCount(data1[1]);
				  							          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  							          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
				  							          String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
				  							          pubreport.add(obj);
				  							          }
				  							        }
				  							        
				  							        if(typefilter.equals("External")){
				  								        if(data1[0].contains(siteurl)== false) { 
				  								        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				  								     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  							            	 obj.setCount(data1[1]);
				  							               
				  							            //     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  							             //    obj.setEngagementTime(data1[1]);
				  							        

				  							              //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  							                // obj.setVisitorCount(data1[1]);
				  								          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  								          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
				  								        String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
				  								          pubreport.add(obj);
				  								          }
				  								        }
				  							       
				  							        if(typefilter.equals("image")){
				  								        if(data1[0].contains("jpg") || data1[0].contains("png") ||  data1[0].contains("gif")  ) { 
				  								        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				  								     //   if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  							            	 obj.setCount(data1[1]);
				  							               
				  							            //     if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  							             //    obj.setEngagementTime(data1[1]);
				  							        

				  							               //  if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  							               //  obj.setVisitorCount(data1[1]);
				  								          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  								          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
				  								        String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
				  								          pubreport.add(obj);
				  								          }
				  								        }
				  							        
				  							        if(typefilter.equals("video")){
				  								        if(data1[0].contains("mp4") || data1[0].contains("avi") ||  data1[0].contains("swf") ) { 
				  								        String articleparts[] = data1[0].split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle); obj.setPublisher_pages(data1[0]);
				  								 //       if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				  							            	 obj.setCount(data1[1]);
				  							               
				  							          //       if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				  							           //      obj.setEngagementTime(data1[1]);
				  							        

				  							             //    if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				  							              //   obj.setVisitorCount(data1[1]);
				  								          String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				  								          String articleparts1[] = articlename.split("/"); String articleTitle1 = articleparts1[articleparts1.length-1];obj.setArticle(articlename);
				  								        String articleImage = article.getMainimage();obj.setArticleImage(articleImage);String id = article.getId(); obj.setArticleId(id);
				  								          pubreport.add(obj);
				  								          }
				  								        }
				  							        
				  							        
				  							        
				  							        }
				  							    	catch(Exception e){
				  							    		
				  							    		continue;
				  							    	}
				  							        
				  							        
				  							        
				  							      }
				  							    //  System.out.println(headers1);
				  							    //  System.out.println(lines1);
				  							    }
				  							    return pubreport;
				  							  }
				  					    
				  					  			  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
				  						
 
				  						
 public List<PublisherReport> countLoyalUsersChannelDatewise(String startdate, String enddate, String channel_name, String filter)
		    throws CsvExtractorException, Exception
		  {
	  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
	  
	//	 CSVResult csvResult00 = getCsvResult(false, query00);
		// List<String> headers00 = csvResult00.getHeaders();
//		 List<String> lines00 = csvResult00.getLines();
	//	 List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
		  
		//  for (int i = 0; i < lines00.size(); i++)
	    //  {
	       
	     //   String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	     
		  
		  
		  
	//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query00);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	 //     System.out.println(headers);
	 //     System.out.println(lines);
	      Double count = 0.0;
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if (Double.parseDouble(data[1].trim()) > 7.0)
	        {
	        count++;
	        
	        }
	        
	       }
	    }  
	
	      PublisherReport obj = new PublisherReport();
	  //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				obj.setCount(count.toString());
			//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			//	obj.setEngagementTime(numberFormat.format(count));
			//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			//	obj.setVisitorCount(numberFormat.format(count));
	      obj.setVisitorType("Loyal Visitors");
	      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      pubreport.add(obj);
	  
	      
       return pubreport;
		  }			 
			  						
	
 
 public List<PublisherReport> getTopCookies(String startdate, String enddate, String channel_name)
		    throws CsvExtractorException, Exception
		  {
	  String query00 = "SELECT COUNT(*)as count, cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +" group by cookie_id limit 50";
	  
		 CSVResult csvResult00 = getCsvResult(false, query00);
	     List<String> headers00 = csvResult00.getHeaders();
		 List<String> lines = csvResult00.getLines();
	     List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
	     StringBuilder sb = new StringBuilder();
	     if ((lines != null) && (!lines.isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		       
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        
		        sb.append("'"+data[0]+"'"+",");
		  
		      }
		      
	     }    
		  
	String cookieIds = sb.toString();
	
	String cookiepool = cookieIds.substring(0,cookieIds.length()-1);
	
	 String query01 = "SELECT COUNT(*)as count,SUM(engagementTime),count(DISTINCT(sessionhash)),cookie_id FROM enhanceduserdatabeta1 where cookie_id in ("+cookiepool+") and channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +" group by cookie_id limit 100";
	  
	
	   //  Map<String,Integer> cookieSessionCount =  getCookieSessionCount(startdate, enddate, channel_name, cookiepool);  
	     //	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query01);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines1 = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	 //     System.out.println(headers);
	 //     System.out.println(lines);
	      Double count = 0.0;
	      if ((lines1 != null) && (!lines1.isEmpty()) && (!((String)lines1.get(0)).isEmpty())) {
	      for (int i = 0; i < lines1.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines1.get(i)).split(",");
	     
	
	        PublisherReport obj = new PublisherReport();
	  //    if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				obj.setCount(data[2]);
				obj.setSessionCount(data[1]);
				obj.setEngagementTime(data[3]);
				obj.setCookie_id(data[0]);
		        Double AverageTime = NestedJSON5.round(Double.parseDouble(data[3])/Double.parseDouble(data[2]),2);	
				obj.setAverageTime(MinutestoSecond(AggregationModule.MinutestoSecond(AverageTime.toString())));
				//	if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			//	obj.setEngagementTime(numberFormat.format(count));
			//	if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			//	obj.setVisitorCount(numberFormat.format(count));
	      
	      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      pubreport.add(obj);
	      }
	      }
 

       Collections.sort(pubreport, new Comparator<PublisherReport>() {
			
			@Override
	        public int compare(PublisherReport o1, PublisherReport o2) {
				return Double.parseDouble(o1.getSessionCount()) > Double.parseDouble(o2.getSessionCount()) ? -1 : (Double.parseDouble(o1.getSessionCount()) < Double.parseDouble(o2.getSessionCount())) ? 1 : 0;
	        }
	    });	
	
       

	         for(int i=0;i<pubreport.size();i++){    
	        	   
	        	   Integer sessioncount = (int)Double.parseDouble(pubreport.get(i).getSessionCount());
			         pubreport.get(i).setSessionCount(numberFormat.format(sessioncount)); 
			       Integer countv1 = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			          pubreport.get(i).setCount(numberFormat.format(countv1)); 
			       Integer engagementTime = (int) (Double.parseDouble(pubreport.get(i).getEngagementTime()));
			          pubreport.get(i).setEngagementTime(numberFormat.format(engagementTime)); 
	           
			          
	         }   

       
       
	      return pubreport;
		  }			 
 
 
 
 
 
 public List<PublisherReport> countCombinedUsersChannelDatewise(String startdate, String enddate, String channel_name, String filter)
		    throws CsvExtractorException, Exception
		  {
	 
	  
	  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
	  
	//	 CSVResult csvResult00 = getCsvResult(false, query00);
		// List<String> headers00 = csvResult00.getHeaders();
//		 List<String> lines00 = csvResult00.getLines();
	//	 List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
		  
		//  for (int i = 0; i < lines00.size(); i++)
	    //  {
	       
	     //   String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	     
		  
		  
	//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query00);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	 //     System.out.println(headers);
	 //     System.out.println(lines);
	    
	      
	      Double count1 = 0.0;
	      Double pageViews1 = 0.0;
	      Double engagementTime1 = 0.0;
	      Double AverageTime1 = 0.0;
	      
	      
	      Double count2 = 0.0;
	      Double pageViews2 = 0.0;
	      Double engagementTime2 = 0.0;
	      Double AverageTime2 = 0.0;
	      
	      Double count3 = 0.0;
	      Double pageViews3 = 0.0;
	      Double engagementTime3 = 0.0;
	      Double AverageTime3 = 0.0;
	      
	      
	      StringBuilder sb = new StringBuilder();
	      Long st = System.currentTimeMillis();
	      if ((lines != null) && (!lines.isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        
	        if (Double.parseDouble(data[1].trim()) < 2.0)
	        {
	        count1++;
	        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
	        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	        
	        
	        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
	        {
	        count2++;
	        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
	        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	        
	        if (Double.parseDouble(data[1].trim()) > 7.0)
	        {
	        count3++;
	        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
	        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	       }
	    }  
	       
	      
	     
	      
	      
	      
	      
	      PublisherReport obj = new PublisherReport();
	     
				obj.setCount(pageViews1.toString());
				
				obj.setEngagementTime(engagementTime1.toString());
				
				obj.setVisitorCount(count1.toString());
	      obj.setVisitorType("New Visitors");
	    
	      
	      PublisherReport obj1 = new PublisherReport();
	            obj1.setCount(pageViews2.toString());
				
				obj1.setEngagementTime(engagementTime2.toString());
				
				obj1.setVisitorCount(count2.toString());
	      obj1.setVisitorType("Returning Visitors");

	      
	      PublisherReport obj2 = new PublisherReport();
	      
				obj2.setCount(pageViews3.toString());
				
				obj2.setEngagementTime(engagementTime3.toString());
				
				obj2.setVisitorCount(count3.toString());
	      obj2.setVisitorType("Loyal Visitors");

	      
	      
	      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      obj1.setChannelName(channel_name1);
	      obj2.setChannelName(channel_name1);
	      pubreport.add(obj);
	      pubreport.add(obj1);
	      pubreport.add(obj2);
	      
       return pubreport;
		  }			 



 public List<PublisherReport> countCombinedUsersChannelSectionDatewise(String startdate, String enddate, String channel_name,String sectionname, String filter)
		    throws CsvExtractorException, Exception
		  {
	 
	  
	  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
	  
	//	 CSVResult csvResult00 = getCsvResult(false, query00);
		// List<String> headers00 = csvResult00.getHeaders();
//		 List<String> lines00 = csvResult00.getLines();
	//	 List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
		  
		//  for (int i = 0; i < lines00.size(); i++)
	    //  {
	       
	     //   String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	     
		  
		  
	//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query00);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	 //     System.out.println(headers);
	 //     System.out.println(lines);
	    
	      
	      Double count1 = 0.0;
	      Double pageViews1 = 0.0;
	      Double engagementTime1 = 0.0;
	      Double AverageTime1 = 0.0;
	      
	      
	      Double count2 = 0.0;
	      Double pageViews2 = 0.0;
	      Double engagementTime2 = 0.0;
	      Double AverageTime2 = 0.0;
	      
	      Double count3 = 0.0;
	      Double pageViews3 = 0.0;
	      Double engagementTime3 = 0.0;
	      Double AverageTime3 = 0.0;
	      
	      
	      StringBuilder sb = new StringBuilder();
	      Long st = System.currentTimeMillis();
	      if ((lines != null) && (!lines.isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        
	        if (Double.parseDouble(data[1].trim()) < 2.0)
	        {
	        count1++;
	        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
	        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	        
	        
	        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
	        {
	        count2++;
	        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
	        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	        
	        if (Double.parseDouble(data[1].trim()) > 7.0)
	        {
	        count3++;
	        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
	        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	       }
	    }  
	       
	      
	     
	      
	      
	      
	      
	      PublisherReport obj = new PublisherReport();
	     
				obj.setCount(pageViews1.toString());
				
				obj.setEngagementTime(engagementTime1.toString());
				
				obj.setVisitorCount(count1.toString());
	      obj.setVisitorType("New Visitors");
	    
	      
	      PublisherReport obj1 = new PublisherReport();
	            obj1.setCount(pageViews2.toString());
				
				obj1.setEngagementTime(engagementTime2.toString());
				
				obj1.setVisitorCount(count2.toString());
	      obj1.setVisitorType("Returning Visitors");

	      
	      PublisherReport obj2 = new PublisherReport();
	      
				obj2.setCount(pageViews3.toString());
				
				obj2.setEngagementTime(engagementTime3.toString());
				
				obj2.setVisitorCount(count3.toString());
	      obj2.setVisitorType("Loyal Visitors");

	      
	      
	      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      obj1.setChannelName(channel_name1);
	      obj2.setChannelName(channel_name1);
	      pubreport.add(obj);
	      pubreport.add(obj1);
	      pubreport.add(obj2);
	      
    return pubreport;
		  }			 

 
 
 
 
 
 public List<PublisherReport> countCombinedUsersChannelArticleDatewise(String startdate, String enddate, String channel_name,String articlename, String filter)
		    throws CsvExtractorException, Exception
		  {
	 
	  
	  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime),cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
	  
	//	 CSVResult csvResult00 = getCsvResult(false, query00);
		// List<String> headers00 = csvResult00.getHeaders();
//		 List<String> lines00 = csvResult00.getLines();
	//	 List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
		  
		//  for (int i = 0; i < lines00.size(); i++)
	    //  {
	       
	     //   String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	     
		  
		  
	//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query00);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	 //     System.out.println(headers);
	 //     System.out.println(lines);
	    
	      
	      Double count1 = 0.0;
	      Double pageViews1 = 0.0;
	      Double engagementTime1 = 0.0;
	      Double AverageTime1 = 0.0;
	      
	      
	      Double count2 = 0.0;
	      Double pageViews2 = 0.0;
	      Double engagementTime2 = 0.0;
	      Double AverageTime2 = 0.0;
	      
	      Double count3 = 0.0;
	      Double pageViews3 = 0.0;
	      Double engagementTime3 = 0.0;
	      Double AverageTime3 = 0.0;
	      
	      
	      StringBuilder sb = new StringBuilder();
	      Long st = System.currentTimeMillis();
	      if ((lines != null) && (!lines.isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        
	        if (Double.parseDouble(data[1].trim()) < 2.0)
	        {
	        count1++;
	        pageViews1 =pageViews1 + Double.parseDouble(data[1].trim());
	        engagementTime1 =  engagementTime1 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	        
	        
	        if (Double.parseDouble(data[1].trim()) >= 2.0 && Double.parseDouble(data[1].trim()) <= 7.0)
	        {
	        count2++;
	        pageViews2 =pageViews2 + Double.parseDouble(data[1].trim());
	        engagementTime2 =  engagementTime2 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	        
	        if (Double.parseDouble(data[1].trim()) > 7.0)
	        {
	        count3++;
	        pageViews3 =pageViews3 + Double.parseDouble(data[1].trim());
	        engagementTime3 =  engagementTime3 + Double.parseDouble(data[2].trim());
	        
	        }
	        
	       }
	    }  
	       
	      
	     
	      
	      
	      
	      
	      PublisherReport obj = new PublisherReport();
	     
				obj.setCount(pageViews1.toString());
				
				obj.setEngagementTime(engagementTime1.toString());
				
				obj.setVisitorCount(count1.toString());
	      obj.setVisitorType("New Visitors");
	    
	      
	      PublisherReport obj1 = new PublisherReport();
	            obj1.setCount(pageViews2.toString());
				
				obj1.setEngagementTime(engagementTime2.toString());
				
				obj1.setVisitorCount(count2.toString());
	      obj1.setVisitorType("Returning Visitors");

	      
	      PublisherReport obj2 = new PublisherReport();
	      
				obj2.setCount(pageViews3.toString());
				
				obj2.setEngagementTime(engagementTime3.toString());
				
				obj2.setVisitorCount(count3.toString());
	      obj2.setVisitorType("Loyal Visitors");

	      
	      
	      String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      obj1.setChannelName(channel_name1);
	      obj2.setChannelName(channel_name1);
	      pubreport.add(obj);
	      pubreport.add(obj1);
	      pubreport.add(obj2);
	      
    return pubreport;
		  }			 

 
 
 
 
 
 


 public List<PublisherReport> countUsersChannelDatewisegroupby(String startdate, String enddate, String channel_name,String groupby, String filter)
		    throws CsvExtractorException, Exception
		  {
	  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id,"+groupby+" FROM enhanceduserdatabeta1 where channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,"+groupby+" limit 20000000";
	  
	
	  
	  if(groupby.equals("hour")){
 		query00 =  "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1h') limit 20000000";
 	}

 
	  if(groupby.equals("minute")){
     	query00 =  "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id FROM enhanceduserdatabeta1 where channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1m') limit 20000000";	
 	}

    
	  
	  
	  //	 CSVResult csvResult00 = getCsvResult(false, query00);
		// List<String> headers00 = csvResult00.getHeaders();
//		 List<String> lines00 = csvResult00.getLines();
	//	 List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
		  
		//  for (int i = 0; i < lines00.size(); i++)
	    //  {
	       
	     //   String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	     
		  
		  
		  
	//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query00);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	//      System.out.println(headers);
	 //     System.out.println(lines);
	      Double count1 = 0.0;
	      Map<String,Double> dates1 =new HashMap<String,Double>();
	      String date1 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date1 = data[1].trim();
	        if(dates1.containsKey(date1)==false)
	        dates1.put(date1,0.0);
	        if (Double.parseDouble(data[2].trim()) > 7.0)
	        {
	        if(filter!=null && !filter.isEmpty() && filter.equals("visitorCount")){
         count1 = dates1.get(date1);
	        dates1.put(date1,count1+1);
	        }
	        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
             count1 = dates1.get(date1);
		        dates1.put(date1,count1+Double.parseDouble(data[2].trim()));
		        }
	        if(filter!=null && !filter.isEmpty() && filter.equals("engagementTime")){
	        	 count1 = dates1.get(date1);
			     dates1.put(date1,count1+Double.parseDouble(data[3].trim()));
	        
	         }
	        
	        }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates1.entrySet()){
	      PublisherReport obj = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date2 = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date2);
         		
         		obj.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj.setCity(city);
 		        System.out.println(city);
 		        obj.setLocationcode(locationproperties);
         	}
			    
         	 obj.setVisitorType("Loyal Visitors");	    
         	 obj.setCount(entry.getValue().toString());
	    
	                 	 
       String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      pubreport.add(obj);
		  }
	  
	      
	      Double count2 = 0.0;
	      Map<String,Double> dates2 =new HashMap<String,Double>();
	      String date2 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date2 = data[1].trim();
	        if(dates2.containsKey(date2)==false)
	        dates2.put(date2,0.0);
	        if (Double.parseDouble(data[2].trim()) >= 2.0 && Double.parseDouble(data[2].trim()) <= 7.0)
	        {
	        	 if(filter!=null && !filter.isEmpty() && filter.equals("visitorCount")){
                     count2 = dates2.get(date2);
				        dates2.put(date2,count2+1);
				        }
				        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
                         count2 = dates2.get(date2);
					        dates2.put(date2,count2+Double.parseDouble(data[2].trim()));
					        }
				        if(filter !=null && !filter.isEmpty() && filter.equals("engagementTime")){
				        	 count2 = dates2.get(date2);
						     dates2.put(date2,count1+Double.parseDouble(data[3].trim()));
				        
				         }
	        
	         }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates2.entrySet()){
	      PublisherReport obj1 = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj1.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj1.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj1.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj1.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj1.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj1.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date2a = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date2a);
         		
         		obj1.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj1.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj1.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj1.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj1.setCity(city);
 		        System.out.println(city);
 		        obj1.setLocationcode(locationproperties);
         	}
	        
         	 obj1.setVisitorType("Returning Visitors");	    
         	 obj1.setCount(entry.getValue().toString());
         	 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
	      
	        pubreport.add(obj1);
	      
	      }
	      
	      Double count3 = 0.0;
	      Map<String,Double> dates3 =new HashMap<String,Double>();
	      String date3 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date3 = data[1].trim();
	        if(dates3.containsKey(date3)==false)
	        dates3.put(date3,0.0);
	        if (Double.parseDouble(data[2].trim()) < 2.0)
	        {
	        	 if(filter !=null && !filter.isEmpty() && filter.equals("visitorCount")){
                     count3 = dates3.get(date3);
				        dates3.put(date3,count3+1);
				        }
				        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
                         count3 = dates3.get(date3);
					        dates3.put(date3,count3+Double.parseDouble(data[2].trim()));
					        }
				        if(filter!=null && !filter.isEmpty() && filter.equals("engagementTime")){
				        	 count3 = dates3.get(date3);
						     dates3.put(date3,count3+Double.parseDouble(data[3].trim()));
				        
				         }
	        
	         }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates3.entrySet()){
	      PublisherReport obj2 = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj2.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj2.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj2.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj2.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj2.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj2.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date3a = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date3a);
         		
         		obj2.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj2.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj2.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj2.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj2.setCity(city);
 		        System.out.println(city);
 		        obj2.setLocationcode(locationproperties);
         	}
	        
         	 obj2.setVisitorType("New Visitors");	    
         	 obj2.setCount(entry.getValue().toString());
         	 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj2.setChannelName(channel_name1);
	      
	        pubreport.add(obj2);
	      
	      }
	      
	      
	      
	      
       return pubreport;
		  }			 


 
 


 public List<PublisherReport> countUsersChannelDatewiseSectiongroupby(String startdate, String enddate, String channel_name,String groupby, String sectionname, String filter)
		    throws CsvExtractorException, Exception
		  {
	  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id,"+groupby+" FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,"+groupby+" limit 20000000";
	  
	
	  
	  if(groupby.equals("hour")){
 		query00 =  "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1h') limit 20000000";
 	}

 
	  if(groupby.equals("minute")){
     	query00 =  "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1m') limit 20000000";	
 	}

    
	  
	  
	  //	 CSVResult csvResult00 = getCsvResult(false, query00);
		// List<String> headers00 = csvResult00.getHeaders();
//		 List<String> lines00 = csvResult00.getLines();
	//	 List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
		  
		//  for (int i = 0; i < lines00.size(); i++)
	    //  {
	       
	     //   String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	     
		  
		  
		  
	//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query00);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	//      System.out.println(headers);
	 //     System.out.println(lines);
	      Double count1 = 0.0;
	      Map<String,Double> dates1 =new HashMap<String,Double>();
	      String date1 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date1 = data[1].trim();
	        if(dates1.containsKey(date1)==false)
	        dates1.put(date1,0.0);
	        if (Double.parseDouble(data[2].trim()) > 7.0)
	        {
	        if(filter!=null && !filter.isEmpty() && filter.equals("visitorCount")){
         count1 = dates1.get(date1);
	        dates1.put(date1,count1+1);
	        }
	        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
             count1 = dates1.get(date1);
		        dates1.put(date1,count1+Double.parseDouble(data[2].trim()));
		        }
	        if(filter!=null && !filter.isEmpty() && filter.equals("engagementTime")){
	        	 count1 = dates1.get(date1);
			     dates1.put(date1,count1+Double.parseDouble(data[3].trim()));
	        
	         }
	        
	        }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates1.entrySet()){
	      PublisherReport obj = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date2 = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date2);
         		
         		obj.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj.setCity(city);
 		        System.out.println(city);
 		        obj.setLocationcode(locationproperties);
         	}
			    
         	 obj.setVisitorType("Loyal Visitors");	    
         	 obj.setCount(entry.getValue().toString());
	    
	                 	 
       String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      pubreport.add(obj);
		  }
	  
	      
	      Double count2 = 0.0;
	      Map<String,Double> dates2 =new HashMap<String,Double>();
	      String date2 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date2 = data[1].trim();
	        if(dates2.containsKey(date2)==false)
	        dates2.put(date2,0.0);
	        if (Double.parseDouble(data[2].trim()) >= 2.0 && Double.parseDouble(data[2].trim()) <= 7.0)
	        {
	        	 if(filter!=null && !filter.isEmpty() && filter.equals("visitorCount")){
                     count2 = dates2.get(date2);
				        dates2.put(date2,count2+1);
				        }
				        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
                         count2 = dates2.get(date2);
					        dates2.put(date2,count2+Double.parseDouble(data[2].trim()));
					        }
				        if(filter !=null && !filter.isEmpty() && filter.equals("engagementTime")){
				        	 count2 = dates2.get(date2);
						     dates2.put(date2,count1+Double.parseDouble(data[3].trim()));
				        
				         }
	        
	         }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates2.entrySet()){
	      PublisherReport obj1 = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj1.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj1.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj1.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj1.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj1.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj1.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date2a = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date2a);
         		
         		obj1.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj1.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj1.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj1.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj1.setCity(city);
 		        System.out.println(city);
 		        obj1.setLocationcode(locationproperties);
         	}
	        
         	 obj1.setVisitorType("Returning Visitors");	    
         	 obj1.setCount(entry.getValue().toString());
         	 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
	      
	        pubreport.add(obj1);
	      
	      }
	      
	      Double count3 = 0.0;
	      Map<String,Double> dates3 =new HashMap<String,Double>();
	      String date3 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date3 = data[1].trim();
	        if(dates3.containsKey(date3)==false)
	        dates3.put(date3,0.0);
	        if (Double.parseDouble(data[2].trim()) < 2.0)
	        {
	        	 if(filter !=null && !filter.isEmpty() && filter.equals("visitorCount")){
                     count3 = dates3.get(date3);
				        dates3.put(date3,count3+1);
				        }
				        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
                         count3 = dates3.get(date3);
					        dates3.put(date3,count3+Double.parseDouble(data[2].trim()));
					        }
				        if(filter!=null && !filter.isEmpty() && filter.equals("engagementTime")){
				        	 count3 = dates3.get(date3);
						     dates3.put(date3,count3+Double.parseDouble(data[3].trim()));
				        
				         }
	        
	         }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates3.entrySet()){
	      PublisherReport obj2 = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj2.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj2.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj2.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj2.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj2.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj2.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date3a = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date3a);
         		
         		obj2.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj2.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj2.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj2.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj2.setCity(city);
 		        System.out.println(city);
 		        obj2.setLocationcode(locationproperties);
         	}
	        
         	 obj2.setVisitorType("New Visitors");	    
         	 obj2.setCount(entry.getValue().toString());
         	 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj2.setChannelName(channel_name1);
	      
	        pubreport.add(obj2);
	      
	      }
	      
	      
	      
	      
       return pubreport;
		  }			 


 
 


 public List<PublisherReport> countUsersChannelDatewiseArticlegroupby(String startdate, String enddate, String channel_name,String groupby,String articlename, String filter)
		    throws CsvExtractorException, Exception
		  {
	  String query00 = "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id,"+groupby+" FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,"+groupby+" limit 20000000";
	  
	
	  
	  if(groupby.equals("hour")){
 		query00 =  "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1h') limit 20000000";
 	}

 
	  if(groupby.equals("minute")){
     	query00 =  "SELECT COUNT(*)as count,SUM(engagementTime), cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal like '%"+articlename+"%' and channel_name = '" + 
				      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id,date_histogram(field='request_time','interval'='1m') limit 20000000";	
 	}

    
	  
	  
	  //	 CSVResult csvResult00 = getCsvResult(false, query00);
		// List<String> headers00 = csvResult00.getHeaders();
//		 List<String> lines00 = csvResult00.getLines();
	//	 List<PublisherReport> pubreport00 = new ArrayList();  
		
		 
	//	System.out.println(headers00);
	//	System.out.println(lines00);  
		  
		//  for (int i = 0; i < lines00.size(); i++)
	    //  {
	       
	     //   String[] data = ((String)lines00.get(i)).split(",");
	  //      //System.out.println(data[0]);
	     
		  
		  
		  
	//	//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query = "SELECT count(distinct(cookiehash))as reach,date FROM enhanceduserdatabeta1 where section like '%"+sectionname+"%' and channel_name = '" + 
	    //  channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by date";
	      CSVResult csvResult = getCsvResult(false, query00);
	      List<String> headers = csvResult.getHeaders();
	      List<String> lines = csvResult.getLines();
	      List<PublisherReport> pubreport = new ArrayList();
	//      System.out.println(headers);
	 //     System.out.println(lines);
	      Double count1 = 0.0;
	      Map<String,Double> dates1 =new HashMap<String,Double>();
	      String date1 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date1 = data[1].trim();
	        if(dates1.containsKey(date1)==false)
	        dates1.put(date1,0.0);
	        if (Double.parseDouble(data[2].trim()) > 7.0)
	        {
	        if(filter!=null && !filter.isEmpty() && filter.equals("visitorCount")){
         count1 = dates1.get(date1);
	        dates1.put(date1,count1+1);
	        }
	        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
             count1 = dates1.get(date1);
		        dates1.put(date1,count1+Double.parseDouble(data[2].trim()));
		        }
	        if(filter!=null && !filter.isEmpty() && filter.equals("engagementTime")){
	        	 count1 = dates1.get(date1);
			     dates1.put(date1,count1+Double.parseDouble(data[3].trim()));
	        
	         }
	        
	        }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates1.entrySet()){
	      PublisherReport obj = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date2 = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date2);
         		
         		obj.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj.setCity(city);
 		        System.out.println(city);
 		        obj.setLocationcode(locationproperties);
         	}
			    
         	 obj.setVisitorType("Loyal Visitors");	    
         	 obj.setCount(entry.getValue().toString());
	    
	                 	 
       String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
	      pubreport.add(obj);
		  }
	  
	      
	      Double count2 = 0.0;
	      Map<String,Double> dates2 =new HashMap<String,Double>();
	      String date2 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date2 = data[1].trim();
	        if(dates2.containsKey(date2)==false)
	        dates2.put(date2,0.0);
	        if (Double.parseDouble(data[2].trim()) >= 2.0 && Double.parseDouble(data[2].trim()) <= 7.0)
	        {
	        	 if(filter!=null && !filter.isEmpty() && filter.equals("visitorCount")){
                     count2 = dates2.get(date2);
				        dates2.put(date2,count2+1);
				        }
				        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
                         count2 = dates2.get(date2);
					        dates2.put(date2,count2+Double.parseDouble(data[2].trim()));
					        }
				        if(filter !=null && !filter.isEmpty() && filter.equals("engagementTime")){
				        	 count2 = dates2.get(date2);
						     dates2.put(date2,count1+Double.parseDouble(data[3].trim()));
				        
				         }
	        
	         }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates2.entrySet()){
	      PublisherReport obj1 = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj1.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj1.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj1.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj1.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj1.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj1.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date2a = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date2a);
         		
         		obj1.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj1.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj1.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj1.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj1.setCity(city);
 		        System.out.println(city);
 		        obj1.setLocationcode(locationproperties);
         	}
	        
         	 obj1.setVisitorType("Returning Visitors");	    
         	 obj1.setCount(entry.getValue().toString());
         	 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj1.setChannelName(channel_name1);
	      
	        pubreport.add(obj1);
	      
	      }
	      
	      Double count3 = 0.0;
	      Map<String,Double> dates3 =new HashMap<String,Double>();
	      String date3 = "";
	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
	      for (int i = 0; i < lines.size(); i++)
	      {
	       
	        
	        String[] data = ((String)lines.get(i)).split(",");
	        if(data.length > 3){
	        date3 = data[1].trim();
	        if(dates3.containsKey(date3)==false)
	        dates3.put(date3,0.0);
	        if (Double.parseDouble(data[2].trim()) < 2.0)
	        {
	        	 if(filter !=null && !filter.isEmpty() && filter.equals("visitorCount")){
                     count3 = dates3.get(date3);
				        dates3.put(date3,count3+1);
				        }
				        if(filter == null || filter.isEmpty() || filter.equals("pageviews")){
                         count3 = dates3.get(date3);
					        dates3.put(date3,count3+Double.parseDouble(data[2].trim()));
					        }
				        if(filter!=null && !filter.isEmpty() && filter.equals("engagementTime")){
				        	 count3 = dates3.get(date3);
						     dates3.put(date3,count3+Double.parseDouble(data[3].trim()));
				        
				         }
	        
	         }
	        }  
	       }
	    }  
	
	      
	    					      
	      for(Map.Entry<String,Double>entry: dates3.entrySet()){
	      PublisherReport obj2 = new PublisherReport();
	      if(groupby.equals("audience_segment"))
	             obj2.setAudience_segment(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj2.setGender(entry.getKey());
         	
         	if(groupby.equals("hour"))
		             obj2.setDate(entry.getKey());
         	
         	if(groupby.equals("minute"))
		             obj2.setDate(entry.getKey());
         	
         	
         	if(groupby.equals("gender"))
		             obj2.setGender(entry.getKey());
         	
         	
         	if(groupby.equals("refcurrentoriginal"))
		             obj2.setGender(entry.getKey());
	            	
         	if(groupby.equals("date")){
         		Date date3a = new Date(Long.parseLong(entry.getKey())); // *1000 is to convert seconds to milliseconds
         		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // the format of your date
         		 // give a timezone reference for formating (see comment at the bottom
         		String formattedDate = sdf.format(date3a);
         		
         		obj2.setDate(formattedDate);
         	}		            	
         	if(groupby.equals("subcategory"))
		             obj2.setSubcategory(entry.getKey());
         	
         	if(groupby.equals("agegroup"))
		             obj2.setAge(entry.getKey());
	            	
         	if(groupby.equals("incomelevel"))
		          obj2.setIncomelevel(entry.getKey());
	     
         	if(groupby.equals("city")){
         		String locationproperties = citycodeMap.get(entry.getKey());
 		        String city =entry.getKey().replace("_"," ").replace("-"," ");
 		        obj2.setCity(city);
 		        System.out.println(city);
 		        obj2.setLocationcode(locationproperties);
         	}
	        
         	 obj2.setVisitorType("New Visitors");	    
         	 obj2.setCount(entry.getValue().toString());
         	 String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj2.setChannelName(channel_name1);
	      
	        pubreport.add(obj2);
	      
	      }
	      
	      
	      
	      
       return pubreport;
		  }			 


 
 


 public List<PublisherReport> SessionFrequencyChannel1(String startdate, String enddate, String channel_name)
		    throws CsvExtractorException, Exception
		  {
		   // //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		  //  String query = "SELECT cookiehash,count(DISTINCT(session_id)) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "' group by cookiehash limit 100000000" ;
	        String query = "SELECT count(*),count(DISTINCT(sessionhash)),cookiehash FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by cookiehash limit 100000000" ;
 
	        CSVResult csvResult = getCsvResult(false, query);
		    List<String> headers = csvResult.getHeaders();
		    List<String> lines = csvResult.getLines();
		    //System.out.println(headers);
		    //System.out.println(lines);
		    List<PublisherReport> pubreport = new ArrayList();
		   
		    
		     Map<String,Integer> sessionFrequencyMap = new HashMap<String,Integer>();
          Map<String,List<String>> FrequencySessionMap = new HashMap<String,List<String>>();
		   // lines = processList(lines);
          Map<String,Integer>  sessionPageViewMap = new HashMap<String,Integer>();
          
       
       
       Integer value = 0;
       Integer valuev1 = 0;
       for(Integer i=1; i < 205; i++){
		    	
		    	sessionFrequencyMap.put(i.toString(),0);
		    	sessionPageViewMap.put(i.toString(),0);
		    	
		    }
		    
		      sessionFrequencyMap.put("205",0);
		      sessionPageViewMap.put("205",0);
		      //     sessionFrequencyMap.put("15-25",0);
		   //   sessionFrequencyMap.put("25-50",0);
		     // sessionFrequencyMap.put("51-100",0);
		    //  sessionFrequencyMap.put("101-200",0);
		     // sessionFrequencyMap.put("200+",0);      
		     		    
		    
		      
			    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
				      for (int i = 0; i < lines.size(); i++)
				      {
				        PublisherReport obj = new PublisherReport();
				        
				        String[] data = ((String)lines.get(i)).split(",");
				       
				        
				        if(!data[0].equals("0"))
				        {
				        
				        Integer data1 = (int)Double.parseDouble(data[1]);
				        Integer data2 = (int)Double.parseDouble(data[2]);
				        
				        if(sessionFrequencyMap.containsKey(data1.toString())){
				        	
				        	
				        	value  =  sessionFrequencyMap.get(data1.toString());
				        	sessionFrequencyMap.put(data1.toString(),value+data1);
				        	valuev1 = sessionPageViewMap.get(data1.toString());
				        	sessionPageViewMap.put(data1.toString(), data2 + valuev1);
					        
				        	
				        	
				        }
				        else{
				        
				        	value = sessionFrequencyMap.get("205");
				        	sessionFrequencyMap.put("205",value+data1);
				        	valuev1 = sessionPageViewMap.get("205");
				        	sessionPageViewMap.put("205", data2 + valuev1);
					        	
				        }
				        	String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
				      
				        pubreport.add(obj);
				      }
				    }
			    }
			   
	              for (Map.Entry<String, Integer> entry : sessionFrequencyMap.entrySet())
			    {
			        System.out.println(entry.getKey() + "," + entry.getValue());
			    }


				    Map<String,Integer> FinalMap = new FastMap<String,Integer>();
				    FinalMap.put("1", 0);
				    FinalMap.put("2", 0);
				    FinalMap.put("3", 0);
				    FinalMap.put("4", 0);
				    FinalMap.put("5", 0);
				    FinalMap.put("6", 0);
				    FinalMap.put("7", 0);
				    FinalMap.put("8", 0);
				    FinalMap.put("9-14", 0);
				    FinalMap.put("15-25", 0);
				    FinalMap.put("25-50", 0);
				    FinalMap.put("51-100", 0);
				    FinalMap.put("101-200", 0);
				    FinalMap.put("200+", 0);
				    
				    Map<String,Integer> FinalMap1 = new FastMap<String,Integer>();
				    FinalMap1.put("1", 0);
				    FinalMap1.put("2", 0);
				    FinalMap1.put("3", 0);
				    FinalMap1.put("4", 0);
				    FinalMap1.put("5", 0);
				    FinalMap1.put("6", 0);
				    FinalMap1.put("7", 0);
				    FinalMap1.put("8", 0);
				    FinalMap1.put("9-14", 0);
				    FinalMap1.put("15-25", 0);
				    FinalMap1.put("25-50", 0);
				    FinalMap1.put("51-100", 0);
				    FinalMap1.put("101-200", 0);
				    FinalMap1.put("200+", 0);
				    
				    
				    
				    
				    
				    Integer value1 = 0;
				    Integer valuev2 = 0;
				    
				    
				    Integer TotalSessions = 0;
	                Integer TotalPageviews = 0;
				/*    
				    for (Map.Entry<String, Integer> entry : sessionFrequencyMap.entrySet())
				    {
				         if(Integer.parseInt(entry.getKey()) == 1){
				        	 value1 = FinalMap.get("1");
				        	 FinalMap.put("1", value1+(1 *(entry.getValue())));
				            
				         
				         }
				    
				         if(Integer.parseInt(entry.getKey()) == 2){
				        	 value1 = FinalMap.get("2");
				        	 FinalMap.put("2", value1+ (2 * (entry.getValue())));
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 3){
				        	 value1 = FinalMap.get("3");
				        	 FinalMap.put("3",  value1+ (3 * (entry.getValue())));
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 4){
				        	 value1 = FinalMap.get("4");
				        	 FinalMap.put("4", value1+ (4*(entry.getValue())));
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 5){
				        	 value1 = FinalMap.get("5");
				        	 FinalMap.put("5",value1+(5 * (entry.getValue())));
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 6){
				        	 value1 = FinalMap.get("6");
				        	 FinalMap.put("6", value1+(6 * (entry.getValue())));
				         }
				         

				         if(Integer.parseInt(entry.getKey()) == 7){
				        	 value1 = FinalMap.get("7");
				        	 FinalMap.put("7", value1+ (7 * (entry.getValue())));
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 8){
				        	 value1 = FinalMap.get("8");
				        	 FinalMap.put("8", value1+ (8 *  (entry.getValue())));
				         }
				         
				         
				         
				         
				         if(Integer.parseInt(entry.getKey()) > 9  && Integer.parseInt(entry.getKey()) <= 14 ){
			            	 value1 = FinalMap.get("9-14");
				        	 FinalMap.put("9-14", value1+ (Integer.parseInt(entry.getKey()) * entry.getValue()));
				         }
				         if(Integer.parseInt(entry.getKey()) > 14  && Integer.parseInt(entry.getKey()) <= 25){
				        	 value1 = FinalMap.get("15-25");
				        	 FinalMap.put("15-25", value1+(Integer.parseInt(entry.getKey()) * entry.getValue()));
				         }
				         if(Integer.parseInt(entry.getKey()) > 25  && Integer.parseInt(entry.getKey()) <= 50){
				        	 value1 = FinalMap.get("25-50");
				        	 FinalMap.put("25-50", value1+(Integer.parseInt(entry.getKey())* entry.getValue()));
				         }
				         if(Integer.parseInt(entry.getKey()) > 50  && Integer.parseInt(entry.getKey()) <= 100){
				        	 value1 = FinalMap.get("51-100");
				        	 FinalMap.put("51-100", value1+(Integer.parseInt(entry.getKey()) * entry.getValue()));
				         }
				         if(Integer.parseInt(entry.getKey()) > 100 && Integer.parseInt(entry.getKey()) <= 200 ){
				        	 value1 = FinalMap.get("101-200");
				        	 FinalMap.put("101-200", value1+(Integer.parseInt(entry.getKey()) * entry.getValue()));
				         }
				         if(Integer.parseInt(entry.getKey()) > 200 ){
				        	 value1 = FinalMap.get("200+");
				        	 FinalMap.put("200+", value1+(Integer.parseInt(entry.getKey()) * entry.getValue()));
				         }
				         
				         
				         }
			    */
				   
				    
	                
	                
	                for (Map.Entry<String, Integer> entry : sessionFrequencyMap.entrySet())
				    {
				         if(Integer.parseInt(entry.getKey()) == 1){
				        	 value1 = FinalMap.get("1");
				        	 FinalMap.put("1", value1+entry.getValue());
				            
				         
				         }
				    
				         if(Integer.parseInt(entry.getKey()) == 2){
				        	 value1 = FinalMap.get("2");
				        	 FinalMap.put("2", value1+ entry.getValue());
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 3){
				        	 value1 = FinalMap.get("3");
				        	 FinalMap.put("3",  value1+ entry.getValue());
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 4){
				        	 value1 = FinalMap.get("4");
				        	 FinalMap.put("4", value1+ entry.getValue());
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 5){
				        	 value1 = FinalMap.get("5");
				        	 FinalMap.put("5",value1+entry.getValue());
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 6){
				        	 value1 = FinalMap.get("6");
				        	 FinalMap.put("6", value1+entry.getValue());
				         }
				         

				         if(Integer.parseInt(entry.getKey()) == 7){
				        	 value1 = FinalMap.get("7");
				        	 FinalMap.put("7", value1+ entry.getValue());
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 8){
				        	 value1 = FinalMap.get("8");
				        	 FinalMap.put("8", value1+ entry.getValue());
				         }
				         
				         
				         
				         
				         if(Integer.parseInt(entry.getKey()) > 8  && Integer.parseInt(entry.getKey()) <= 14 ){
			            	 value1 = FinalMap.get("9-14");
				        	 FinalMap.put("9-14", value1+ entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 14  && Integer.parseInt(entry.getKey()) <= 25){
				        	 value1 = FinalMap.get("15-25");
				        	 FinalMap.put("15-25", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 25  && Integer.parseInt(entry.getKey()) <= 50){
				        	 value1 = FinalMap.get("25-50");
				        	 FinalMap.put("25-50", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 50  && Integer.parseInt(entry.getKey()) <= 100){
				        	 value1 = FinalMap.get("51-100");
				        	 FinalMap.put("51-100", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 100 && Integer.parseInt(entry.getKey()) <= 200 ){
				        	 value1 = FinalMap.get("101-200");
				        	 FinalMap.put("101-200", value1+entry.getValue());
				         }
				         if(Integer.parseInt(entry.getKey()) > 200 ){
				        	 value1 = FinalMap.get("200+");
				        	 FinalMap.put("200+", value1+entry.getValue());
				         }
				         
				         
				         }
	                
	                
	                
	                
	                
	                
	                
	                
	                
	                
				    for (Map.Entry<String, Integer> entry : sessionPageViewMap.entrySet())
				    {
				         if(Integer.parseInt(entry.getKey()) == 1){
				        	 valuev2 = FinalMap1.get("1");
				        	
				        	 FinalMap1.put("1", valuev2+entry.getValue());
				             
				         
				         }
				    
				         if(Integer.parseInt(entry.getKey()) == 2){
				        	 valuev2 = FinalMap1.get("2");
				        	 FinalMap1.put("2", valuev2+entry.getValue());
				        	

				         
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 3){
				        	 valuev2 = FinalMap1.get("3");
				        	 FinalMap1.put("3", valuev2+entry.getValue());
				        
				         
				         }
				         
				         if(Integer.parseInt(entry.getKey()) == 4){
				        	 valuev2 = FinalMap1.get("4");
				        	 FinalMap1.put("4", valuev2+entry.getValue());
				        	

				         
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 5){
				        	 valuev2 = FinalMap1.get("5");
				        	 FinalMap1.put("5", valuev2+entry.getValue());
				        	 

				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 6){
				        	 valuev2 = FinalMap1.get("6");
				        	 FinalMap1.put("6", valuev2+entry.getValue());
				        	 

				         
				         }
				         

				         if(Integer.parseInt(entry.getKey()) == 7){
				        	 valuev2 = FinalMap1.get("7");
				        	 FinalMap1.put("7", valuev2+entry.getValue());
				        	 

				         
				         }
				         
				         
				         if(Integer.parseInt(entry.getKey()) == 8){
				        	 valuev2 = FinalMap1.get("8");
				        	 FinalMap1.put("8", valuev2+entry.getValue());
				        	 
				         }
				         
				         
				         
				         
				         if(Integer.parseInt(entry.getKey()) > 8  && Integer.parseInt(entry.getKey()) <= 14 ){
			            	 valuev2 = FinalMap1.get("9-14");
				        	 FinalMap1.put("9-14", valuev2+entry.getValue());
				        	 

				         }
				         if(Integer.parseInt(entry.getKey()) > 14  && Integer.parseInt(entry.getKey()) <= 25){
				        	 valuev2 = FinalMap1.get("15-25");
				        	 FinalMap1.put("15-25", valuev2+entry.getValue());
				         
				        	 

				         }
				         if(Integer.parseInt(entry.getKey()) > 25  && Integer.parseInt(entry.getKey()) <= 50){
				        	 valuev2 = FinalMap1.get("25-50");
				        	 FinalMap1.put("25-50", valuev2+entry.getValue());
				         
				        	 

				         }
				         if(Integer.parseInt(entry.getKey()) > 50  && Integer.parseInt(entry.getKey()) <= 100){
				        	 valuev2 = FinalMap1.get("51-100");
				        	 FinalMap1.put("51-100", valuev2+entry.getValue());
				          
				        	

				         }
				         if(Integer.parseInt(entry.getKey()) > 100 && Integer.parseInt(entry.getKey()) <= 200 ){
				        	 valuev2 = FinalMap1.get("101-200");
				        	 FinalMap1.put("101-200", valuev2+entry.getValue());
				       
				        	 
				         
				         }
				         if(Integer.parseInt(entry.getKey()) > 200 ){
				        	 valuev2 = FinalMap1.get("200+");
				        	 FinalMap1.put("200+", valuev2+entry.getValue());
				        	
				         
				         
				         }
				         
				         
				         }
				 
	    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
	    {
	     
	    	TotalSessions = TotalSessions+entry.getValue();
	    	TotalPageviews = TotalPageviews+FinalMap1.get(entry.getKey());
	    	
	    }
	    
	    Double siteAverage = (double)TotalPageviews/(double)TotalSessions;
	    
				    
				    
				    pubreport.clear();
				    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
				    {
				        PublisherReport obj = new PublisherReport();
				        String key = entry.getKey();
				        if(key!=null && !key.isEmpty()){
				        obj.setSessionFrequency(entry.getKey());
				        obj.setCount(entry.getValue().toString());
				     //   obj.setSessionPageDepth(entry.getKey());
				      //  obj.setCount(entry.getValue().toString());
				        // Integer frequency = Integer.parseInt(entry.getKey());
				      
				        obj.setTotalvisits(FinalMap1.get(entry.getKey()).toString());
				       
				        
	                    if(entry.getValue().toString().equals("0")){
	                    	obj.setTotalvisits("0");
	                    	obj.setSessioncomparison("0");
	                    }
	                    else{
	                    	
	                    	 Double sessionAverage = (double)FinalMap1.get(entry.getKey())/(double)(entry.getValue());
	                    	 
	                         sessionAverage = sessionAverage - siteAverage;
	                     	 
	                         sessionAverage = NestedJSON5.round(sessionAverage,4);
	                         
	                    	 obj.setSessioncomparison(sessionAverage.toString());	
	                    
	                    
	                    }
	                    pubreport.add(obj);
				    }
				    } 
			    
				    
			          Double  total = 0.0;
				      Double  share =0.0;
				      Double maxTotal = 0.0; 
				      Double scaledshare = 0.0;
				      Double maxpositivesessioncomparison = 0.0;
				      Double maxnegativesessioncomparison = 0.0;
				      Double scaledsessioncomparison = 0.0;
				      
				        for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  
				        	total=total+Double.parseDouble(pubreport.get(i).getCount());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
			 	    	    {
			 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
			 	    	    }
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 
				        	         if(total!=0.0){
				        	         share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	
				      	        	 
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
				        	         }
				      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	 
				      	        	 
				      	  pubreport.get(i).setShare(share.toString());
				      	  
				        }
					    
				    
				         for(int i=0;i<pubreport.size();i++){    
			   	          	  
					      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					      //    pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			          
				        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())> maxpositivesessioncomparison)
				 	    	    {
				        		   maxpositivesessioncomparison = Double.parseDouble(pubreport.get(i).getSessioncomparison());
				 	    	    }
				         
				        	 
				        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())< maxnegativesessioncomparison)
				 	    	    {
				        		 maxnegativesessioncomparison =  Double.parseDouble(pubreport.get(i).getSessioncomparison());
				 	    	    }
				         
				         }
				    
				         
				         for(int i=0;i<pubreport.size();i++){    
			   	          	  
						      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
						      //    pubreport.get(i).setCount(numberFormat.format(count)); 
						       
				             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())>0)
				        	 scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxpositivesessioncomparison)*100,2);
			        	       
					         
				             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())<0){
					         scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxnegativesessioncomparison)*100,2);
				             scaledsessioncomparison = -scaledsessioncomparison; 
				             }
					         
				          
				             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())==0.0)
					        	 scaledsessioncomparison = 0.0;
				             
				             
				             
				             pubreport.get(i).setScaledsessioncomparison(scaledsessioncomparison.toString());
				         
				         
				         }
				         
				         
				         for(int i=0;i<pubreport.size();i++){
					      	  
					      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      		  total=total+Double.parseDouble(pubreport.get(i).getTotalvisits());
					           
					              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
					            
					             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
					      		if(Double.parseDouble(pubreport.get(i).getTotalvisits())> maxTotal)
				 	    	    {
				 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getTotalvisits());
				 	    	    }
					      	  
					        }
					                 
					         for(int i=0;i<pubreport.size();i++){
					      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
					      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/total)*100,2);
					      	        
					      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
					      	      
					      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
					      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
					      	
					      	        	 
					      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/maxTotal)*100,2);
					      	        	 
					      	        	pubreport.get(i).setScaledsharetotalvisits(scaledshare.toString());	      	 
					      	        	 
					      	           pubreport.get(i).setSharetotalvisits(share.toString());
					      	  
					        }
						    
				         
				         
				         Collections.sort(pubreport, new Comparator<PublisherReport>() {
								
								@Override
						        public int compare(PublisherReport o1, PublisherReport o2) {
									return  o1.getScaledsessioncomparison().compareTo(o2.getScaledsessioncomparison());
						        }
						    });	     
				         
				    
				    return pubreport;
		  }



public List<PublisherReport> SessionRecencyChannel1(String startdate, String enddate, String channel_name)
	    throws CsvExtractorException, Exception
	  {
	   
	
	
	 String query1 = "SELECT  count(*),max(request_time),sessionhash FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by sessionhash LIMIT 10000000";
	   
  CSVResult csvResult = getCsvResult(false, query1);
 List<String> headers = csvResult.getHeaders();
 List<String> lines = csvResult.getLines();
 List<String> lines2 = new ArrayList<String>();
 //System.out.println(headers);
 //System.out.println(lines);
 List<PublisherReport> pubreport = new ArrayList();

 FastMap<String,String> aggregatedMap = new FastMap<String,String>();  

 Integer value = 0;

 Map<String,Integer> sessionDurationMap = new HashMap<String,Integer>();
 Map<String,List<String>> DurationSessionMap = new HashMap<String,List<String>>();

// lines = processList(lines);
 Map<String,Integer>  sessionPageViewMap = new HashMap<String,Integer>();
 



Integer valuev1 = 0;
 
 for(Integer i=1; i < 100000; i++){
	    	
	    	sessionDurationMap.put(i.toString(),0);
	    	sessionPageViewMap.put(i.toString(),0);
	    	
	    	
	    }
	    
	      sessionDurationMap.put("100000",0);
	      sessionPageViewMap.put("100000",0);
	    	
	

	      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		    	    String[] data = lines.get(i).split(",");
			        
		    	    if(!data[0].equals("0")){
			        	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			 	        Date parse = new Date();
			 	        Date parse2 = sdf.parse(data[2]);

			 	        Integer days  = getDifferenceDays(parse2,parse);
			        	 
			 	       
			 	        
			 	        
		        if(sessionDurationMap.containsKey(days.toString())){
		        	
		        	
		        	value  =  sessionDurationMap.get(days.toString());
		        	sessionDurationMap.put(days.toString(),value+1);
		        	valuev1 = sessionPageViewMap.get(days.toString());
		        	sessionPageViewMap.put(days.toString(), (int)Double.parseDouble(data[1]) + valuev1);
		        	
		        	}
		        	
		        
		        else{
		        	
		        	value = sessionDurationMap.get("100000");
		        	sessionDurationMap.put("100000",value+1);
		        	valuev1 = sessionPageViewMap.get("100000");
		        	sessionPageViewMap.put("100000", (int)Double.parseDouble(data[1]) + valuev1);
			        	
		        }
		        	
		      }
		    }
	      }
	
	
	
            

			    Map<String,Integer> FinalMap = new FastMap<String,Integer>();
			    FinalMap.put("1 day", 0);
			    FinalMap.put("2 days", 0);
			    FinalMap.put("3 days", 0);
			    FinalMap.put("4 days", 0);
			    FinalMap.put("5 days", 0);
			    FinalMap.put("6 days", 0);
			    FinalMap.put("7 days", 0);
			    FinalMap.put("8-14 days", 0);
			    FinalMap.put("15-30 days",0);
			    FinalMap.put("31-60 days", 0);
			    FinalMap.put("61-120 days", 0);
			    FinalMap.put("121-364 days", 0);
			    
			    
			    

			    Map<String,Integer> FinalMap1 = new FastMap<String,Integer>();
			    FinalMap1.put("1 day", 0);
			    FinalMap1.put("2 days", 0);
			    FinalMap1.put("3 days", 0);
			    FinalMap1.put("4 days", 0);
			    FinalMap1.put("5 days", 0);
			    FinalMap1.put("6 days", 0);
			    FinalMap1.put("7 days", 0);
			    FinalMap1.put("8-14 days", 0);
			    FinalMap1.put("15-30 days",0);
			    FinalMap1.put("31-60 days", 0);
			    FinalMap1.put("61-120 days", 0);
			    FinalMap1.put("121-364 days", 0);
			    
			    Integer value1 = 0;
			    Integer valuev2 =0;

			    for (Map.Entry<String, Integer> entry : sessionDurationMap.entrySet())
			    {
			         if(Integer.parseInt(entry.getKey()) <= 1){
			        	 value1 = FinalMap.get("1 day");
			        	 FinalMap.put("1 day", value1+entry.getValue());
			         }
			    
			         if(Integer.parseInt(entry.getKey()) > 1  && Integer.parseInt(entry.getKey()) <= 2 ){
		            	 value1 = FinalMap.get("2 days");
			        	 FinalMap.put("2 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 2  && Integer.parseInt(entry.getKey()) <= 3){
			        	 value1 = FinalMap.get("3 days");
			        	 FinalMap.put("3 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 3  && Integer.parseInt(entry.getKey()) <= 4){
			        	 value1 = FinalMap.get("4 days");
			        	 FinalMap.put("4 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 4  && Integer.parseInt(entry.getKey()) <= 5){
			        	 value1 = FinalMap.get("5 days");
			        	 FinalMap.put("5 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 5 && Integer.parseInt(entry.getKey()) <= 6 ){
			        	 value1 = FinalMap.get("6 days");
			        	 FinalMap.put("6 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 6  && Integer.parseInt(entry.getKey()) <= 7 ){
		            	 value1 = FinalMap.get("7 days");
			        	 FinalMap.put("7 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 7  && Integer.parseInt(entry.getKey()) <= 14){
			        	 value1 = FinalMap.get("8-14 days");
			        	 FinalMap.put("8-14 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 14  && Integer.parseInt(entry.getKey()) <= 30){
			        	 value1 = FinalMap.get("15-30 days");
			        	 FinalMap.put("15-30 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 30 && Integer.parseInt(entry.getKey()) <= 60){
			        	 value1 = FinalMap.get("31-60 days");
			        	 FinalMap.put("31-60 days", value1+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 60 && Integer.parseInt(entry.getKey()) <= 120 ){
			        	 value1 = FinalMap.get("61-120 days");
			        	 FinalMap.put("61-120 days", value1+entry.getValue());
			         }
			         
			         if(Integer.parseInt(entry.getKey()) > 120 && Integer.parseInt(entry.getKey()) <= 365 ){
			        	 value1 = FinalMap.get("121-364 days");
			        	 FinalMap.put("121-364 days", value1+entry.getValue());
			         }
			         
			         }
			  
			    
			    
			    for (Map.Entry<String, Integer> entry : sessionPageViewMap.entrySet())
			    {
			    	if(Integer.parseInt(entry.getKey()) <= 1){
			        	 valuev2 = FinalMap1.get("1 day");
			        	 FinalMap1.put("1 day", valuev2+entry.getValue());
			         }
			    
			         if(Integer.parseInt(entry.getKey()) > 1  && Integer.parseInt(entry.getKey()) <= 2 ){
		            	 valuev2 = FinalMap1.get("2 days");
			        	 FinalMap1.put("2 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 2  && Integer.parseInt(entry.getKey()) <= 3){
			        	 valuev2 = FinalMap1.get("3 days");
			        	 FinalMap1.put("3 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 3  && Integer.parseInt(entry.getKey()) <= 4){
			        	 valuev2 = FinalMap1.get("4 days");
			        	 FinalMap1.put("4 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 4  && Integer.parseInt(entry.getKey()) <= 5){
			        	 valuev2 = FinalMap1.get("5 days");
			        	 FinalMap1.put("5 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 5 && Integer.parseInt(entry.getKey()) <= 6 ){
			        	 valuev2 = FinalMap1.get("6 days");
			        	 FinalMap1.put("6 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 6  && Integer.parseInt(entry.getKey()) <= 7 ){
		            	 valuev2 = FinalMap1.get("7 days");
			        	 FinalMap1.put("7 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 7  && Integer.parseInt(entry.getKey()) <= 14){
			        	 valuev2 = FinalMap1.get("8-14 days");
			        	 FinalMap1.put("8-14 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 14  && Integer.parseInt(entry.getKey()) <= 30){
			        	 valuev2 = FinalMap1.get("15-30 days");
			        	 FinalMap1.put("15-30 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 30  && Integer.parseInt(entry.getKey()) <= 60){
			        	 valuev2 = FinalMap1.get("31-60 days");
			        	 FinalMap1.put("31-60 days", valuev2+entry.getValue());
			         }
			         if(Integer.parseInt(entry.getKey()) > 60 && Integer.parseInt(entry.getKey()) <= 120 ){
			        	 valuev2 = FinalMap1.get("61-120 days");
			        	 FinalMap1.put("61-120 days", valuev2+entry.getValue());
			         }
			         
			         if(Integer.parseInt(entry.getKey()) > 120 && Integer.parseInt(entry.getKey()) <= 365 ){
			        	 valuev2 = FinalMap1.get("121-364 days");
			        	 FinalMap1.put("121-364 days", valuev2+entry.getValue());
			         }
			         
			         }
			    
			    
			    
			    Integer TotalSessions = 0;
			    Integer TotalPageviews = 0;
			 
			    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
			    {
			     
			    	TotalSessions = TotalSessions+entry.getValue();
			    	TotalPageviews = TotalPageviews+FinalMap1.get(entry.getKey());
			    	
			    }
			    
			    Double siteAverage = (double)TotalPageviews/(double)TotalSessions;
			    
			 
			    
			    
			    
			    
			    
			    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
			    {
			        PublisherReport obj = new PublisherReport();
			        String key = entry.getKey();
			        if(key!=null && !key.isEmpty()){
			        obj.setSessionRecency(entry.getKey());
			        obj.setCount(entry.getValue().toString());
			     //   obj.setSessionPageDepth(entry.getKey());
			      //  obj.setCount(entry.getValue().toString());
			       
			      
			        obj.setTotalvisits(FinalMap1.get(entry.getKey()).toString());
			        
			        
			       
                 if(entry.getValue().toString().equals("0")){
                 	obj.setTotalvisits("0");
                 	obj.setSessioncomparison("0");
                 }
                 else{
                	 Double sessionAverage = (double)FinalMap1.get(entry.getKey())/(double)entry.getValue();
                	 
                	 
                	 
                     sessionAverage = sessionAverage - siteAverage;
                 	 
                     sessionAverage = NestedJSON5.round(sessionAverage,4);
                     
                    
                	 obj.setSessioncomparison(sessionAverage.toString());	
                 }
                 pubreport.add(obj);
			    }
			    } 
		    
		   
			    
			    Double  total = 0.0;
			      Double  share =0.0;
			      Double maxTotal = 0.0; 
			      Double scaledshare = 0.0;
			      Double maxpositivesessioncomparison = 0.0;
			      Double maxnegativesessioncomparison = 0.0;
			      Double scaledsessioncomparison = 0.0;
			      
			        for(int i=0;i<pubreport.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  
			        	total=total+Double.parseDouble(pubreport.get(i).getCount());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
		 	    	    {
		 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
		 	    	    }
			      	  
			        }
			                 
			         for(int i=0;i<pubreport.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 
			        	         if(total!=0.0){
			        	         share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	
			      	        	 
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
			        	         }
			      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	 
			      	        	 
			      	  pubreport.get(i).setShare(share.toString());
			      	  
			        }
				    
			    
			         for(int i=0;i<pubreport.size();i++){    
		   	          	  
				      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				      //    pubreport.get(i).setCount(numberFormat.format(count)); 
				       
		          
			        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())> maxpositivesessioncomparison)
			 	    	    {
			        		   maxpositivesessioncomparison = Double.parseDouble(pubreport.get(i).getSessioncomparison());
			 	    	    }
			         
			        	 
			        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())< maxnegativesessioncomparison)
			 	    	    {
			        		 maxnegativesessioncomparison =  Double.parseDouble(pubreport.get(i).getSessioncomparison());
			 	    	    }
			         
			         }
			    
			         
			         for(int i=0;i<pubreport.size();i++){    
		   	          	  
					      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
					      //    pubreport.get(i).setCount(numberFormat.format(count)); 
					       
			        	  if(Double.parseDouble(pubreport.get(i).getSessioncomparison())>0)
					        	 scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxpositivesessioncomparison)*100,2);
				        	       
						         
					             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())<0){
						         scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxnegativesessioncomparison)*100,2);
					             scaledsessioncomparison = -scaledsessioncomparison; 
					             }
						         
					          
					             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())==0.0)
						        	 scaledsessioncomparison = 0.0;
				         
				         
			             pubreport.get(i).setScaledsessioncomparison(scaledsessioncomparison.toString());
			         
			         
			         }
			         
			         
			         for(int i=0;i<pubreport.size();i++){
				      	  
				      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      		  total=total+Double.parseDouble(pubreport.get(i).getTotalvisits());
				           
				              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
				            
				             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
				      		if(Double.parseDouble(pubreport.get(i).getTotalvisits())> maxTotal)
			 	    	    {
			 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getTotalvisits());
			 	    	    }
				      	  
				        }
				                 
				         for(int i=0;i<pubreport.size();i++){
				      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
				      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/total)*100,2);
				      	        
				      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
				      	      
				      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
				      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
				      	
				      	        	 
				      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/maxTotal)*100,2);
				      	        	 
				      	        	pubreport.get(i).setScaledsharetotalvisits(scaledshare.toString());	      	 
				      	        	 
				      	           pubreport.get(i).setSharetotalvisits(share.toString());
				      	  
				        }
					    
			         
			    
			         Collections.sort(pubreport, new Comparator<PublisherReport>() {
							
							@Override
					        public int compare(PublisherReport o1, PublisherReport o2) {
								return  o1.getScaledsessioncomparison().compareTo(o2.getScaledsessioncomparison());
					        }
					    });	    
			    
			    return pubreport;
	  }




public List<PublisherReport> SessionDurationChannel1(String startdate, String enddate, String channel_name)
	    throws CsvExtractorException, Exception
	  {
	   // //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	  //  String query1 = "SELECT  session_id,max(request_time) FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by session_id LIMIT 10000000";
	   
String query1 = "SELECT  count(*),max(request_time),min(request_time),sessionhash FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by sessionhash LIMIT 10000000";

      CSVResult csvResult = getCsvResult(false, query1);
	    List<String> headers = csvResult.getHeaders();
	    List<String> lines = csvResult.getLines();
	    List<String> lines2 = new ArrayList<String>();
	    //System.out.println(headers);
	    //System.out.println(lines);
	    List<PublisherReport> pubreport = new ArrayList();
	   
	    FastMap<String,String> aggregatedMap = new FastMap<String,String>();  
	  
	    Integer value = 0;
	   
	    Map<String,Integer> sessionDurationMap = new HashMap<String,Integer>();
	    Map<String,List<String>> DurationSessionMap = new HashMap<String,List<String>>();
	  
	   // lines = processList(lines);
     Map<String,Integer>  sessionPageViewMap = new HashMap<String,Integer>();
     
  
  
  
   Integer valuev1 = 0;
	    
	    for(Integer i=1; i < 100000; i++){
		    	
		    	sessionDurationMap.put(i.toString(),0);
		    	sessionPageViewMap.put(i.toString(),0);
		    	
		    	
		    }
		    
		      sessionDurationMap.put("100000",0);
		      sessionPageViewMap.put("100000",0);
		    	
	    
		      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
			      for (int i = 0; i < lines.size(); i++)
			      {
			    	    String[] data = lines.get(i).split(",");
				        
			    	    if(!data[0].equals("0") && data.length > 3){
				        	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

				 	        Date parse = sdf.parse(data[3]);
				 	        Date parse2 = sdf.parse(data[1]);

				 	        Long diff = parse.getTime() - parse2.getTime();
				        	 
				 	        diff = diff/1000;
			    	       
				 	        
			        if(sessionDurationMap.containsKey(diff.toString())){
			        	
			        
			        	value  =  sessionDurationMap.get(diff.toString());
			        	sessionDurationMap.put(diff.toString(),value+1);
			        	valuev1 = sessionPageViewMap.get(diff.toString());
			        	sessionPageViewMap.put(diff.toString(), (int)Double.parseDouble(data[2]) + valuev1);
			        
			        	
			        }
			        else{
			        	
			        	value = sessionDurationMap.get("100000");
			        	sessionDurationMap.put("100000",value+1);
			        	valuev1 = sessionPageViewMap.get("100000");
			        	sessionPageViewMap.put("100000", (int)Double.parseDouble(data[2]) + valuev1);
				       
			        }
			     }	
			   }
			}
	    
	    
	    
	    
	    
	   

		    Map<String,Integer> FinalMap = new FastMap<String,Integer>();
		    FinalMap.put("0-10 seconds", 0);
		    FinalMap.put("11-30 seconds", 0);
		    FinalMap.put("31-60 seconds", 0);
		    FinalMap.put("61-180 seconds", 0);
		    FinalMap.put("181-600 seconds", 0);
		    FinalMap.put("601-1800 seconds", 0);
		    FinalMap.put("1800+ seconds", 0);
		    
		    Map<String,Integer> FinalMap1 = new FastMap<String,Integer>();
		    FinalMap1.put("0-10 seconds", 0);
		    FinalMap1.put("11-30 seconds", 0);
		    FinalMap1.put("31-60 seconds", 0);
		    FinalMap1.put("61-180 seconds", 0);
		    FinalMap1.put("181-600 seconds", 0);
		    FinalMap1.put("601-1800 seconds", 0);
		    FinalMap1.put("1800+ seconds", 0);
		   
		    Integer value1 = 0;
		    Integer valuev2 = 0;
		    
		    
		    for (Map.Entry<String, Integer> entry : sessionDurationMap.entrySet())
		    {
		         if(Integer.parseInt(entry.getKey()) <= 10){
		        	 value1 = FinalMap.get("0-10 seconds");
		        	 FinalMap.put("0-10 seconds", value1+entry.getValue());
		         }
		    
		         if(Integer.parseInt(entry.getKey()) > 10  && Integer.parseInt(entry.getKey()) <= 30 ){
	            	 value1 = FinalMap.get("11-30 seconds");
		        	 FinalMap.put("11-30 seconds", value1+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 30  && Integer.parseInt(entry.getKey()) <= 60){
		        	 value1 = FinalMap.get("31-60 seconds");
		        	 FinalMap.put("31-60 seconds", value1+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 60  && Integer.parseInt(entry.getKey()) <= 180){
		        	 value1 = FinalMap.get("61-180 seconds");
		        	 FinalMap.put("61-180 seconds", value1+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 180  && Integer.parseInt(entry.getKey()) <= 600){
		        	 value1 = FinalMap.get("181-600 seconds");
		        	 FinalMap.put("181-600 seconds", value1+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 600 && Integer.parseInt(entry.getKey()) <= 1800 ){
		        	 value1 = FinalMap.get("601-1800 seconds");
		        	 FinalMap.put("601-1800 seconds", value1+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 1800 ){
		        	 value1 = FinalMap.get("1800+ seconds");
		        	 FinalMap.put("1800+ seconds", value1+entry.getValue());
		         }
		         
		         
		         }
		  
		    
		    
		    for (Map.Entry<String, Integer> entry : sessionPageViewMap.entrySet())
		    {
		         if(Integer.parseInt(entry.getKey()) <= 10){
		        	 valuev2 = FinalMap1.get("0-10 seconds");
		        	 FinalMap1.put("0-10 seconds", valuev2+entry.getValue());
		         }
		    
		         if(Integer.parseInt(entry.getKey()) > 10  && Integer.parseInt(entry.getKey()) <= 30 ){
	            	 valuev2 = FinalMap1.get("11-30 seconds");
		        	 FinalMap1.put("11-30 seconds", valuev2+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 30  && Integer.parseInt(entry.getKey()) <= 60){
		        	 valuev2 = FinalMap1.get("31-60 seconds");
		        	 FinalMap1.put("31-60 seconds", valuev2+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 60  && Integer.parseInt(entry.getKey()) <= 180){
		        	 value1 = FinalMap1.get("61-180 seconds");
		        	 FinalMap1.put("61-180 seconds", value1+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 180  && Integer.parseInt(entry.getKey()) <= 600){
		        	 valuev2 = FinalMap1.get("181-600 seconds");
		        	 FinalMap1.put("181-600 seconds", valuev2+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 600 && Integer.parseInt(entry.getKey()) <= 1800 ){
		        	 valuev2 = FinalMap1.get("601-1800 seconds");
		        	 FinalMap1.put("601-1800 seconds", valuev2+entry.getValue());
		         }
		         if(Integer.parseInt(entry.getKey()) > 1800 ){
		        	 valuev2 = FinalMap1.get("1800+ seconds");
		        	 FinalMap1.put("1800+ seconds", valuev2+entry.getValue());
		         }
		         
		         
		         }
		    
		    Integer TotalSessions = 0;
		    Integer TotalPageviews = 0;
		 		    
		    pubreport.clear();
		    
		    
		    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
		    {
		     
		    	TotalSessions = TotalSessions+entry.getValue();
		    	TotalPageviews = TotalPageviews+FinalMap1.get(entry.getKey());
		    	
		    }
		    
		    Double siteAverage = (double)TotalPageviews/(double)TotalSessions;
		    
		    
		    
		    for (Map.Entry<String, Integer> entry : FinalMap.entrySet())
		    {
		        PublisherReport obj = new PublisherReport();
		        String key = entry.getKey();
		        if(key!=null && !key.isEmpty()){
		        obj.setSessionDuration(entry.getKey());
		        obj.setCount(entry.getValue().toString());
		      //  obj.setSessionPageDepth(entry.getKey());
		      //  obj.setCount(entry.getValue().toString());
		       
		        obj.setTotalvisits(FinalMap1.get(entry.getKey()).toString());
		        
		        
		        
		      
		        
             if(entry.getValue().toString().equals("0")){
             	obj.setTotalvisits("0");
             	obj.setSessioncomparison("0");
             }
             else{
             	 Double sessionAverage = (double)FinalMap1.get(entry.getKey())/(double)entry.getValue();
            	 
                 sessionAverage = sessionAverage - siteAverage;
             	 
                 sessionAverage = NestedJSON5.round(sessionAverage,4);
                 
                 
            	 obj.setSessioncomparison(sessionAverage.toString());	
             }   
             pubreport.add(obj);
		    }
		    
		    } 
		    
		    
		    
		    Double  total = 0.0;
		      Double  share =0.0;
		      Double maxTotal = 0.0; 
		      Double scaledshare = 0.0;
		      Double maxpositivesessioncomparison = 0.0;
		      Double maxnegativesessioncomparison = 0.0;
		      Double scaledsessioncomparison = 0.0;
		      
		        for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  
		        	total=total+Double.parseDouble(pubreport.get(i).getCount());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
	 	    	    {
	 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	 	    	    }
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 
		        	         if(total!=0.0){
		        	         share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	
		      	        	 
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
		        	         }
		      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	 
		      	        	 
		      	  pubreport.get(i).setShare(share.toString());
		      	  
		        }
			    
		    
		         for(int i=0;i<pubreport.size();i++){    
	   	          	  
			      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			      //    pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	          
		        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())> maxpositivesessioncomparison)
		 	    	    {
		        		   maxpositivesessioncomparison = Double.parseDouble(pubreport.get(i).getSessioncomparison());
		 	    	    }
		         
		        	 
		        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())< maxnegativesessioncomparison)
		 	    	    {
		        		 maxnegativesessioncomparison =  Double.parseDouble(pubreport.get(i).getSessioncomparison());
		 	    	    }
		         
		         }
		    
		         
		         for(int i=0;i<pubreport.size();i++){    
	   	          	  
				      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
				      //    pubreport.get(i).setCount(numberFormat.format(count)); 
				       
		        	         if(Double.parseDouble(pubreport.get(i).getSessioncomparison())>0)
				        	 scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxpositivesessioncomparison)*100,2);
			        	       
					         
				             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())<0){
					         scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxnegativesessioncomparison)*100,2);
				             scaledsessioncomparison = -scaledsessioncomparison; 
				             }
					         
				          
				             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())==0.0)
					        	 scaledsessioncomparison = 0.0;
			         
		             pubreport.get(i).setScaledsessioncomparison(scaledsessioncomparison.toString());
		         
		         
		         }
		         
		         
		         
		         for(int i=0;i<pubreport.size();i++){
			      	  
			      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      		  total=total+Double.parseDouble(pubreport.get(i).getTotalvisits());
			           
			              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
			            
			             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
			      		if(Double.parseDouble(pubreport.get(i).getTotalvisits())> maxTotal)
		 	    	    {
		 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getTotalvisits());
		 	    	    }
			      	  
			        }
			                 
			         for(int i=0;i<pubreport.size();i++){
			      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
			      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/total)*100,2);
			      	        
			      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
			      	      
			      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
			      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
			      	
			      	        	 
			      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/maxTotal)*100,2);
			      	        	 
			      	        	pubreport.get(i).setScaledsharetotalvisits(scaledshare.toString());	      	 
			      	        	 
			      	           pubreport.get(i).setSharetotalvisits(share.toString());
			      	  
			        }
				    
		         
		         
		         Collections.sort(pubreport, new Comparator<PublisherReport>() {
						
						@Override
				        public int compare(PublisherReport o1, PublisherReport o2) {
							return  o1.getScaledsessioncomparison().compareTo(o2.getScaledsessioncomparison());
				        }
				    });	    
		    
		    return pubreport;
	  }




public static List<PublisherReport> SessionPageDepthChannel1(String startdate, String enddate, String channel_name)
	    throws CsvExtractorException, Exception
	  {
	    //Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
	    //String query = "SELECT count(DISTINCT(refcurrentoriginal)),session_id FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by session_id LIMIT 10000000";
	    
       String query = "SELECT count(*),count(DISTINCT(refcurrentoriginal)),sessionhash FROM enhanceduserdatabeta1 where channel_name = '" + channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" + " group by sessionhash LIMIT 10000000";
  
         CSVResult csvResult = getCsvResult(false, query);
	    List<String> headers = csvResult.getHeaders();
	    List<String> lines = csvResult.getLines();
	    //System.out.println(headers);
	    //System.out.println(lines);
	    List<PublisherReport> pubreport = new ArrayList();
	    Map<String,Integer> sessiondepthMap = new HashMap<String,Integer>();
      Map<String,List<String>> depthSessionMap = new HashMap<String,List<String>>();
	    //lines = processList(lines);
      Map<String,Integer>  sessionPageViewMap = new HashMap<String,Integer>();
      Integer value = 0;
      Integer valuev1 = 0;
      for(Integer i=0; i < 21; i++){
	    	
	    	sessiondepthMap.put(i.toString(),0);
	    	sessionPageViewMap.put(i.toString(),0);
	    	
	    }
	    
	      sessiondepthMap.put("20+",0);
	      sessionPageViewMap.put("20+",0);
	      
	    
	    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		        
		        
		        
		        
		        if(!data[0].equals("0"))
		        {
		        
		        Integer data1 = (int)Double.parseDouble(data[1]);
		        Integer data2 = (int)Double.parseDouble(data[2]);
		        
		        if(data1 !=0){
		        if(sessiondepthMap.containsKey(data1.toString())){
		        	
		        	value  =  sessiondepthMap.get(data1.toString());
		        	sessiondepthMap.put(data1.toString(),value+1);
		        	valuev1 = sessionPageViewMap.get(data1.toString());
		        	sessionPageViewMap.put(data1.toString(), data2 + valuev1);
		        	
		        	
		        	
		        	
		        }
		        else{
		        	
		        	value = sessiondepthMap.get("20+");
		        	sessiondepthMap.put("20+",value+1);
		        	valuev1 = sessionPageViewMap.get("20+");
		        	sessionPageViewMap.put("20+", data2 + valuev1);
		        	
		          }
		        	String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		      
		        pubreport.add(obj);
		      
		        } 
		        
		        }
		        
		        }
		    }
	   
	   
        for (Map.Entry<String, Integer> entry : sessiondepthMap.entrySet())
	    {
	        System.out.println(entry.getKey() + "," + entry.getValue());
	    }

        
        pubreport.clear();
        
        
        Integer TotalSessions = 0;
        Integer TotalPageviews = 0;

for (Map.Entry<String, Integer> entry : sessiondepthMap.entrySet())
{

TotalSessions = TotalSessions+entry.getValue();
TotalPageviews = TotalPageviews+sessionPageViewMap.get(entry.getKey());

}

Double siteAverage = (double)TotalPageviews/(double)TotalSessions;

        
        
        
        for (Map.Entry<String, Integer> entry : sessiondepthMap.entrySet())
		    {
		        
        	    PublisherReport obj = new PublisherReport();
		        String key = entry.getKey();
		        if(key!=null && !key.isEmpty()){
		        obj.setSessionPageDepth(entry.getKey());
		        obj.setCount(entry.getValue().toString());
		       
		        
		        
		     
		        
		        
		        
		        obj.setTotalvisits(sessionPageViewMap.get(entry.getKey()).toString());
		    
		        
		        
                if(entry.getValue().toString().equals("0")){
                	obj.setTotalvisits("0");
                	obj.setSessioncomparison("0");
                }
                else {
                	
                	
                	Double sessionAverage = (double)sessionPageViewMap.get(entry.getKey())/(double)entry.getValue();
               	 
                    sessionAverage = sessionAverage - siteAverage;
                	 
                    sessionAverage = NestedJSON5.round(sessionAverage,4);
                    
                    
               	    obj.setSessioncomparison(sessionAverage.toString());	
                	
                	
                }
		        pubreport.add(obj);
		    }
		    }
	    
          Double  total = 0.0;
	      Double  share =0.0;
	      Double maxTotal = 0.0; 
	      Double scaledshare = 0.0;
	      Double maxpositivesessioncomparison = 0.0;
	      Double maxnegativesessioncomparison = 0.0;
	      Double scaledsessioncomparison = 0.0;
	      
	        for(int i=0;i<pubreport.size();i++){
	      	  
	      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      		  
	        	total=total+Double.parseDouble(pubreport.get(i).getCount());
	           
	              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
	            
	             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
	      		if(Double.parseDouble(pubreport.get(i).getCount())> maxTotal)
	    	    {
	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getCount());
	    	    }
	      	  
	        }
	                 
	         for(int i=0;i<pubreport.size();i++){
	      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
	      	        	 
	        	         if(total!=0.0){
	        	         share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/total)*100,2);
	      	        
	      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
	      	      
	      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
	      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
	      	
	      	        	 
	      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getCount())/maxTotal)*100,2);
	        	         }
	      	        	pubreport.get(i).setScaledShare(scaledshare.toString());	      	 
	      	        	 
	      	  pubreport.get(i).setShare(share.toString());
	      	  
	        }
		    
	    
	         for(int i=0;i<pubreport.size();i++){    
 	          	  
		      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
		      //    pubreport.get(i).setCount(numberFormat.format(count)); 
		       
        
	        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())> maxpositivesessioncomparison)
	 	    	    {
	        		   maxpositivesessioncomparison = Double.parseDouble(pubreport.get(i).getSessioncomparison());
	 	    	    }
	         
	        	 
	        	 if(Double.parseDouble(pubreport.get(i).getSessioncomparison())< maxnegativesessioncomparison)
	 	    	    {
	        		 maxnegativesessioncomparison =  Double.parseDouble(pubreport.get(i).getSessioncomparison());
	 	    	    }
	         
	         }
	    
	         
	         for(int i=0;i<pubreport.size();i++){    
 	          	  
			      //    Integer count = (int) (Double.parseDouble(pubreport.get(i).getCount()));
			      //    pubreport.get(i).setCount(numberFormat.format(count)); 
			       
	        	  if(Double.parseDouble(pubreport.get(i).getSessioncomparison())>0)
			        	 scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxpositivesessioncomparison)*100,2);
		        	       
				         
			             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())<0){
				         scaledsessioncomparison = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getSessioncomparison())/maxnegativesessioncomparison)*100,2);
			             scaledsessioncomparison = -scaledsessioncomparison; 
			             }
				         
			          
			             if(Double.parseDouble(pubreport.get(i).getSessioncomparison())==0.0)
				        	 scaledsessioncomparison = 0.0;
		         
		         
	             pubreport.get(i).setScaledsessioncomparison(scaledsessioncomparison.toString());
	         
	         
	         }
	         
	         
	         for(int i=0;i<pubreport.size();i++){
		      	  
		      	 // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      		  total=total+Double.parseDouble(pubreport.get(i).getTotalvisits());
		           
		              //  if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		              //	  total=total+Double.parseDouble(pubreport.get(i).getEngagementTime());
		            
		             //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		             // 	  total=total+Double.parseDouble(pubreport.get(i).getVisitorCount());
		      		if(Double.parseDouble(pubreport.get(i).getTotalvisits())> maxTotal)
	 	    	    {
	 	    	    	maxTotal = Double.parseDouble(pubreport.get(i).getTotalvisits());
	 	    	    }
		      	  
		        }
		                 
		         for(int i=0;i<pubreport.size();i++){
		      	        // if(filter == null || filter.isEmpty() ||  filter.equals("pageviews"))
		      	        	 share = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/total)*100,2);
		      	        
		      	       //   if(filter != null && !filter.isEmpty() && filter.equals("engagementTime") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getEngagementTime())/total)*100);
		      	      
		      	       //   if(filter != null && !filter.isEmpty()  && filter.equals("visitorCount") )
		      	        //	  share =(int) Math.round(( Double.parseDouble(pubreport.get(i).getVisitorCount())/total)*100);
		      	
		      	        	 
		      	        	scaledshare = NestedJSON5.round((Double.parseDouble(pubreport.get(i).getTotalvisits())/maxTotal)*100,2);
		      	        	 
		      	        	pubreport.get(i).setScaledsharetotalvisits(scaledshare.toString());	      	 
		      	        	 
		      	           pubreport.get(i).setSharetotalvisits(share.toString());
		      	  
		        }
			    
	         
	         
	         
	         
	         Collections.sort(pubreport, new Comparator<PublisherReport>() {
					
					@Override
			        public int compare(PublisherReport o1, PublisherReport o2) {
						return  o1.getScaledsessioncomparison().compareTo(o2.getScaledsessioncomparison());
			        }
			    });	    
         
         return pubreport;
	  }

public List<PublisherReport> countfingerprintChannelFilterNotOperator(String startdate, String enddate, String channel_name, String queryfilterbuilder)
	    throws CsvExtractorException, Exception
	  {
		  
		  
	//	  System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream("output.txt"))));
		  
	    
		//  String query00 = "SELECT cookie_id FROM enhanceduserdatabeta1 where refcurrentoriginal= '"+articlename+"' and channel_name = '" + 
			//      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'" +"group by cookie_id limit 20000000";
		  
		//	 CSVResult csvResult00 = getCsvResult(false, query00);
			// List<String> headers00 = csvResult00.getHeaders();
	//		 List<String> lines00 = csvResult00.getLines();
		//	 List<PublisherReport> pubreport00 = new ArrayList();  
			
			 
		//	System.out.println(headers00);
		//	System.out.println(lines00);  
			  
			//  for (int i = 0; i < lines00.size(); i++)
		    //  {
		       
		     //   String[] data = ((String)lines00.get(i)).split(",");
		  //      //System.out.println(data[0]);
		     
			 queryfilterbuilder = queryfilterbuilder.replace("city in","city not in").replace("state in","state not in").replace("country in","country not in"); 
			  
			  
			//Aggregations result = query(String.format("SELECT COUNT(*),brandName,browser_name FROM enhanceduserdatabeta1 group by brandName,browser_name", new Object[] { "enhanceduserprofilestore" }));
		    String query = "SELECT count(distinct(cookiehash))as reach FROM enhanceduserdatabeta1 where "+queryfilterbuilder+" and channel_name = '" + 
		      channel_name + "' and date between " + "'" + startdate + "'" + " and " + "'" + enddate + "'";
		      CSVResult csvResult = getCsvResult(false, query);
		      List<String> headers = csvResult.getHeaders();
		      List<String> lines = csvResult.getLines();
		      List<PublisherReport> pubreport = new ArrayList();
		      System.out.println(headers);
		      System.out.println(lines);
		      if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty())) {
		      for (int i = 0; i < lines.size(); i++)
		      {
		        PublisherReport obj = new PublisherReport();
		        
		        String[] data = ((String)lines.get(i)).split(",");
		       // obj.setDate(data[0]);
		        obj.setReach(data[0]);
		        String[] channels = channel_name.split("_");String channel_name1 = channels[0];channel_name1 = capitalizeString(channel_name1);obj.setChannelName(channel_name1);
		   //     String articleparts[] = articlename.split("/"); String articleTitle = articleparts[articleparts.length-1];articleTitle = articleTitle.replace("-"," ");articleTitle=capitalizeString(articleTitle);obj.setArticleTitle(articleTitle);obj.setArticle(articlename);
		        pubreport.add(obj);
		      }
		    }  
		    
	    return pubreport;
	  }





public String getTimeDiff(Date dateOne, Date dateTwo) {
	Long differenceInTime = TimeUnit.MILLISECONDS.toMinutes((dateOne
			.getTime() - dateTwo.getTime()));
	if (differenceInTime == 0) {
		differenceInTime = TimeUnit.MILLISECONDS.toSeconds((dateOne
				.getTime() - dateTwo.getTime()));
		return differenceInTime.toString() + " Seconds";
	}

	return differenceInTime.toString() + " Minutes";
}


 
public static String MinutestoSecond(String AverageTime)

{

Double time = Double.parseDouble(AverageTime);
Double seconds  = 60.0 * time;
Integer Roundoffseconds = seconds.intValue();
Integer mins  = Roundoffseconds / 60;
Roundoffseconds  =  Roundoffseconds  - mins * 60;
Integer sec =  Roundoffseconds;

//if(mins == 0)
//return "NA";
	
if(sec >=0 && sec <10)
return mins.toString()+"."+"0"+sec.toString();
else
return mins.toString()+"."+sec.toString();


}
				  						
  public static CSVResult getCsvResult(boolean flat, String query)
    throws SqlParseException, SQLFeatureNotSupportedException, Exception, CsvExtractorException
  {
    return getCsvResult(flat, query, false, false);
  }
  
  public static CSVResult getCsvResult(boolean flat, String query, boolean includeScore, boolean includeType)
    throws SqlParseException, SQLFeatureNotSupportedException, Exception, CsvExtractorException
  {
    SearchDao searchDao = getSearchDao();
    QueryAction queryAction = searchDao.explain(query);
    EhCacheKeyCodeRepository ehcache = EhCacheKeyCodeRepository.getInstance();
    Object execution = null;
    CSVResult results  = (CSVResult)ehcache.get(query,false);

    if(results == null || results.equals(""))
    {
    	
    	
    
    execution = QueryActionElasticExecutor.executeAnyAction(searchDao.getClient(), queryAction);
    
    
    
    results =  new CSVResultsExtractor(includeScore, includeType).extractResults(execution, flat, ",");
    ehcache.put(query,results);
  
    return results;
    }
  
    else{
    	
    	     	 return results;
    	
    }
    

  
  }
  
  
  
  
  
  
  
  
  
  
  
  
  public static void sumTest()
    throws IOException, SqlParseException, SQLFeatureNotSupportedException
  {}
  
  private static Aggregations query(String query)
    throws SqlParseException, SQLFeatureNotSupportedException
  {
    SqlElasticSearchRequestBuilder select = getSearchRequestBuilder(query);
    return ((SearchResponse)select.get()).getAggregations();
  }
  
  private static SqlElasticSearchRequestBuilder getSearchRequestBuilder(String query)
    throws SqlParseException, SQLFeatureNotSupportedException
  {
    SearchDao searchDao = getSearchDao();
    return (SqlElasticSearchRequestBuilder)searchDao.explain(query).explain();
  }
  
  public Article getArticleMetaData( String url ) {
	    
	    String query = "SELECT Entity1,Entity2,Entity3,Entity4,Entity5,Entity6,Entity7,Entity8,Entity9,Entity10,Entity11,Entity12,EntityId FROM entity where Entity1 like '%"+url.trim()+"%' GROUP BY Entity1,Entity2,Entity3,Entity4,Entity5,Entity6,Entity7,Entity8,Entity9,Entity10,Entity11,Entity12,EntityId";
	    System.out.println(query);
	    CSVResult csvResult = null;
		try {
			csvResult = getCsvResult(false, query);
		} catch (SQLFeatureNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SqlParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CsvExtractorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    List<String> headers = csvResult.getHeaders();
	    List<String> lines = csvResult.getLines();
	    List<String> articleList = new ArrayList();
	    String articleid = "";
	    String articleurl = "";
	    String articlename = "";
	    String articletitle = "";
	    String siteid = "";
	    String author = "";
	    String publishdate = "";
	    String mainimage = "";
	    String tag = "";
	    String authorId = "";
	    String sectionid= "";
	    String sectionname = null;
	    Article obj = new Article();
	    if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
	    {
	     
	 	    
	    	        String[] data = ((String)lines.get(0)).split(",");
	 	    	     
	 			    if(url!=null && !url.isEmpty())
		 		    articleurl = url;
		 		  
		 		    if(data[1]!=null && !data[1].isEmpty())
		 		    articlename = data[1];
	 				
		 		    if(data[2]!=null && !data[2].isEmpty())
		 		    siteid = data[2];
	 			    
		 		    if(data[4]!=null && !data[4].isEmpty())
		 		    publishdate = data[4];
	 			   
		 		    
		 		    if(data[8]!=null && !data[8].isEmpty())
		 		    articletitle = data[8];
	 			    
		 		    if(data[3]!=null && !data[3].isEmpty()){
		 		    author = data[3];
		 		    authorId = AggregationModule.AuthorMap1.get(author);
	 			    
		 		    }
		 		    
		 		    if(data[6]!=null && !data[6].isEmpty())
		 		    mainimage = data[6];
	 			    
		 		    if(data[5]!=null && !data[5].isEmpty())
		 		    tag = data[5];
	 				
		 		    if(data[11]!=null && !data[11].isEmpty())
		 		    {
		 		    sectionid = data[11];
	 			    sectionname = AggregationModule.sectionMap.get(sectionid);
		 		    }
		 		    
		 		   
		 		    if(data[12]!=null && !data[12].isEmpty())
		 		    {
		 		     articleid=data[12];
		 		    }
		 		    
		 		   
	 			    
	 			   // System.out.println(articleurl);
	 				List<String> tags1 = new ArrayList<String>();
	 				if(tag != null)
	 			    tags1 = Arrays.asList(tag.split("\\s*,\\s*")); 
	 	           
	 				if(articletitle == null || articletitle.isEmpty()) 
	 	            {
	 	            	
	 	            	articletitle = articlename;
	 	            	articletitle = articletitle.replace("-", " ");
	 	            	articletitle = AggregationModule.capitalizeString(articletitle);
	 	            	
	 	            
	 	            
	 	            
	 	            }
	 			     
	 	            List<String> tagIds = new ArrayList<String>();
	 	            
	 	            for(String tagv1:tags1){
	 	            	
	 	            	String tagId = AggregationModule.tagMap3.get(tagv1);
	 	            	if(tagId != null)
	 	            	tagIds.add(tagId);
	 	            }
	 	            
	 	             if(articleid!=null)
	 	             obj.setId(articleid);
	 	             
	 	             if(articleurl != null)
	 	             obj.setArticleUrl(articleurl);
	 	    		 
	 	             
	 	             if(siteid!=null)
	 	             obj.setSiteId(siteid);
	 	    	     
	 	             if(articlename !=null)
	 	             obj.setArticleName(articlename);
	 	    		 
	 	             if(author !=null && !author.equals("[]"))
	 	             obj.setAuthor(author);
	 	    		 
	 	             if(publishdate != null && !publishdate.equals("None"))
	 	             obj.setPublishdate(publishdate);
	 	    		 
	 	             if(mainimage != null)
	 	             obj.setMainimage(mainimage);
	 	    		 
	 	             
	 	             if(tags1 != null && !tags1.isEmpty())
	 	             obj.setTags(tags1);
	 	    	    
	 	             if(articletitle != null)
	 	             obj.setArticletitle(articletitle);
	 	    	    
	 	             
	 	             if(sectionid != null)
	 	             obj.setSectionid(sectionid);
	 	    		// article.add(obj);
	 	    	     
	 	             if(authorId !=null)
	 	             obj.setAuthorId(authorId);
	 	    	   
	 	             
	 	             if(sectionname != null)
	 	             obj.setSectionname(sectionname);
	 	    	   
	 	             
	 	             if(tagIds != null && !tagIds.isEmpty())
	 	             obj.setTagIds(tagIds);
	 			}    
	 		  
	 	     
	 	         
	 	        
	 	    return obj;
		 
}


public String getArticleName( String id ) {
	    
	    String query = "SELECT Entity2 FROM entity where EntityId='"+id+"'";
	    System.out.println(query);
	    CSVResult csvResult = null;
		try {
			csvResult = getCsvResult(false, query);
		} catch (SQLFeatureNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SqlParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CsvExtractorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 String articlename = "";
		 List<String> headers = csvResult.getHeaders();
		 List<String> lines = csvResult.getLines();
		 List<String> articleList = new ArrayList();
		 
		 if ((lines != null) && (!lines.isEmpty()) && (!((String)lines.get(0)).isEmpty()))
		    {
		     
		 	    
		    	        String[] data = ((String)lines.get(0)).split(",");
		 	    	     
		 			   
			 		  
			 		    if(data[0]!=null && !data[0].isEmpty())
			 		    articlename = data[0];
		    }


return articlename;

}
  
  
  
  private static InetSocketTransportAddress getTransportAddress()
  {
    String host = System.getenv("ES_TEST_HOST");
    String port = System.getenv("ES_TEST_PORT");
    if (host == null)
    {
    host = "localhost";
    	//System.out.println("ES_TEST_HOST enviroment variable does not exist. choose default '172.16.101.132'");
    }
    if (port == null)
    {
    	port = "9300";
    	//System.out.println("ES_TEST_PORT enviroment variable does not exist. choose default '9300'");
    }
    //System.out.println(String.format("Connection details: host: %s. port:%s.", new Object[] { host, port }));
    return new InetSocketTransportAddress(host, Integer.parseInt(port));
  }
}
